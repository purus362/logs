CREATE OR REPLACE PROCEDURE PMMENT.TRFDTLIM
(
   in_session_number   sditrfdti.session_number%TYPE,
   in_action           NCHAR, -- R/P/S/R/T/N
   in_trans_feed       INTEGER DEFAULT 0,
   in_batch_count      INTEGER DEFAULT 100
)
AS

-- ------------------------------------------------------------------------
-- NAME
-- Object Name:    trfdtlim
-- File Name  :    trfdtlim.sql
-- Description:
--              This procedure is used for uploading transfer import data
--             The stored procedure has the following internal procedures
--          validate_00             = Customer Order Request
--          validate_01             = Transfer creation in work status
--            validate_02                = Pick Exceptions
--            validate_03_for_false     = Shipping with JDA_ORIGIN FALSE
--            validate_03_for_true    = Shipping with JDA_ORIGIN TRUE
--            validate_04                = Receiving
--            validate_09                = Cancel
-- Type      :     Procedure
-- Restartabilty: Procedure
-- Handle W/Care: Yes (Complex logic)
-- Modification History
-- Date     Author      Comments
-- ------------------------------------------------------------------------
-- 07/31/02 Maggie    Rewrote the procedure
-- ------------------------------------------------------------------------
-- 10/25/02    Maggie      Log ID 17270
--                Performance Enhancement Retrofit
--                Modified TRFPPKUPD to pass
--                in_del_prccstww as 'F'. Modified to insert component
--                records in prctmpww/csttmpww for both Shiping and
--                Receiving location.
-- 11/22/202 LMG  Passed var_trf_number to TRFALWBLD instead of trf.trf_number
--                to prevent a NO DATA FOUND error
-- 11/26/2002 Maggie
--                Reversed the previous change.
--                Corrected the array processing for the trf_number when
--                there is hierarchy limit and max number of lines limit exist.
-- 01/03/2003 Maggie
--              Log 18324
--              Changed the error_codes when the Inner_pk_id or the VPC_UPC
--              is being validated and it is invalid.
--              New codes are: 997, 998, 999
-- 02/21/2003 Maggie
--              Log 19367/16752
--              Added padding with zeroes up to 2 characters to the
--              trf_reason_code.
-- 04/09/2003 Maggie
--              Log id: 20660
--              Added new action_code "01" to create transfers in work status.
-- 05/20/2003 Maggie
--              Log id: 20913
--              Corrected the update of trf_qty_rec when receiving by products.
-- 08/05/03   Cannon 21317 Fixed to make it Oracle 9i compliant.
--                         Change current_date to jda_pmm_current_date.
-- 10/29/2003 Maggie
--                Log Id: 22235
--                Added code to handle the weight_to_qty products.
-- 11/18/2003 Maggie
--                Log Id: 22698
--                Corrected the error_code for the trf_qty_flag error.
--                New error_codes are 811 and 812.
-- 11/19/2003 Maggie
--                Log Id: 22721
--                Corrected the weight update.
-- 01/12/2003 Maggie
--                Log Id: 23013
--                Corrected the master product shipping.
-- 01/29/2004 Maggie
--                Log Id: 23125
--                Corrected the rollback logic.
-- 02/06/2004 Maggie
--                Log Id: 23181
--                Corrected the multiple prepack records calling
--                trfppkup.  (it should not reset var_prd_lvl_master for
--                each record within the cursor)
-- 03/05/2004 Maggie
--                Log Id: 23367
--                When checking the prd_lvl_number always select the inner_pk_tech_key
--                If an error is occured and we rollback all the previous
--                import records, added login to also rollback import records
--                after the error occured if the import records are for the
--                same action/origin/transfer/manifest/carton.
--                Set the error_code to 0 (zero) for all the other rolled back
--                records instead of using the same error_code as the error
--                code for the actual error record.
-- 03/24/2004 Maggie
--                Log Id: 23505
--                When no inner pack id is entered and required to be entered
--                zero out the var_inner_pk_tech_key so the product validation
--                will get the loose pack inner inner_pk_tech_key.
-- 03/25/2004 Maggie
--                Log Id: 23514
--                When creating a work status record do not load the
--                approval, pick and pick release dates.
--                Also corrected the passed in date into the shipping and
--                receiving procedures.
-- 06/28/2004 Maggie
--                Log Id: 23972
--                Corrected the error code of the invalid from location.
-- 06/29/2004 Maggie
--                Log Id: 23979
--                Corrected the code when adding new products at receiving time.
-- 10/11/2004 Maggie
--                Log Id: 24441 retrofit og log 24345
--                Corrected the code when the same product from different
--                different transfers being shipped in the same carton or manifest.
--                The trf_in_carton and the trf_in_manifest columns were not
--                updated correctly causing the transfer to stay in-process status.
-- 10/22/2004 Maggie
--                Log Id: 24465 Retrofit of Log Id: 24465
--                Corrected the code when checking for previously rejected
--                pick exception records.
-- 11/18/2004 Maggie
--                Log Id: 24628 Retrofit of log 24626
--                Changed the order sequence of cursor c1.
--                Corrected the manifest and carton breaks.
-- 02/11/2005 Maggie
--                Log Id: 25048    Retrofit of log: 25042
--                Corrected the receiving break when the same product is
--                received in two different transfers.
-- 03/04/2005 Maggie
--                Log Id: 25105    Retrofit of log 25073
--                Performance changes.
--                Modified hint to use PRDPCDEEI4 index instead of PRDPCDEEP1 index
-- 08/14/2005 fMuhlsteff
--              Log ID: 25276    Use a rtrim on pre_trf_reason_code in comparisons.
-- 08/24/2005 Maggie
--                Log Id: 25873    Retrofit of Log Id: 25582
--                Check for the additional transfer breaks when manifest or
--                carton shipping is done.
-- 08/31/2005 DWarnke
--              Log ID: 25886    Use a rtrim on pre_trf_source_id in comparisons.
-- 09/08/2005 DWarnke
--              Log ID: 25886    Retrofit of 25886
--                                 If the Ship from location is a DC, then inner_pack_id is required.
--                                 If the Ship from locations is a store, then use the
--                                 loose pack as the inner pack.
-- 09/13/2005 Maggie
--                Log ID: 25937     Retrofit of log 25918
--                                Corrected the code for the component receiving.
-- 09/20/2005 Maggie
--                Log Id: 25983    Retrofit of Log: 25968
--                Corrected the source id and reason code rtrim function usage.
--                 When validating the receiving record do not limit the receipt
--                quantity to be in inners if the trfdtlee entry method is inners.
-- 10/02/2005 Maggie
--                Log Id: 26035    Retrofit of Log Id: 26032
--                Corrected the validation of the trf_qty_flag when the action code
--                receiving.
-- 11/10/2005 Maggie
--                Log Id: 26262   Retrofit of Log Id: 26232
--                Use a rtrim on var_cross_dock_reason in comparisons.
-- 11/22/2005 Maggie
--                Log Id: 26320    Retrofit of Log Id: 26256
--                Allow zero shipped quantity on the carton and on the manifest
--                when the transfer already exists. (jda_origon = 'T')
-- 12/07/2005 Maggie
--              Log Id: 26397   Retrofit of Log Id: 26390
--              Call the trfpikexp procedure with in_process_luw = 'T' to
--              commit all the pick exception records.
--                Added code to only execute the C0 cursor when the passed in action
--                code is 'S'hipping, 'R'eceiving or 'A'll.
-- 02/01/2006 Maggie
--                Log iD: 26722     Retrofit of Log Id: 26716
--                Reset the previously saved columns when a record is rejected.
-- 02/17/2006 Maggie
--                Log Id: 26821       Retrofit of Log Id: 26814
--                Corrected the creation of the carton header table.
-- 03/31/2006 Maggie
--                Log Id: 27061     Retrofit of Log Id: 27057
--                When shipping a carton update the weight_to_qty_ind on trfdtlee and
--                trfctdee or trfmfpee to match the online function.
-- 04/04/2006 Maggie
--                Log Id: 27075      Retrofit of Log Id: 27070
--                Corrected the hints in the inner pack routine. (prdmstee/prdpcdee)
--                 Also included the retrofits for logs 26716/26814/27057
-- 04/11/2006 Maggie
--                Log Id: 27117      Retrofit of log id: 27110
--                Corrected the validation of the inner_pack_id. The transfer
--                can be by inner pack even when the shipping location is a store,
--                do not overwrite the passed in inner_pack_id with
--                the loose_inner_pack_id.
-- 05/02/2006 Maggie
--                 Log Id: 27195      Retrofit of Log Id: 27193
--                Corrected the break processing for the receiving records.
-- 05/15/2006 Maggie
--                Log Id: 27247      Retrofit of Log Id: 27236
--                Corrected the receiving processing when no inner pack id is
--                passed in and we need to get the existing inner_pk_tech_key from
--                the existing trfdtlee table.
-- 05/15/2006 KOng
--                 Log ID: 26953      Changed date format to YYYYMMDD by ref to
--                jdastdpk.DATE_FORMAT to be language independent.
-- 10/19/2006 Maggie
--                Log Id: 28086        Retrofit of Log Id: 28081
--                Changed procedure to prevent the rollback for the action_code '02'
--                record.
--                Also corrected the weight_to_qty_ind checking in the pick
--                exception validate routine.
-- 04/13/2007 Maggie
--                Log Id: 28555         Retrofit of Log Id: 28552
--                Corrected the shipper quantity when duplicate records
--                being shipped for an existing transfer.
-- 01/22/2007 Maggie
--                Log Id: 29702
--                Corrected the code when validating the 02 and 05(pick exception)
--                records and selecting the transfer detail records to also
--                use the inner pack id.
-- 09/29/2008 Pat G remove insert into TRGAUDEE
-- 05/14/2009 PE
--              Log # 31027 (RETRO 30664)
--              Performance changes
--             1) Modified c0 cursor to improve performance and call prclookup only
--             once instead calling every single record
--             2) To minimize the number of updates to TRFDTLEE and TRFHDREE table
--              by :1) creating work tables (GTT) TRFDTGWW and TRFHDGWW
--                  2) When called from TRFDTLIM procedure,
--                      a) a snapshot of the transfer header and all it details
--                      (if exists), currently being processed, will be taken
--                      in the work tables (TRFHDGWW and TRFDTGWW)
--                      b) All inserts/updates/reads will be done on the work
--                      tables (TRFHDGWW and TRFDTGWW)
--              3) Two new packages introduced (TRFHDRPKG and TRFDTLPKG) where all
--              the updates/inserts and selects on to the appropriate tables
--              TRFHDREE and TRFDTLEE (or) the image tables TRFHDGWW and TRFDTGWW
--              are done
-- 04/27/2009 KOng
--              Log # 30664 - comment out the dbms_output lines.f
--
-- 04/18/2008 Maggie
--                  Log Id: 30080        Retrofit of Log Id: 30054
--                  When shipping a shipper product from a store to a DC set
--                  the trf_set_ind to NULL, so we will handle its transactions
--                  as a regular sku.
--
-- 05/18/2009 Maggie
--              Log Id: 31042       Retrofit of Log Id: 31022
--              Allow carton receipt when the carton is inside a manifest.
-- 07/22/2009 Maggie
--              Log Id: 31275       Retrofit og Log Id: 31205
--              Corrected the code when processing pick exception records.
--              Log Id: 31275       Retrofit of Log Id: 31157
--              Corrected the code when creating/updating the work tables
--              created for the performance enhancement log.
-- 07/24/2009 Maggie
--              Log Id: 31275       Retrofit of Log Id: 31282
--              Corrected the code when creating/updating the work tables
--              created for the performance enhancement log.
-- 08/03/2009 Maggie
--              Log Id: 31275 TT 338993     Retrofit of Log Id: 31316
--              Additional performance changes, added trf_number to pass it to
--              the merge_trfdtlim_all procedure.
--              Added PRAGMA AUTONOMOUS_TRANSACTION when creating the
--              trfhdgww and trfdtgww tables so any rollback will not
--              effect these records.
-- 08/05/2009   Pat G Commented out insert into TRFAUDEE missed in retrofit
-- 11/30/2009   Pat G Retrofit
-- 01/15/2010 Maggie
--              Log Id: 372323
--              Corrected the pick exception work records for the weighted product.
-- ************************
-- 03/03/2010   Log Id: 374607      Retrofit the following 7.4 logs.
--
--              Log Id: 363122 - In Validate_04_by_prd
--              The inner pack id also required when the shipping location is a store.
--
--              Log Id: 372950
--              Do no call trfppkupd to create the components. The trfshpupd procedure
--              will do it. This is for the shipping issue.
--              For log id 372960:
--              Added prd_mst_number to the order_by clause to have the same
--              master products in the right sequence. Added additional checking
--              when the prd_mst-number is changing. This was for the receiving issue.
--              Also corrected the break_processing for the receiving record.
--
--              Log Id: 373129
--              Only override inner_pack_id with the loose pack inner pack id if
--              it was null;
--              Also corrected the code when checking for the last_break.
--
--              Log Id: 373205
--              Reverse the change made by log 372950 to call trfppkup procedure.
--              Added a variable to be passed to trfppkupd indicating that this
--              came from the import with jda_origin = False.
-- **************************
-- 03/09/2010   Log Id: 374552
--              Corrected the weight_to_qty_ind flag for weighted products.
--
--04/14/2010    Log ID - 376592 - Added exception handling to rollback and raise exception
--          further in copy_trf_to_work
-- 05/12/2010   Maggie      Log Id: 377868
--              Moved the trfhdgww/trfdtgee table Update/insert/delete statement into
--              a new proc to be inside a Pragma Autonomous transaction.
--              Replaced all SAVEPOINT with Commit Work;
--              Removed the trf_number when calling marge_trfdtlim_all procedure.
-- 05/18/2010   WILDGENJ RETROFITS APPLIED
-- 09/23/2010   pat G   added in_action = 'Z'
--07/12/2010 Pavan Log Id 689069
--              Corrected the code for transfer work status,when creating/updating the work tables
--07/07/2011 Savithri Devi P Log:710117
--                 Uncommented the code commented as part of log 363122
--11/09/2011 Karthik Pala Log 718226 :  Modified the code for rejecting all the set of records even
--                                      if one record is rejected in case of JDA_Origin = 'F'
--03/11/2013 Savithri P - LOg 788420 : Modified changes done for 718226, so that CHG/ALW
--                              are correctly calculated for jDA_ORIGIN='F'
-- Maggie       06/24/2013 Log Id: 794716 Variation case pack enhancement.
-------------------------------------------------------
-- Exceptions

EXP_VALIDATION_FAILED       EXCEPTION;
EXP_NEXT_RECORD                 EXCEPTION;

-- Constants
-- Ashok - Changed to upper case
MY_PROC_NAME                CONSTANT sqlerree.procedure_name%TYPE   := 'TRFDTLIM';
ACT_REQ                     CONSTANT sditrfdti.action_code%TYPE     := '00';
ACT_WORK                    CONSTANT sditrfdti.action_code%TYPE     := '01';
ACT_PICK                    CONSTANT sditrfdti.action_code%TYPE     := '02';
ACT_SHIP                    CONSTANT sditrfdti.action_code%TYPE     := '03';
ACT_RECV                    CONSTANT sditrfdti.action_code%TYPE     := '04';
ACT_TRFCOM                  CONSTANT sditrfdti.action_code%TYPE     := '05';
ACT_TRFCAN                  CONSTANT sditrfdti.action_code%TYPE     := '09';
SET_MASTER                  CONSTANT trfdtlee.trf_set_ind%TYPE      := 'M';
SET_COMPONENT               CONSTANT trfdtlee.trf_set_ind%TYPE      := 'C';
SET_SHIPPER                 CONSTANT trfdtlee.trf_set_ind%TYPE      := 'S';
SET_PART                    CONSTANT trfdtlee.trf_set_ind%TYPE      := 'P';
TYPE_MANIFEST               CONSTANT CHAR (1)                       := 'M';
TYPE_CARTON                 CONSTANT CHAR (1)                       := 'C';
TYPE_TRANSFER               CONSTANT CHAR (1)                       := 'T';
ERR_SNAPSHOT_TOO_OLD        CONSTANT PLS_INTEGER                    := -1555;
ERR_DEADLOCK_DETECTED       CONSTANT PLS_INTEGER                    := -60;

-- Variables
var_manifest_shipping          BOOLEAN;
var_manifest_receiving         BOOLEAN;
var_carton_shipping            BOOLEAN;
var_carton_receiving           BOOLEAN;
var_create_trf_header        BOOLEAN;
var_add_new_product            BOOLEAN;
var_add_new_ctd_product        BOOLEAN;
var_add_new_mfp_product        BOOLEAN;
var_cross_dock_transfer        BOOLEAN;
var_break_for_po            BOOLEAN;
var_reason_break              BOOLEAN;
var_source_break              BOOLEAN;
var_trf_manifest_key        trfmfhee.trf_manifest_key%TYPE;
var_trf_carton_key            trfcthee.trf_carton_key%TYPE;
var_trf_number              trfhdree.trf_number%TYPE;
var_prd_lvl_child            prdmstee.prd_lvl_child%TYPE;
var_prd_lvl_parent            prdmstee.prd_lvl_parent%TYPE;
var_prd_lvl_master            trfdtlee.prd_lvl_master%TYPE;
var_from_loc_child            orgmstee.org_lvl_child%TYPE;
var_to_loc_child            orgmstee.org_lvl_child%TYPE;
var_ent_prd_lvl_master         trfdtlee.prd_lvl_master%TYPE;
var_ent_master_inner_key    trfdtlee.master_inner_key%TYPE;
var_date_created            sditrfdti.date_created%TYPE;
var_prd_lvl_number          sditrfdti.prd_lvl_number%TYPE;
var_action_code             sditrfdti.action_code%TYPE;
var_jda_origin                 sditrfdti.jda_origin%TYPE;
var_expt_receipt_date        sditrfdti.expt_receipt_date%TYPE;
var_trf_aprov_req           trftypcd.trf_aprov_req%TYPE;
var_allow_multi_receipt           trftypcd.trf_aprov_req%TYPE;
var_apply_shipped            trftypcd.trf_aprov_req%TYPE;
var_cross_dock_reason       trftypcd.cross_dock_reason%TYPE;
var_trf_ship_mnfst             trftypcd.trf_ship_mnfst%TYPE;
var_trf_in_carton            trfdtlee.trf_in_carton%TYPE;
var_trf_in_manifest            trfdtlee.trf_in_manifest%TYPE;
var_trf_qty_ship            trfdtlee.trf_qty_ship%TYPE;
var_trf_qty_pick            trfdtlee.trf_qty_pick%TYPE;
var_trf_qty_cncl            trfdtlee.trf_qty_cncl%TYPE;
var_event_date                sditrfdti.date_created%TYPE;
var_trf_reason_code            sditrfdti.trf_reason_code%TYPE;
var_trf_detail_status        trfdtlee.trf_status%TYPE;
var_carton_detail_status    trfctdee.trf_carton_stat%TYPE;
var_trf_seq_id                trfctdee.trf_seq_id%TYPE;
save_trf_carton_key            trfcthee.trf_carton_key%TYPE;
var_org_lvl_number            sditrfdti.from_loc%TYPE;
var_org_lvl_child            orgmstee.org_lvl_child%TYPE;
var_entry_method            trfdtlee.entry_method%TYPE;

var_tdrc_tech_key           trfdrcee.tdrc_tech_key%TYPE;

var_trf_set_ind                trfdtlee.trf_set_ind%TYPE;
var_brk_on_ship                prdstmee.brk_on_ship%TYPE;

var_count                       PLS_INTEGER := 0;
var_transfer_type            PLS_INTEGER;
idx                         BINARY_INTEGER;
var_error_code                sditrfdti.error_code%TYPE;
var_mfc_flag                trfmfhee.trf_car_asn%TYPE;
var_mfp_flag                trfmfhee.trf_prd_asn%TYPE;

var_apply_asg_rule            trfctlee.apply_asg_rule%TYPE;
var_prd_add_imp                trfctlee.trf_prd_add_imp%TYPE;
var_max_nbr_of_lines        trfctlee.max_nbr_of_lines%TYPE;
var_limit_prd_lvl_id        trfctlee.limit_prd_lvl_id%TYPE;
var_prd_lvl_id                prdmstee.prd_lvl_id%TYPE;
var_prd_lvl1_child            prdmstee.prd_lvl_child%TYPE;

var_ship_curr_code             orgmstee.curr_code%TYPE;
var_rec_curr_code             orgmstee.curr_code%TYPE;
var_crd_lvl_child            orgmstee.org_lvl_child%TYPE;
var_curr_code               orgmstee.curr_code%TYPE;
var_trf_header_status          trfhdree.trf_status%TYPE;
var_trf_dtl_status            trfdtlee.trf_status%TYPE;
var_add_status                trfdtlee.trf_status%TYPE;
var_org_is_store_ship       orgmstee.org_is_store%TYPE;
var_org_is_store_rec        orgmstee.org_is_store%TYPE;
pre_trf_number                  sditrfdti.trf_number%TYPE;
pre_manifest_number            sditrfdti.mnfst_number%TYPE;
pre_carton_number            sditrfdti.carton_number%TYPE;
pre_prd_lvl_number            sditrfdti.prd_lvl_number%TYPE;
pre_action_code                sditrfdti.action_code%TYPE;
pre_jda_origin                sditrfdti.jda_origin%TYPE;
pre_carrier_name            sditrfdti.carrier_name%TYPE;
pre_cross_dock_loc            sditrfdti.cross_dock_loc%TYPE;
pre_from_loc                sditrfdti.from_loc%TYPE;
pre_to_loc                    sditrfdti.to_loc%TYPE;
pre_trf_manifest_key        trfmfhee.trf_manifest_key%TYPE;
pre_trf_carton_key            trfcthee.trf_carton_key%TYPE;
pre_pmg_po_number            sditrfdti.pmg_po_number%TYPE;
pre_inner_pk_tech_key       trfdtlee.inner_pk_tech_key%TYPE;
pre_trf_set_ind             trfdtlee.trf_set_ind%TYPE;
pre_set_trf_number            trfdtlee.trf_number%TYPE;
pre_trf_ipid_conv           trfdtlee.trf_ipid_conv%TYPE;
pre_trf_cp_conv             trfdtlee.trf_cp_conv%TYPE;
pre_inner_pack_id           prdpcdee.inner_pack_id%TYPE;
pre_vpc_prd_tech_key        vpcprdee.vpc_prd_tech_key%TYPE;
pre_prd_upc                 trfdtlee.prd_upc%TYPE;
pre_date_created            sditrfdti.date_created%TYPE;
pre_receipt_date            sditrfdti.receipt_date%TYPE;
var_manifest_detail_status    trfmfpee.trf_manifest_sts%TYPE;
var_manifest_header_status    trfmfhee.trf_manifest_sts%TYPE;
var_carton_header_status    trfcthee.trf_carton_stat%TYPE;
var_mfc_header_status        trfmfhee.trf_manifest_sts%TYPE;
var_total_shipped            trfdtlee.trf_qty_ship%TYPE;
var_qty_exception            trfdtlee.trf_qty_pick%TYPE;
save_vpc_prd_tech_key       vpcprdee.vpc_prd_tech_key%TYPE;
save_inner_pk_tech_key      prdpcdee.inner_pk_tech_key%TYPE;
save_inner_pack_id            prdpcdee.inner_pack_id%TYPE;
var_count_inner                PLS_INTEGER := 0;
save_prd_lvl_number         prdmstee.prd_lvl_number%TYPE;
save_prd_lvl_child          prdmstee.prd_lvl_child%TYPE;
save_case_pack_upc          prdupcee.case_pack_upc%TYPE;
save_entry_method           trfdtlee.entry_method%TYPE;
var_inner_pk_tech_key       trfdtlee.inner_pk_tech_key%TYPE;
var_vpc_prd_tech_key        vpcprdee.vpc_prd_tech_key%TYPE;
var_prd_upc                 trfdtlee.prd_upc%TYPE;
var_loose_pack_flag            prdpcdee.loose_pack_flag%TYPE; --25843
var_pack_lvl_parent            prdpcdee.pack_lvl_parent%TYPE; --25843
save_loose_prd_lvl_child    prdmstee.prd_lvl_child%TYPE;  --25843
var_loose_inner_pack_id        prdpcdee.inner_pack_id%TYPE; --25843
out_on_hand_sell_units         invavgee.on_hand_sell_units%TYPE;
out_on_hand_eaches                invavgee.on_hand_eaches%TYPE;
out_weight_per_sell_unit     invavgee.weight_per_sell_unit%TYPE;
out_weight_uom                invavgee.weight_uom%TYPE;
out_prd_sll_uom                prdmstee.prd_sll_uom%TYPE;
out_trf_ipid_conv            trfdtlee.trf_ipid_conv%TYPE;
out_trf_cp_conv                trfdtlee.trf_cp_conv%TYPE;
out_trf_weight_ship         trfctdee.trf_weight_ship%TYPE;
out_trf_weight_ship_uom     trfctdee.trf_weight_ship_uom%TYPE;
out_weight_to_qty_ind        trfdtlee.weight_to_qty_ind%TYPE; -- 22235
pre_trf_in_carton              trfdtlee.trf_in_carton%TYPE;
pre_trf_in_manifest            trfdtlee.trf_in_manifest%TYPE;
pre_trf_in_transfer            trfdtlee.trf_qty_ship%TYPE;
rec_trf_set_ind             trfdtlee.trf_set_ind%TYPE;
pre_tot_quantity            trfdtlee.trf_qty_ship%TYPE;
pre_trf_reason_code            trfhdree.trf_prior_id%TYPE;
pre_prd_lvl_master             trfdtlee.prd_lvl_master%TYPE;
pre_trf_source_id           trfhdree.trf_source_id%TYPE;

var_qty_req_inners          trfdtlee.qty_req_inners%TYPE; -- 22235
var_qty_pick_inners         trfdtlee.qty_pick_inners%TYPE; -- 22235
var_in_manifest_inners         trfdtlee.in_manifest_inners%TYPE; -- 22235
var_qty_ship_inners         trfdtlee.qty_ship_inners%TYPE;  -- 22235
var_in_carton_inners         trfdtlee.in_carton_inners%TYPE; -- 22235
var_convert_weight            trfdtlee.trf_weight_ship%TYPE;  -- 22235
var_qty_rec_inners            trfdtlee.qty_rec_inners%TYPE;    -- 22235
var_qty_exception_inners    trfpikww.qty_exception_inners%TYPE;    -- 22235
var_trf_qty_exception        trfpikww.trf_qty_exception%TYPE;   -- 22235
var_total_shipped_inners    trfdtlee.qty_ship_inners%TYPE;
var_trf_weight_ship         sditrfdti.trf_weight%TYPE;    -- 22721
var_trf_weight_ship_uom     sditrfdti.trf_weight_uom%TYPE; -- 22721
var_carton_weight_ship         sditrfdti.trf_weight%TYPE; -- 22721
var_carton_weight_ship_uom     sditrfdti.trf_weight_uom%TYPE;  -- 22721
var_mft_weight_ship         sditrfdti.trf_weight%TYPE;  -- 22721
var_mft_weight_ship_uom     sditrfdti.trf_weight_uom%TYPE;  -- 22721
pre_trf_wgt_ship_uom        trfdtlee.trf_wgt_ship_uom%TYPE;  -- 22721
var_conv_weight                sditrfdti.trf_weight%TYPE;   -- 22271
var_comp_trf_number            trfdtlee.trf_number%TYPE; -- 23367
var_exception_occured       BOOLEAN;                    -- 31282
-- 23367
var_rejected                 BOOLEAN;
var_rej_action_code         sditrfdti.action_code%TYPE;
var_rej_jda_origin            sditrfdti.jda_origin%TYPE;
var_rej_trf_number             sditrfdti.trf_number%TYPE;
var_rej_manifest_number     sditrfdti.mnfst_number%TYPE;
var_rej_carton_number         sditrfdti.carton_number%TYPE;
var_rej_from_loc            sditrfdti.from_loc%TYPE;
var_rej_to_loc                sditrfdti.to_loc%TYPE;
-- 23367

-- 373129
last_action_code            sditrfdti.action_code%TYPE;
last_jda_origin             sditrfdti.jda_origin%TYPE;
last_from_loc               sditrfdti.from_loc%TYPE;
last_to_loc                 sditrfdti.to_loc%TYPE;
last_manifest_number        sditrfdti.mnfst_number%TYPE;
last_carton_number          sditrfdti.carton_number%TYPE;
last_trf_number             sditrfdti.trf_number%TYPE;
var_add_to_request          sditrfdti.jda_origin%TYPE;

-- 26256
var_create_carton_detail    NCHAR;
var_create_manifest_detail    NCHAR;

var_trf_carton_seq             trfctdee.trf_seq_id%TYPE;
var_trf_manifest_seq           trfmfpee.trf_seq_id%TYPE;
var_pik_sequence            trfpikww.sequence_num%TYPE;

var_trf_type_id                trfhdree.trf_type_id%TYPE;
var_trf_lead_days            trflddee.trf_lead_days%TYPE;
var_trf_cor_tech_key        trfcoree.trf_cor_tech_key%TYPE;
var_default_car_id            trfcaree.trf_car_id%TYPE;
var_trf_car_id                trfcaree.trf_car_id%TYPE;
var_idx                        BINARY_INTEGER;
var_rowid_idx                PLS_INTEGER := 0;
param_prd_child             prdmstee.prd_lvl_child%TYPE;

var_any_trfpik_row            BOOLEAN;
var_trf_ship_loc            trfhdree.trf_ship_loc%TYPE;
var_trf_rec_loc                trfhdree.trf_rec_loc%TYPE;

var_trans_session            invtrnee.trans_session%TYPE;
var_trans_user              invtrhee.trans_user%TYPE;

var_rowid_trf                ROWID;
var_rowid_ctd                ROWID;
var_rowid_mfp                ROWID;

--begin retrofit
 -- New variable added For Meijer Modification 013.01
var_ship_loc_cost       trfdtlee.MIR_SHP_LOC_COST%TYPE;
var_rec_loc_cost        trfdtlee.mir_rec_loc_cost%TYPE;
var_mir_ship_ext_cost   sditrfdti.mir_ship_ext_cost%TYPE;
var_mir_rec_ext_cost    sditrfdti.mir_rec_ext_cost%TYPE;
--end retrofit
-- Arrays

-- to save the org numbers when inserting into the prctmpww and csttmpww tables
TYPE                         typ_arr_org IS TABLE OF orgmstee.org_lvl_child%TYPE
INDEX                        BY BINARY_INTEGER;
arr_org                       typ_arr_org;

-- to save the transfer numbers based on the hierarchy and number of lines per transfer limit
TYPE                         typ_rec_ship IS RECORD
(
arr_trf_number                trfdtlee.trf_number%TYPE,
arr_prd_lvl_parent            trfdtlee.prd_lvl_master%TYPE,
arr_limit_lines                trfdtlee.trf_qty_req%TYPE
);
TYPE                        typ_arr_ship IS TABLE OF typ_rec_ship
INDEX                         BY BINARY_INTEGER;
arr_ship                    typ_arr_ship;

-- to save the rowid from sditrfdti to be able to rollback the entire transfer/carton/manifest
TYPE                        typ_rowid    IS TABLE OF ROWID
INDEX                        BY BINARY_INTEGER;

arr_rowid                    typ_rowid;

-- 306664
pre_orig_trf_number                  sditrfdti.trf_number%TYPE;

-- Cursors
CURSOR    C0 IS
SELECT    /*+
        ORDERED
        USE_NL(PRDMSTEE)
        INDEX(SDITRFDTI SDITRFDTIP1)
        INDEX(PRDMSTEE PRDMSTEEP1)
        INDEX(PRDPCDEE PRDPCDEEI4)
        */
        DISTINCT
        sditrfdti.from_loc,
        sditrfdti.to_loc,
        prdmstee.prd_lvl_child,
        TRUNC(sditrfdti.date_created) date_created,
        TRUNC(sditrfdti.receipt_date) receipt_date,
        sditrfdti.action_code,
        prdpcdee.inner_pk_tech_key
FROM    sditrfdti, prdpcdee, prdmstee
WHERE     sditrfdti.session_number = in_session_number
AND       sditrfdti.error_code IS NULL
AND        sditrfdti.download_date_1 IS NULL
AND     sditrfdti.inner_pack_id IS NOT NULL
AND     sditrfdti.action_code IN (ACT_SHIP,ACT_RECV)
AND     sditrfdti.action_code = DECODE(in_action,'S',ACT_SHIP,
               'R',ACT_RECV,sditrfdti.action_code)
AND     prdpcdee.inner_pack_id = sditrfdti.inner_pack_id
AND     prdmstee.prd_lvl_child = prdpcdee.prd_lvl_child
AND     prdmstee.prd_lvl_id < 2
AND     prdmstee.prd_style_ind = 'F'
UNION
SELECT  /*+
        ORDERED
        USE_NL(PRDMSTEE)
        INDEX(SDITRFDTI SDITRFDTIP1)
        INDEX(PRDMSTEE PRDMSTEEI2)
        INDEX(PRDPCDEE PRDPCDEEI2)
        */
        DISTINCT
        sditrfdti.from_loc,
        sditrfdti.to_loc,
        prdmstee.prd_lvl_child,
        TRUNC(sditrfdti.date_created) date_created,
        TRUNC(sditrfdti.receipt_date) receipt_date,
        sditrfdti.action_code,
        prdpcdee.inner_pk_tech_key
FROM    sditrfdti, prdmstee, prdpcdee
WHERE   sditrfdti.session_number = in_session_number
AND     sditrfdti.error_code IS NULL
AND     sditrfdti.download_date_1 IS NULL
AND     sditrfdti.inner_pack_id IS  NULL
AND     sditrfdti.prd_lvl_number IS NOT NULL
AND     sditrfdti.action_code IN (ACT_SHIP,ACT_RECV)
AND     sditrfdti.action_code = DECODE(in_action,'S',ACT_SHIP,
               'R',ACT_RECV,sditrfdti.action_code)
AND     prdmstee.prd_lvl_number = sditrfdti.prd_lvl_number
AND     prdmstee.prd_lvl_id < 2
AND     prdmstee.prd_style_ind = 'F'
AND     prdpcdee.prd_lvl_child = prdmstee.prd_lvl_child
AND     (prdpcdee.loose_pack_flag = 'T'
     OR (NVL(prdpcdee.loose_pack_flag,'F') <> 'T'
     AND prdpcdee.pack_lvl_parent IS NOT NULL
      )
      );

CURSOR     C1 IS
SELECT     /*+ INDEX(SDITRFDTI SDITRFDTIP1) */
        session_number,
        tech_key,
        trf_number,
        carrier_name,
          mnfst_number,
        carton_number,
        prd_lvl_number,
        prd_mst_number,
          jda_origin,
        trf_type_code,
        lpad(TO_NUMBER(trf_reason_code),2,'0') trf_reason_code,
        from_loc,
        to_loc,
          quantity,
        action_code,
        TRUNC(receipt_date) receipt_date,
        REFERENCE,
        TRUNC(date_created) date_created,
          no_processed,
        download_date_1,
        download_date_2,
        notes,
          trf_track_num,
        trf_carton_wgt,
        error_code,
        tdrc_code,
          trf_discrepancy_ref,
        prd_upc,
        requested_by,
          expt_receipt_date,
        cross_dock_loc,
        pmg_po_number,
        inner_pack_id,
        trf_qty_flag,
        trf_weight_uom,
        trf_weight,
        trf_source_id,
        --begin retrofit
        mir_ship_ext_cost, --013.01
		      mir_rec_ext_cost,  --013.01
        --end retrofit
        ROWID
FROM    sditrfdti
WHERE     session_number = in_session_number
AND        error_code IS NULL
AND     sditrfdti.download_date_1 IS NULL
AND     (
        (action_code = '00') AND (in_action = 'T')
        OR (action_code = '02') AND (in_action = 'P')
        OR (action_code = '03') AND (in_action = 'S')
        OR (action_code = '04') AND (in_action = 'R')
        OR (action_code = '05') AND (in_action = 'C')
        OR (action_code = '09') AND (in_action = 'N')
        OR (action_code = '01') AND (in_action = 'W')
        OR (action_code IN ('00', '01', '02', '03', '04', '05', '09'))
        AND (in_action = 'A')
        )
ORDER BY
        action_code,
          NVL(from_loc,0),
          NVL(to_loc,0),
        NVL(mnfst_number,0),
          NVL(carton_number,0),
          NVL(trf_number,0),
          NVL(jda_origin, 'F'),     -- 24628
        trf_reason_code,
        NVL(trf_source_id,0),
        NVL(prd_mst_number,0),      -- 372590
        NVL(prd_lvl_number,0),
        NVL(inner_pack_id,0),
        NVL(prd_upc,0),
        NVL(pmg_po_number,0);

CURSOR     C3 IS
SELECT     /*+ ORDERED USE_NL(PRDSTDEE)
            INDEX(PRDSTMEE PRDSTMEEP1)
            INDEX(PRDSTDEE PRDSTDEEP1)
        */
        prdstdee.prd_lvl_child, prdpcdee.inner_pk_tech_key
FROM    prdstmee, prdstdee, prdpcdee
WHERE    prdstmee.prd_lvl_child = param_prd_child
AND        prdstdee.set_prd_lvl_child = prdstmee.prd_lvl_child
AND        (
        (prdstmee.set_type IN ('PREPCK','SPREPK')
AND        (prdstmee.brk_on_ship = 'T' OR prdstmee.brk_on_rcv = 'T'))
OR      (prdstmee.set_type = 'SHIPR')
        )
AND     prdpcdee.prd_lvl_child = prdstdee.prd_lvl_child
AND     (loose_pack_flag = 'T'
         OR (NVL(loose_pack_flag,'F') <> 'T'
              AND pack_lvl_parent IS NOT NULL
              AND prdpcdee.inv_units_per_inner = 1     -- 794716
              AND prdpcdee.sll_units_per_inner = 1     -- 794716
            )
        );

CURSOR     C4 IS
SELECT     /*+ INDEX(TRFMFCEE TRFMFCEEP1) */
    trf_carton_key
FROM    trfmfcee
WHERE      trf_manifest_key = var_trf_manifest_key;

CURSOR     C5 IS
SELECT     /*+ INDEX(TRFDTLEE TRFDTLEEP1) */
    prd_lvl_child,
    trf_qty_ship,
    trf_in_carton,
    trf_in_manifest,
    trf_qty_pick,
    trf_qty_cncl,
    entry_method,
    trf_ipid_conv,
    trf_cp_conv,
    inner_pk_tech_key,
    qty_pick_inners,
    in_carton_inners,
    in_manifest_inners,
    qty_ship_inners
FROM    trfdtlee
WHERE     trf_number = var_trf_number
AND    (trf_set_ind IS NULL OR trf_set_ind in (SET_MASTER, SET_SHIPPER))
AND    trf_status IN (1, 2, 3, 4, 6, 7);

-- Log 30664 need to get all the transfers for the manifest and carton
CURSOR     C6 IS
SELECT trfhdree.trf_number
  FROM trfmfpee, trfhdree
 WHERE trfmfpee.trf_manifest_key = var_trf_manifest_key
   AND trfhdree.trf_number = trfmfpee.trf_number
UNION
SELECT trfhdree.trf_number
  FROM trfmfcee, trfctdee, trfhdree
 WHERE trfmfcee.trf_manifest_key = var_trf_manifest_key
   AND trfctdee.trf_carton_key = trfmfcee.trf_carton_key
   AND trfhdree.trf_number = trfctdee.trf_number
UNION
 SELECT hdr.trf_number
  FROM trfmfpee, trfhdgww hdr
 WHERE trfmfpee.trf_manifest_key = var_trf_manifest_key
   AND hdr.trf_number = trfmfpee.trf_number
   AND trfdtlpkg.gv_batch_flag = 'Y'
UNION
SELECT hdr.trf_number
  FROM trfmfcee, trfctdee, trfhdgww hdr
 WHERE trfmfcee.trf_manifest_key = var_trf_manifest_key
   AND trfctdee.trf_carton_key = trfmfcee.trf_carton_key
   AND hdr.trf_number = trfctdee.trf_number
   AND trfdtlpkg.gv_batch_flag = 'Y'
;

CURSOR     C7 IS
SELECT distinct trfctdee.trf_number
FROM   trfctdee
WHERE  trfctdee.trf_carton_key = var_trf_carton_key;

-- end cursors declaration

-- Record Declaration
dti_rec                    C1%ROWTYPE;


-- ------------------------------------------------------------------------
-- ------------------------------------------------------------------------
PROCEDURE get_from_loc_child
IS
BEGIN
    BEGIN
    SELECT     /*+ INDEX(ORGMSTEE ORGMSTEEI4) */
            orgmstee.org_lvl_child, org_is_store
    INTO    var_from_loc_child, var_org_is_store_ship
    FROM    orgmstee
    WHERE     org_lvl_number = dti_rec.from_loc
    AND       org_lvl_id = 1;

    EXCEPTION
    WHEN NO_DATA_FOUND OR TOO_MANY_ROWS THEN
        var_error_code := 3;
    END;

END get_from_loc_child;
-- ------------------------------------------------------------------------
-- ------------------------------------------------------------------------
PROCEDURE get_to_loc_child
IS
BEGIN
    BEGIN
    SELECT     /*+
        ORDERED
        USE_NL(ORGDTLEE)
        INDEX(ORGMSTEE ORGMSTEEI4)
        INDEX (ORGDTLEE ORGDTLEEP1)
        */
            orgmstee.org_lvl_child, org_is_store
    INTO    var_to_loc_child, var_org_is_store_rec
    FROM    orgmstee, orgdtlee
    WHERE     org_lvl_number = dti_rec.to_loc
    AND       org_lvl_id = 1
    AND       orgdtlee.org_lvl_child = orgmstee.org_lvl_child
    AND      (orgdtlee.org_date_closed IS NULL OR orgdtlee.org_date_closed >
            NVL(var_date_created,trfdefpk.jda_pmm_current_date));
    EXCEPTION
    WHEN NO_DATA_FOUND OR TOO_MANY_ROWS THEN
            var_error_code := 4;
    END;

END get_to_loc_child;
-- ------------------------------------------------------------------------
PROCEDURE get_loose_inner
IS
BEGIN
    BEGIN
        SELECT /*+
           ORDERED
           USE_NL(PRDPCDEE)
           INDEX(PRDPCDEE PRDPCDEEI2)
           INDEX(PRDMSTEE PRDMSTEEP1)
           */
                inner_pack_id, prd_lvl_number, inner_pk_tech_key
        INTO    var_loose_inner_pack_id, save_prd_lvl_number, save_inner_pk_tech_key
        FROM    prdmstee, prdpcdee
        WHERE     prdmstee.prd_lvl_child = save_loose_prd_lvl_child
        AND     prdpcdee.prd_lvl_child = prdmstee.prd_lvl_child
        AND     prdpcdee.loose_pack_flag = 'T';
    EXCEPTION WHEN NO_DATA_FOUND OR TOO_MANY_ROWS THEN
        BEGIN
            SELECT /*+
                    ORDERED
                    USE_NL(PRDPCDEE)
                    INDEX(PRDPCDEE PRDPCDEEI2)
                    INDEX(PRDMSTEE PRDMSTEEP1)
                    */
                    inner_pack_id, prd_lvl_number, inner_pk_tech_key
            INTO     var_loose_inner_pack_id, save_prd_lvl_number, save_inner_pk_tech_key
            FROM     prdmstee, prdpcdee
            WHERE     prdmstee.prd_lvl_child = save_loose_prd_lvl_child
            AND     prdpcdee.prd_lvl_child = prdmstee.prd_lvl_child
            AND     (prdpcdee.pack_lvl_parent IS NOT NULL
            AND     prdpcdee.inv_units_per_inner = 1       -- 794716
            AND     prdpcdee.sll_units_per_inner = 1);     -- 794716

        EXCEPTION WHEN NO_DATA_FOUND OR TOO_MANY_ROWS THEN
                var_error_code := 5;
        END;
    END;
END get_loose_inner;
-- ------------------------------------------------------------------------
PROCEDURE get_inner_pk_key
IS
BEGIN
    BEGIN
        -- 25843 Added variables
        SELECT /*+
           ORDERED
           USE_NL(PRDMSTEE)
           INDEX(PRDPCDEE PRDPCDEEI4)
           INDEX(PRDMSTEE PRDMSTEEP1)
           */
                inner_pk_tech_key, prdmstee.prd_lvl_number,
                prdpcdee.loose_pack_flag, prdpcdee.pack_lvl_parent,
                prdpcdee.prd_lvl_child
        INTO    save_inner_pk_tech_key, save_prd_lvl_number,
                var_loose_pack_flag, var_pack_lvl_parent,
                save_loose_prd_lvl_child
        FROM    prdpcdee, prdmstee
        WHERE   prdpcdee.inner_pack_id = dti_rec.inner_pack_id
        AND     prdmstee.prd_lvl_child = prdpcdee.prd_lvl_child;
    EXCEPTION WHEN NO_DATA_FOUND OR TOO_MANY_ROWS THEN
        var_error_code := 998;
    END;

END get_inner_pk_key;
-- ------------------------------------------------------------------------
PROCEDURE get_vpc_upc
IS
BEGIN
    BEGIN
        SELECT /*+ INDEX(PRDUPCEE PRDUPCEEP1) */
                prdupcee.prd_lvl_child, prdmstee.prd_lvl_number, case_pack_upc
        INTO    save_prd_lvl_child, save_prd_lvl_number, save_case_pack_upc
        FROM    prdupcee, prdmstee
        WHERE   prdupcee.prd_upc = dti_rec.prd_upc
        AND     prdmstee.prd_lvl_child = prdupcee.prd_lvl_child;
        var_entry_method := 4;
        IF save_case_pack_upc = 'T' THEN
            BEGIN
                SELECT /*+ INDEX(VPCUPCEE VPCUPCEEP1) */
                        vpcupcee.vpc_prd_tech_key, vpcprdee.inner_pk_tech_key,
                        prdmstee.prd_lvl_number, prdpcdee.inner_pack_id
                INTO    save_vpc_prd_tech_key, save_inner_pk_tech_key,
                        save_prd_lvl_number, save_inner_pack_id
                FROM    vpcupcee, vpcprdee, prdmstee, prdpcdee
                WHERE   vpcupcee.prd_upc = dti_rec.prd_upc
                AND     vpcprdee.vpc_prd_tech_key = vpcupcee.vpc_prd_tech_key
                AND     prdmstee.prd_lvl_child = vpcprdee.prd_lvl_child
                AND        prdpcdee.inner_pk_tech_key = vpcprdee.inner_pk_tech_key;
                var_entry_method := 5;
            EXCEPTION WHEN NO_DATA_FOUND OR TOO_MANY_ROWS THEN
                var_error_code := 997;
            END;
        END IF;
    EXCEPTION WHEN NO_DATA_FOUND OR TOO_MANY_ROWS THEN
        var_error_code := 997;
    END;
END get_vpc_upc;
-- ------------------------------------------------------------------------
PROCEDURE get_prd_lvl_child
IS
BEGIN

    BEGIN
       SELECT     /*+ INDEX(PRDMSTEE PRDMSTEEI2) */
            prd_lvl_child, prd_lvl_id, prd_lvl_parent
    INTO     var_prd_lvl_child, var_prd_lvl_id, var_prd_lvl_parent
    FROM     prdmstee
    WHERE     prd_lvl_number = dti_rec.prd_lvl_number
    AND     prd_lvl_id < 2
    AND     prd_style_ind = 'F';

-- Ashok
    IF var_prd_lvl_id = 0 THEN
        var_prd_lvl1_child := var_prd_lvl_parent;
    ELSE
        var_prd_lvl1_child := var_prd_lvl_child;
    END IF;

    var_prd_lvl_parent := 0;

    IF var_inner_pk_tech_key = 0 THEN
        BEGIN
            SELECT inner_pk_tech_key, inner_pack_id
            INTO var_inner_pk_tech_key, var_loose_inner_pack_id
            FROM prdpcdee
            WHERE prd_lvl_child = var_prd_lvl_child
            AND loose_pack_flag = 'T';
        EXCEPTION WHEN NO_DATA_FOUND OR TOO_MANY_ROWS THEN
            BEGIN
                SELECT inner_pk_tech_key, inner_pack_id
                INTO var_inner_pk_tech_key, var_loose_inner_pack_id
                FROM prdpcdee
                WHERE prd_lvl_child = var_prd_lvl_child
                AND (pack_lvl_parent IS NOT NULL
                    AND inv_units_per_inner = 1       -- 794716
                    AND sll_units_per_inner = 1);     -- 794716
            EXCEPTION WHEN NO_DATA_FOUND OR TOO_MANY_ROWS THEN
                var_error_code := 5;
            END;
        END;
       END IF;

    -- loading the trf_number and product array only needed for the shipping records
    IF var_action_code IN ('01','03') AND var_jda_origin = 'F' THEN

        IF var_limit_prd_lvl_id IS NOT NULL THEN
              BEGIN
                SELECT     /*+ INDEX(PRDPLVEE PRDPLVEEC4) */
                        prd_lvl_parent
                   INTO     var_prd_lvl_parent
                   FROM     prdplvee
                  WHERE     prdplvee.prd_lvl_child = var_prd_lvl1_child
                  AND     prdplvee.prd_parent_id = (var_limit_prd_lvl_id - 1);
                IF NOT arr_ship.EXISTS (var_prd_lvl_parent) THEN
                    arr_ship(var_prd_lvl_parent).arr_prd_lvl_parent :=
                                            var_prd_lvl_parent;
                    arr_ship(var_prd_lvl_parent).arr_limit_lines := 0;
                    arr_ship(var_prd_lvl_parent).arr_trf_number := 0;
                END IF;

              EXCEPTION
                  WHEN NO_DATA_FOUND THEN
                      var_prd_lvl_parent := 0;
              END;
        END IF;

         IF var_prd_lvl_parent = 0 THEN
             IF NOT arr_ship.EXISTS (var_prd_lvl_parent) THEN
                   arr_ship(var_prd_lvl_parent).arr_prd_lvl_parent := 0;
                arr_ship(var_prd_lvl_parent).arr_limit_lines := 0;
                arr_ship(var_prd_lvl_parent).arr_trf_number := 0;
            ELSE
                IF arr_ship(var_prd_lvl_parent).arr_trf_number IS NULL THEN
                    arr_ship(var_prd_lvl_parent).arr_prd_lvl_parent := 0;
                    arr_ship(var_prd_lvl_parent).arr_limit_lines := 0;
                    arr_ship(var_prd_lvl_parent).arr_trf_number := 0;
                END IF;
            END IF;
        END IF;
    END IF;

    var_trf_set_ind := NULL;
    var_brk_on_ship := NULL;
    var_prd_lvl_master := 0;

    -- Check if product is Pre-pack or a Style Pre-pack
    BEGIN
        SELECT     /*+ INDEX(PRDSTMEE PRDSTMEEP1) */
                brk_on_ship
        INTO      var_brk_on_ship
        FROM      prdstmee
        WHERE     prd_lvl_child = var_prd_lvl_child
        AND       set_type IN ('PREPCK', 'SPREPK');

        IF var_brk_on_ship = 'T' THEN
            var_trf_set_ind := SET_MASTER;
            var_prd_lvl_master := var_prd_lvl_child;
        END IF;

    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            var_count := 0;
            SELECT     /*+ INDEX(PRDSTMEE PRDSTMEEP1) */
                    count(*)
            INTO      var_count
            FROM      prdstmee
            WHERE     prd_lvl_child = var_prd_lvl_child
            AND       set_type IN ('SHIPR');

            IF var_count > 0 THEN
                var_trf_set_ind := SET_SHIPPER;
                var_prd_lvl_master := var_prd_lvl_child;
            END IF;
-- reset the shipper flag if the transfer is DC to DC
            IF var_org_is_store_ship = 'F'
                AND var_org_is_store_rec = 'F'
                AND var_trf_set_ind = SET_SHIPPER THEN
                    var_trf_set_ind := NULL;
                    var_prd_lvl_master := 0;
            END IF;
-- 30054 reset the shipper flag if the transfer is store to DC
            IF var_org_is_store_ship = 'T'
                AND var_org_is_store_rec = 'F'
                AND var_trf_set_ind = SET_SHIPPER THEN
                    var_trf_set_ind := NULL;
                    var_prd_lvl_master := 0;
            END IF;
    END;

    -- If receiving, check if the master number has been entered
    IF var_action_code = '04' THEN
        -- if the entered product is not a master it can be sku or component
        -- check if there was a master number entered pointing the
        -- component product to a master.
        IF var_trf_set_ind IS NULL  -- 25918
            OR  var_trf_set_ind NOT IN (SET_MASTER, SET_SHIPPER) THEN
            IF dti_rec.prd_mst_number IS NOT NULL THEN
                BEGIN
                SELECT     /*+ INDEX (PRDMSTEE PRDMSTEEI2) */
                    prd_lvl_child
                INTO      var_ent_prd_lvl_master
                FROM      prdmstee
                WHERE     prd_lvl_number = dti_rec.prd_mst_number
                AND       prd_lvl_id IN (0, 1)
                AND       prd_style_ind = 'F';

                var_count := 0;

                SELECT     /*+ INDEX (PRDSTDEE PRDSTDEEP1) */
                    1
                INTO     var_count
                FROM      prdstdee
                WHERE     set_prd_lvl_child = var_ent_prd_lvl_master
                AND       prd_lvl_child = var_prd_lvl_child
                AND     ROWNUM = 1;

                IF var_count = 0 THEN
                    var_error_code := 5;
                END IF;

                 EXCEPTION
                WHEN NO_DATA_FOUND OR TOO_MANY_ROWS THEN
                    var_error_code := 5;
                END;
            END IF;
        END IF;
    END IF;

    EXCEPTION
          WHEN NO_DATA_FOUND OR TOO_MANY_ROWS THEN
            var_error_code := 5;
      END;

END get_prd_lvl_child;
-- ------------------------------------------------------------------------
-- Added PRAGMA AUTONOMOUS_TRANSACTION  -- 377868
PROCEDURE clear_trf_work
IS
PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
-- 377868   DELETE TRFHDGWW WHERE trf_number <> NVL(dti_rec.trf_number,-1);           -- 31316
--    DELETE TRFDTGWW WHERE trf_number <> NVL(dti_rec.trf_number,-1);           -- 31316
--    dbms_output.put_line ('inside '||'clear_trf_work '||dti_rec.trf_number);
--    COMMIT WORK;

--    DELETE FROM TRFHDGWW;
--    DELETE FROM TRFDTGWW;
EXECUTE IMMEDIATE 'truncate table trfhdgww';
EXECUTE IMMEDIATE 'truncate table trfdtgww';

--    COMMIT WORK;
--    dbms_output.put_line ('inside '||'clear_trf_work '||dti_rec.trf_number);
END clear_trf_work;
-- ------------------------------------------------------------------------
-- Log id - 30664
-- Copy the transfer header and all its transfer details into the image tables
-- All processing when called from the TRFDTLIM will be on the image tables
-- ------------------------------------------------------------------------
PROCEDURE copy_trf_to_work
IS
PRAGMA AUTONOMOUS_TRANSACTION;              -- 31316
BEGIN
    -- Copy transfer header into work
  BEGIN       -- 31205
    INSERT INTO trfhdgww
    (
    trf_number, trf_ship_loc, trf_rec_loc, trf_entry_date,
    trf_aprov_date, trf_ship_date, trf_rec_date,
    trf_pick_date, trf_rls_pick_date, trf_type_id,
    trf_prior_id, trf_car_id, trf_status, trf_ref_number,
    trf_ship_mnfst, trf_source_id, trf_mnfst_notes,
    trf_notes, trf_close_date, requested_by,
    expt_receipt_date, received_by, crd_lvl_child,
    pmg_po_number, trf_shipment_product, tot_chg_effect,
    tot_alw_effect, alw_chg_flag, chg_alw_process,
    tot_chg_lump_sum, tot_alw_lump_sum, hdr_rowid
    )
    SELECT  /*+ INDEX(TRFHDREE TRFHDREEP1) */
            trf_number, trf_ship_loc, trf_rec_loc, trf_entry_date,
            trf_aprov_date, trf_ship_date, trf_rec_date,
            trf_pick_date, trf_rls_pick_date, trf_type_id,
            trf_prior_id, trf_car_id, trf_status, trf_ref_number,
            trf_ship_mnfst, trf_source_id, trf_mnfst_notes,
            trf_notes, trf_close_date, requested_by,
            expt_receipt_date, received_by, crd_lvl_child,
            pmg_po_number, trf_shipment_product, tot_chg_effect,
            tot_alw_effect, alw_chg_flag, chg_alw_process,
            tot_chg_lump_sum, tot_alw_lump_sum, ROWID
    FROM    trfhdree
    WHERE   trf_number = dti_rec.trf_number;

--30664    dbms_output.put_line (' Insert HDG 0 :' || dti_rec.trf_number);
    -- if header is copied, then copy the details
    IF SQL%ROWCOUNT > 0 THEN
        -- Copy all the details for the transfer number to the image table
        INSERT INTO trfdtgww
        (
        trf_number, prd_lvl_child, prd_lvl_master, trf_shp_loc,
        trf_rec_loc, trf_qty_req, trf_qty_alloc, trf_qty_ship,
        trf_qty_rec, trf_rec_to_date, trf_qty_cncl,
        trf_rcn_carton, trf_rcn_manifest, trf_unit_cost,
        trf_unit_rtl_out, trf_unit_rtl_in, trf_qty_pick,
        trf_ref_number, trf_in_carton, trf_source_id,
        trf_in_manifest, trf_shp_carton, trf_shp_manifest,
        trf_rec_carton, trf_rec_manifest, trf_rec_ctn_to_dat,
        trf_rec_mft_to_dat, trf_status, trf_type_id,
        trf_close_date, trf_ship_date, trf_pick_date,
        trf_rec_date, trf_rcn_id, inv_mrpt_code, inv_drpt_code,
        trf_set_ind, set_dtl_qty, trf_rtv_assign, trf_alloc_cost,
        tdrc_tech_key, trf_discrepancy_ref, trf_alloc_rtl,
        trf_rcn_transfer, prd_upc, inner_pk_tech_key,
        tot_chg_effect, tot_alw_effect, alw_chg_flag,
        chg_alw_process, entry_method, vpc_prd_tech_key,
        trf_ipid_conv, trf_cp_conv, on_hand_sell_units,
        on_hand_eaches, weight_per_sell_unit, weight_uom,
        prd_sll_uom, trf_wgt_ship_uom, trf_alloc_cost_ship,
        trf_alloc_rtl_ship, trf_weight_ship, trf_wgt_rec_uom,
        trf_weight_rec, master_inner_key, tot_chg_lump_sum,
        tot_alw_lump_sum, qty_req_inners, qty_alloc_inners,
        qty_pick_inners, qty_ship_inners, qty_rec_inners,
        rec_to_date_inners, rcn_carton_inners, rcn_manifest_inners,
        in_carton_inners, in_manifest_inners, shp_carton_inners,
        shp_manifest_inners, rec_carton_inners,
        rec_manifest_inners, rec_ctn_todate_inners,
        rec_mft_todate_inners, rcn_transfer_inners,
        weight_to_qty_ind, trfdtl_rowid, update_row,
        MIR_SHP_LOC_COST,
        MIR_REC_LOC_COST
            -- above is retrofit  Added 04/21/2009 WILDGEN
        )
        SELECT  /*+ INDEX(TRFDTLEE TRFDTLEEP1) */
                trf_number, prd_lvl_child, prd_lvl_master, trf_shp_loc,
                trf_rec_loc, trf_qty_req, trf_qty_alloc, trf_qty_ship,
                trf_qty_rec, trf_rec_to_date, trf_qty_cncl,
                trf_rcn_carton, trf_rcn_manifest, trf_unit_cost,
                trf_unit_rtl_out, trf_unit_rtl_in, trf_qty_pick,
                trf_ref_number, trf_in_carton, trf_source_id,
                trf_in_manifest, trf_shp_carton, trf_shp_manifest,
                trf_rec_carton, trf_rec_manifest, trf_rec_ctn_to_dat,
                trf_rec_mft_to_dat, trf_status, trf_type_id,
                trf_close_date, trf_ship_date, trf_pick_date,
                trf_rec_date, trf_rcn_id, inv_mrpt_code, inv_drpt_code,
                trf_set_ind, set_dtl_qty, trf_rtv_assign, trf_alloc_cost,
                tdrc_tech_key, trf_discrepancy_ref, trf_alloc_rtl,
                trf_rcn_transfer, prd_upc, inner_pk_tech_key,
                tot_chg_effect, tot_alw_effect, alw_chg_flag,
                chg_alw_process, entry_method, vpc_prd_tech_key,
                trf_ipid_conv, trf_cp_conv, on_hand_sell_units,
                on_hand_eaches, weight_per_sell_unit, weight_uom,
                prd_sll_uom, trf_wgt_ship_uom, trf_alloc_cost_ship,
                trf_alloc_rtl_ship, trf_weight_ship, trf_wgt_rec_uom,
                trf_weight_rec, master_inner_key, tot_chg_lump_sum,
                tot_alw_lump_sum, qty_req_inners, qty_alloc_inners,
                qty_pick_inners, qty_ship_inners, qty_rec_inners,
                rec_to_date_inners, rcn_carton_inners, rcn_manifest_inners,
                in_carton_inners, in_manifest_inners, shp_carton_inners,
                shp_manifest_inners, rec_carton_inners,
                rec_manifest_inners, rec_ctn_todate_inners,
                rec_mft_todate_inners, rcn_transfer_inners,
                weight_to_qty_ind, ROWID, 'F',
                var_ship_loc_cost,  --013.01
	        var_rec_loc_cost   --013.01
                -- above is retrofit  Added 04/21/2009 WILDGEN
        FROM    trfdtlee
        WHERE   trf_number = dti_rec.trf_number;
--        dbms_output.put_line ('inside '||'copy_trf_to_work '||dti_rec.trf_number);
--        dbms_output.put_line (' trfdtgww insert was done'||dti_rec.trf_number);
    END IF;
-- 31205
  EXCEPTION WHEN dup_val_on_index THEN
--        dbms_output.put_line (' trfdtgww insert was NOT done'||dti_rec.trf_number);
    NULL;
    WHEN OTHERS THEN
        ROLLBACK WORK;
        clear_trf_work;    -- 377868
        RAISE;
  END;

COMMIT WORK;
---
END copy_trf_to_work;
-- ------------------------------------------------------------------------
PROCEDURE copy_trf_from_work
IS
BEGIN
    -- update/insert Headers

--    trfhdrpkg.merge_trfdtlim_all(dti_rec.trf_number);       -- 31316
    trfhdrpkg.merge_trfdtlim_all; -- (-1);       -- 377868
        -- Details may be updated/inserted

--    trfdtlpkg.merge_trfdtlim_all(dti_rec.trf_number);       -- 31316
    trfdtlpkg.merge_trfdtlim_all; -- (-1);       -- 377868

--    dbms_output.put_line ('inside '||'copy work to transfer '||dti_rec.trf_number);

END copy_trf_from_work;
-- ------------------------------------------------------------------------
-- Moved the insert into a PRAGMA AUTONOMOUS_TRANSACTION  377868
PROCEDURE create_trfhdgww_03_false
IS
PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
    BEGIN
        INSERT INTO trfhdgww
            (
            trf_number,
            trf_ship_loc,
            trf_rec_loc,
            trf_entry_date,
            trf_type_id,
            trf_prior_id,
            trf_car_id,
            trf_status,
            trf_ref_number,
            trf_source_id,
            trf_ship_mnfst,
            trf_notes,
            requested_by,
            expt_receipt_date,
            crd_lvl_child,
            pmg_po_number
            )
        VALUES
            (
            var_trf_number,
            var_from_loc_child,
            var_to_loc_child,
            var_date_created,
            var_trf_type_id,
            dti_rec.trf_reason_code,
            var_trf_car_id,
            0,
            dti_rec.reference,
            dti_rec.trf_source_id,
            var_trf_ship_mnfst,
            dti_rec.notes,
            dti_rec.requested_by,
            var_expt_receipt_date,
            var_crd_lvl_child,
            dti_rec.pmg_po_number
            );
    EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        NULL;
    WHEN OTHERS THEN
        ROLLBACK WORK;
        clear_trf_work;
        RAISE;
  END;

COMMIT WORK;

END create_trfhdgww_03_false;
-- -----------------------------------------------------------------------
-- Moved the insert into a PRAGMA AUTONOMOUS_TRANSACTION
PROCEDURE create_trfdtgww_03_false
IS
PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
    BEGIN
         INSERT INTO trfdtgww
            (
            trf_number,
            prd_lvl_child,
            prd_lvl_master,
            trf_shp_loc,
            trf_rec_loc,
            trf_qty_req,
            trf_qty_pick,
            trf_qty_ship,
            trf_in_carton,
            trf_in_manifest,
            trf_status,
            trf_ref_number,
            trf_source_id,
            trf_type_id,
            trf_set_ind,
            prd_upc,
            inner_pk_tech_key,
            master_inner_key,
            entry_method,
            on_hand_sell_units,
            on_hand_eaches,
            weight_per_sell_unit,
            weight_uom,
            prd_sll_uom,
            trf_ipid_conv,
            trf_cp_conv,
            trf_weight_ship,
            trf_wgt_ship_uom,
            --begin retrofit (04/21/2009 - WILDGEN Added)
            mir_shp_loc_cost,  --013.01
	    mir_rec_loc_cost,  --013.01
            --end retrofit
            qty_req_inners,   -- 22235
            qty_pick_inners,  -- 22235
            qty_ship_inners,  -- 22235
            in_carton_inners,  -- 22235
            in_manifest_inners,  -- 22235
            weight_to_qty_ind
            )
            VALUES
            (
            var_trf_number,
            var_prd_lvl_child,
            0,
            var_from_loc_child,
            var_to_loc_child,
            dti_rec.quantity,
            dti_rec.quantity,
            var_trf_qty_ship,
            var_trf_in_carton,
            var_trf_in_manifest,
            0,
            dti_rec.reference,
            dti_rec.trf_source_id,
            var_trf_type_id,
            var_trf_set_ind,
            dti_rec.prd_upc,
            var_inner_pk_tech_key,
            0,
            var_entry_method,
            out_on_hand_sell_units,
            out_on_hand_eaches,
            out_weight_per_sell_unit,
            out_weight_uom,
            out_prd_sll_uom,
            out_trf_ipid_conv,
            out_trf_cp_conv,
            var_trf_weight_ship,
            var_trf_weight_ship_uom,
            --begin retrofit (04/21/2009 - WILDGEN Added)
            var_ship_loc_cost,  --013.01
	    var_rec_loc_cost,   --013.01
            -- end retrofit
            var_qty_req_inners,  -- 22235
            var_qty_pick_inners,  -- 22235
            var_qty_ship_inners,  -- 22235
            var_in_carton_inners,  -- 22235
            var_in_manifest_inners,  -- 22235
            out_weight_to_qty_ind
            );
--                dbms_output.put_line ('inside '||'create_trfdtgww_03_false '||var_trf_number);
    EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
        IF NVL(var_trf_weight_ship,0) > 0 THEN
            -- Log ID:30664 Change, Following Select is replaced to read from TRFDTGWW
            SELECT trf_wgt_ship_uom
            INTO   pre_trf_wgt_ship_uom
            FROM   trfdtgww
            WHERE     trf_number = var_trf_number
            AND     prd_lvl_child = var_prd_lvl_child
            AND     prd_lvl_master = 0
               AND     inner_pk_tech_key = var_inner_pk_tech_key
               AND     master_inner_key = 0;
            IF pre_trf_wgt_ship_uom IS NOT NULL THEN
                IF pre_trf_wgt_ship_uom <> var_trf_weight_ship_uom THEN
                    var_conv_weight :=  pmmuompk.convert_weight_uom(
                        var_trf_weight_ship, var_trf_weight_ship_uom,
                            pre_trf_wgt_ship_uom);
                    var_trf_weight_ship := var_conv_weight;
                    var_trf_weight_ship_uom := pre_trf_wgt_ship_uom;
                END IF;
            END IF;
        END IF;

        -- Ashok - Added Hints
        -- Log ID:30664 Change, Following Update is replaced to write to TRFDTGWW
        UPDATE     /*+ INDEX(TRFDTGWW TRFDTGWWP1) */
            trfdtgww
        SET    trf_qty_req = NVL(trf_qty_req,0.0) + dti_rec.quantity,
            trf_qty_pick = NVL(trf_qty_pick,0.0) + dti_rec.quantity,
            trf_qty_ship = NVL(trf_qty_ship,0.0) + var_trf_qty_ship,
            trf_in_carton = NVL(trf_in_carton,0.0) + var_trf_in_carton,
            trf_in_manifest = NVL(trf_in_manifest,0.0) + var_trf_in_manifest,
            qty_req_inners = NVL(qty_req_inners,0.0) + var_qty_req_inners,  -- 22235
            qty_pick_inners = NVL(qty_pick_inners,0.0) + var_qty_pick_inners,  -- 22235
            qty_ship_inners = NVL(qty_ship_inners,0.0) + var_qty_ship_inners,  -- 22235
            in_carton_inners = NVL(in_carton_inners,0.0) + var_in_carton_inners,  -- 22235
            in_manifest_inners = NVL(in_manifest_inners,0.0) + var_in_manifest_inners, -- 22235
            trf_weight_ship = NVL(trf_weight_ship,0.0) + NVL(var_trf_weight_ship,0.0),
            trf_wgt_ship_uom = var_trf_weight_ship_uom,
            update_row = 'T'
         WHERE     trf_number = var_trf_number
        AND     prd_lvl_child = var_prd_lvl_child
        AND     prd_lvl_master = 0
        AND     inner_pk_tech_key = var_inner_pk_tech_key
        AND     master_inner_key = 0;
--                dbms_output.put_line ('inside '||'create_trfdtgww_03_false update '||var_trf_number);
    WHEN OTHERS THEN
        ROLLBACK WORK;
        clear_trf_work;
        RAISE;
  END;

COMMIT WORK;

END create_trfdtgww_03_false;
-- ------------------------------------------------------------------------
PROCEDURE update_trfdtgww
IS
PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
  BEGIN
    UPDATE     /*+ ROWID(TRFDTGWW) */
        trfdtgww
    SET    trf_qty_ship = NVL(trf_qty_ship,0) + var_trf_qty_ship,
        trf_weight_ship = NVL(trf_weight_ship,0.0) + NVL(var_trf_weight_ship,0),
        trf_wgt_ship_uom = var_trf_weight_ship_uom,
        trf_in_carton = NVL(trf_in_carton,0) + var_trf_in_carton,
        trf_in_manifest = NVL(trf_in_manifest,0) + var_trf_in_manifest,
        qty_ship_inners = NVL(qty_ship_inners,0.0) + var_qty_ship_inners,  -- 22235
        in_manifest_inners = NVL(in_manifest_inners,0.0) +
                                var_in_manifest_inners,                -- 22235
        in_carton_inners = NVL(in_carton_inners,0.0) +
                                var_in_carton_inners,                -- 22235
        weight_to_qty_ind = out_weight_to_qty_ind,            -- 27057
        update_row = 'T'                    -- 31157
    WHERE     ROWID = var_ROWID_trf;
--    dbms_output.put_line ('inside '||'update_trfdtgww ');
    EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK WORK;
        RAISE;
  END;
COMMIT WORK;

END update_trfdtgww;
-- ------------------------------
-- --------------------------------
-- 377868
PROCEDURE update_receiving_trfdtgww
IS
PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
    BEGIN
        UPDATE     /*+ ROWID(TRFDTGWW) */
                trfdtgww
        SET     trf_qty_rec = NVL(trf_qty_rec,0) + dti_rec.quantity,
                tdrc_tech_key = var_tdrc_tech_key,
                trf_discrepancy_ref = dti_rec.trf_discrepancy_ref,
                trf_weight_rec = NVL(trf_weight_rec,0) + dti_rec.trf_weight,
                trf_wgt_rec_uom = dti_rec.trf_weight_uom,
                   qty_rec_inners = NVL(qty_rec_inners,0.0) +
                   var_qty_rec_inners,
                   update_row = 'T'            -- 31157
        WHERE     ROWID = var_rowid_trf;
    EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK WORK;
        RAISE;
  END;

COMMIT WORK;

END update_receiving_trfdtgww;
-- ----------------------------------------------
-- 377868
PROCEDURE update_mani_rec_trfdtgww
IS
PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
    BEGIN
                UPDATE     trfdtgww
                SET     trf_qty_rec = NVL(trf_qty_rec,0) + dti_rec.quantity,
                        tdrc_tech_key = var_tdrc_tech_key,
                        trf_discrepancy_ref = dti_rec.trf_discrepancy_ref,
                        trf_weight_rec = NVL(trf_weight_rec,0) + dti_rec.trf_weight,
                        trf_wgt_rec_uom = dti_rec.trf_weight_uom,
                        qty_rec_inners = NVL(qty_rec_inners,0.0) +
                        var_qty_rec_inners,
                        update_row = 'T'            -- 31157
                WHERE     trf_number = var_trf_number
                AND     prd_lvl_child = var_prd_lvl_child
                AND     prd_lvl_master = 0
                AND     inner_pk_tech_key = var_inner_pk_tech_key
                AND     master_inner_key = 0;
    EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK WORK;
        RAISE;
  END;

COMMIT WORK;

END update_mani_rec_trfdtgww;
-- -------------------------------------------
-- 377868
PROCEDURE update_trfhdgww_notes
IS
PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
    BEGIN
                UPDATE     /*+ INDEX(TRFHDGWW TRFHDGWWP1) */
                    trfhdgww
                SET     trf_notes = NVL(trf_notes, '') || NVL(dti_rec.notes, '')
                WHERE     trf_number = dti_rec.trf_number;
    EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK WORK;
        RAISE;
  END;

COMMIT WORK;

END update_trfhdgww_notes;
-- -------------------------------------------
-- 377868
PROCEDURE update_trf_rcv_trfdtgww
IS
PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
    BEGIN
        UPDATE     /*+ INDEX(TRFDTGWW TRFDTGWWP1) */
            trfdtgww
        SET     trf_qty_rec = trf_qty_ship,
                trf_weight_rec = trf_weight_ship,
                trf_wgt_rec_uom = trf_wgt_ship_uom,
                qty_rec_inners = qty_ship_inners,
                update_row = 'T'            -- 31157
        WHERE     trf_number = var_trf_number
        AND     (trf_set_ind IS NULL OR trf_set_ind = 'C' OR trf_set_ind = 'S')
        AND     trf_status = 4
        AND     trf_qty_rec IS NULL;
    EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK WORK;
        RAISE;
  END;

COMMIT WORK;
END update_trf_rcv_trfdtgww;
-- -------------------------------------------
-- 377868
PROCEDURE update_trf_rcv_zero_trfdtgww
IS
PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
    BEGIN
        UPDATE     /*+ INDEX(TRFDTGWW TRFDTGWWP1) */
            trfdtgww
        SET     trf_qty_rec = 0,
                trf_weight_rec = 0,
                trf_wgt_rec_uom = trf_wgt_ship_uom,
                qty_rec_inners = 0,
                update_row = 'T'            -- 31157
        WHERE    trf_number = var_trf_number
        AND     (trf_set_ind IS NULL OR trf_set_ind = 'C' OR trf_set_ind = 'S')
        AND     trf_status = 4
        AND     trf_qty_rec IS NULL;
    EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK WORK;
        RAISE;
  END;

COMMIT WORK;
END update_trf_rcv_zero_trfdtgww;
-- -------------------------------------------
-- ------------------------------------------------------------------------
PROCEDURE validate_00
IS
BEGIN

    var_error_code := 0;

    IF dti_rec.date_created IS NULL THEN
        var_error_code := 147;
        RAISE EXP_VALIDATION_FAILED;
    END IF;

    IF dti_rec.to_loc IS NULL THEN
        var_error_code := 4;
        RAISE EXP_VALIDATION_FAILED;
    ELSE
        IF pre_to_loc IS NULL
        OR pre_to_loc <> dti_rec.to_loc THEN

            var_error_code := 0;
            var_date_created := dti_rec.date_created;

            get_to_loc_child;

            IF var_error_code > 0 THEN
                 RAISE EXP_VALIDATION_FAILED;
            END IF;

        END IF;
    END IF;

    IF NVL(dti_rec.quantity,0.0) <= 0.0 THEN
        var_error_code := 6;
        RAISE EXP_VALIDATION_FAILED;
    END IF;
    var_entry_method := 1;
    IF dti_rec.inner_pack_id IS NOT NULL THEN
        var_entry_method := 3;
        var_error_code := 0;
        IF pre_inner_pack_id IS NULL OR
            pre_inner_pack_id <> dti_rec.inner_pack_id THEN
            get_inner_pk_key;
            IF var_error_code > 0 THEN
                RAISE EXP_VALIDATION_FAILED;
            END IF;
        END IF;
        dti_rec.prd_lvl_number := save_prd_lvl_number;
        var_inner_pk_tech_key := save_inner_pk_tech_key;
    ELSE
        var_inner_pk_tech_key := 0;
    END IF;
    IF dti_rec.inner_pack_id IS NULL THEN
        IF dti_rec.prd_upc IS NOT NULL THEN
            var_error_code := 0;
            IF pre_prd_upc IS NULL OR dti_rec.prd_upc <> pre_prd_upc THEN
                get_vpc_upc;
                IF var_error_code > 0 THEN
                    RAISE EXP_VALIDATION_FAILED;
                END IF;
            END IF;
            IF var_entry_method = 5 THEN
                var_inner_pk_tech_key := save_inner_pk_tech_key;
                dti_rec.inner_pack_id := save_inner_pack_id;
            ELSE
                var_inner_pk_tech_key := 0;
            END IF;
                dti_rec.prd_lvl_number := save_prd_lvl_number;
        END IF;
    END IF;
    IF dti_rec.prd_lvl_number IS NULL THEN
        var_error_code := 5;
        RAISE EXP_VALIDATION_FAILED;
     ELSE
        IF pre_prd_lvl_number IS NULL
        OR pre_prd_lvl_number <> dti_rec.prd_lvl_number THEN
            var_error_code := 0;
            get_prd_lvl_child;
            IF var_error_code > 0 THEN
                   RAISE EXP_VALIDATION_FAILED;
            END IF;
        END IF;
    END IF;
    bastkey ('trf_cor_tech_key', 0, var_trf_cor_tech_key, 'F');
    -- Ashok - Create Oracle Sequence TRF_COR_TECH_KEY

    INSERT INTO trfcoree
        (
        trf_cor_tech_key,
        trf_rec_loc,
        prd_lvl_child,
        trf_order_date,
        trf_co_status,
        trf_fill_date,
        trf_co_quantity,
        trf_ref_number,
  --begin retrofit
        mir_rec_loc_cost   --013.01
  --end retrofit
        )
        VALUES
        (
        var_trf_cor_tech_key,
        var_to_loc_child,
        var_prd_lvl_child,
        dti_rec.date_created,
        0,
        NULL,
        dti_rec.quantity,
        NULL,
  --  begin retrofit
        var_rec_loc_cost
  --  end retrofit
		);

        -- Reset Save Point and Initialize Array
-- 377868        SAVEPOINT SAVE_THIS;
        COMMIT WORK;
        arr_rowid.DELETE;
        var_rowid_idx := 0;
       pre_prd_upc := dti_rec.prd_upc;
    pre_inner_pack_id := dti_rec.inner_pack_id;

END validate_00;
-- ------------------------------------------------------------------------
-- ------------------------------------------------------------------------
PROCEDURE validate_02
IS
BEGIN

    var_error_code := 0;

    IF dti_rec.date_created IS NULL THEN
        var_error_code := 147;
        RAISE EXP_VALIDATION_FAILED;
    END IF;

    IF dti_rec.trf_number IS NULL THEN
        var_error_code := 1;
        RAISE EXP_VALIDATION_FAILED;
    END IF;

    IF pre_trf_number IS NULL OR pre_trf_number <> dti_rec.trf_number THEN
        BEGIN
        -- Ashok - Added Hints

        -- Log ID:30664 Change, Following select is replaced to read from TRFHDGWW
        SELECT    /*+ INDEX(HDR TRFHDGWWP1) */
            trf_number,
            trf_ship_loc,
            trf_rec_loc,
            trf_status
        INTO    var_trf_number,
            var_trf_ship_loc,
            var_trf_rec_loc,
            var_trf_header_status
        FROM     trfhdgww hdr
        WHERE     trf_number = dti_rec.trf_number;

        /*
        trfhdrpkg.grec_trfhdr := null ;
        trfhdrpkg.grec_trfhdr.trf_number := dti_rec.trf_number;

        trfhdrpkg_bala.select_trfdtlim_1;

        var_trf_number := trfhdrpkg.grec_trfhdr.trf_number;
        var_trf_ship_loc := trfhdrpkg.grec_trfhdr.trf_ship_loc;
        var_trf_rec_loc := trfhdrpkg.grec_trfhdr.trf_rec_loc;
        var_trf_header_status := trfhdrpkg.grec_trfhdr.trf_header_status;
        */

        EXCEPTION WHEN NO_DATA_FOUND THEN
            var_error_code := 1;
            RAISE EXP_VALIDATION_FAILED;
        END;

        -- check the status before any updates
        IF var_trf_header_status IN (0, 5) THEN
            var_error_code := 209;
            RAISE EXP_VALIDATION_FAILED;
        END IF;
    ELSE
        -- check the status of the header even if there are no new transfer
        -- number to reject the additional products for the same transfer number
        IF var_trf_header_status IN (0, 5) THEN
            var_error_code := 209;
            RAISE EXP_VALIDATION_FAILED;
        END IF;
    END IF;
    var_entry_method := 1;
    IF dti_rec.inner_pack_id IS NOT NULL THEN
        var_entry_method := 3;
        var_error_code := 0;
        IF pre_inner_pack_id IS NULL OR
            pre_inner_pack_id <> dti_rec.inner_pack_id THEN
            get_inner_pk_key;
            IF var_error_code > 0 THEN
                RAISE EXP_VALIDATION_FAILED;
            END IF;
        END IF;
        dti_rec.prd_lvl_number := save_prd_lvl_number;
        var_inner_pk_tech_key := save_inner_pk_tech_key;
    ELSE
        var_inner_pk_tech_key := 0;        --23505
    END IF;
    IF dti_rec.inner_pack_id IS NULL THEN
        IF dti_rec.prd_upc IS NOT NULL THEN
            var_error_code := 0;
            IF pre_prd_upc IS NULL OR
                dti_rec.prd_upc <> pre_prd_upc THEN
                get_vpc_upc;
                IF var_error_code > 0 THEN
                    RAISE EXP_VALIDATION_FAILED;
                END IF;
            END IF;
            IF var_entry_method = 5 THEN
                var_inner_pk_tech_key := save_inner_pk_tech_key;
                dti_rec.inner_pack_id := save_inner_pack_id;
            ELSE
                var_inner_pk_tech_key := 0;
            END IF;
            dti_rec.prd_lvl_number := save_prd_lvl_number;
        END IF;
    END IF;

    IF dti_rec.prd_lvl_number IS NULL THEN
        var_error_code := 5;
        RAISE EXP_VALIDATION_FAILED;
     ELSE
        IF pre_prd_lvl_number IS NULL OR pre_prd_lvl_number <> dti_rec.prd_lvl_number THEN
            var_error_code := 0;
            var_prd_lvl_number := dti_rec.prd_lvl_number;
            var_action_code := dti_rec.action_code;
            var_jda_origin := dti_rec.jda_origin;
            get_prd_lvl_child;
            IF var_error_code > 0 THEN
                   RAISE EXP_VALIDATION_FAILED;
            END IF;
        END IF;
    END IF;

    IF NVL(dti_rec.quantity,0.0) = 0.0 THEN
        var_error_code := 6;
        RAISE EXP_VALIDATION_FAILED;
    END IF;

    IF (pre_trf_number IS NULL OR pre_trf_number <> dti_rec.trf_number)
       OR
       (pre_prd_lvl_number IS NULL OR pre_prd_lvl_number <> dti_rec.prd_lvl_number)
       OR
         (pre_inner_pack_id IS NULL OR pre_inner_pack_id <> dti_rec.inner_pack_id) THEN            -- 29702
        BEGIN
            -- Log ID:30664 Change, Following select is replaced to read from TRFDTGWW
              SELECT     /*+ INDEX(DTL TRFDTGWWP1) */
                       trf_status, entry_method, trf_ipid_conv, trf_cp_conv,
                       weight_to_qty_ind
               INTO     var_trf_dtl_status, var_entry_method,
                    out_trf_ipid_conv, out_trf_cp_conv,
                    out_weight_to_qty_ind
               FROM     trfdtgww dtl
               WHERE     trf_number = dti_rec.trf_number
               AND     prd_lvl_child = var_prd_lvl_child
            AND     inner_pk_tech_key = var_inner_pk_tech_key
               AND     prd_lvl_master = 0
            AND     master_inner_key = 0;

        IF var_trf_dtl_status IN (0, 5) THEN
                   var_error_code := 200;
                   RAISE EXP_VALIDATION_FAILED;
               END IF;

        EXCEPTION
        WHEN NO_DATA_FOUND THEN
                   var_error_code := 207;
                   RAISE EXP_VALIDATION_FAILED;
             END;
    ELSE
        IF var_trf_dtl_status IN (0, 5) THEN
                 var_error_code := 200;
                 RAISE EXP_VALIDATION_FAILED;
             END IF;
    END IF;
-- reworked the pick exception quantity for the weighted product -- 372323

    IF dti_rec.trf_qty_flag = 'P' THEN
          var_qty_exception_inners := dti_rec.quantity;
        var_trf_qty_exception := dti_rec.quantity * out_trf_ipid_conv;
    ELSE
        IF dti_rec.trf_qty_flag = 'C' THEN
            var_qty_exception_inners := dti_rec.quantity * out_trf_cp_conv;
            var_trf_qty_exception := dti_rec.quantity
                                     * out_trf_ipid_conv * out_trf_cp_conv;
        ELSE
            var_trf_qty_exception := dti_rec.quantity;
            var_qty_exception_inners := dti_rec.quantity;
         END IF;
    END IF;

    IF NVL(out_weight_to_qty_ind,'F') = 'T' THEN
        IF dti_rec.trf_qty_flag IN ('P', 'C') THEN -- import record is by innerpack
            IF dti_rec.trf_weight IS NOT NULL THEN
                IF dti_rec.trf_weight_uom IS NOT NULL THEN
                    IF dti_rec.trf_weight_uom <> out_prd_sll_uom THEN
                        var_convert_weight :=
                        pmmuompk.convert_weight_uom (dti_rec.trf_weight,
                                             dti_rec.trf_weight_uom,
                                             out_prd_sll_uom);
                        dti_rec.quantity := var_convert_weight;
                        var_trf_qty_exception := dti_rec.quantity;
                    ELSE
                        dti_rec.quantity := dti_rec.trf_weight;
                        var_trf_qty_exception := dti_rec.quantity;
                    END IF;
                ELSE -- weight is given, but no weight uom is given
                    dti_rec.quantity := dti_rec.trf_weight;
                    var_trf_qty_exception := dti_rec.quantity;
                    dti_rec.trf_weight_uom := out_prd_sll_uom;
                END IF;
            END IF;
          END IF;
    END IF;
-- 372323 end

    -- Ashok - Add session_number in TRFPIKWWI2 index.
    UPDATE    /*+ INDEX(TRFPIKWW TRFPIKWWI2) */
            trfpikww
    SET     trf_qty_exception = NVL(trf_qty_exception,0.0)
                              + var_trf_qty_exception,
            qty_exception_inners = NVL(qty_exception_inners,0.0)  -- 22235
                              + var_qty_exception_inners
    WHERE     trf_number = dti_rec.trf_number
    AND     session_number = var_trans_session
    AND     prd_lvl_child = var_prd_lvl_child
    AND     inner_pk_tech_key = var_inner_pk_tech_key;

    IF SQL%NOTFOUND THEN
        var_pik_sequence := var_pik_sequence + 1;

          BEGIN
            INSERT INTO trfpikww
            (
            session_number,
            sequence_num,
               trf_process_flag,
            trf_ship_loc,
            trf_rec_loc,
               trf_number,
            prd_lvl_child,
               trf_qty_exception,
            trf_date_created,
            inner_pk_tech_key,
            entry_method,
            trf_ipid_conv,
            trf_cp_conv,
            master_inner_key,
            qty_exception_inners
            )
            VALUES
            (
            var_trans_session,
            var_pik_sequence,
               'T',
            var_trf_ship_loc,
            var_trf_rec_loc,
               dti_rec.trf_number,
            var_prd_lvl_child,
               var_trf_qty_exception,
            dti_rec.date_created,
            var_inner_pk_tech_key,
            var_entry_method,
            out_trf_ipid_conv,
            out_trf_cp_conv,
            0,
            var_qty_exception_inners
            );

            var_any_trfpik_row := TRUE;
        EXCEPTION
            WHEN DUP_VAL_ON_INDEX THEN
                NULL;
          END;
    END IF;

    -- Reset Save Point and Initialize Array
-- 377868        SAVEPOINT SAVE_THIS;
        COMMIT WORK;
    arr_rowid.DELETE;
    var_rowid_idx := 0;
       pre_prd_upc := dti_rec.prd_upc;
    pre_inner_pack_id := dti_rec.inner_pack_id;

END validate_02;
-- ------------------------------------------------------------------------
-- ------------------------------------------------------------------------
PROCEDURE create_comp
IS
BEGIN
-- 373205 pass a new variable to trfppkup indicating if the transfer request qty could be updated
    var_add_to_request := 'F';
    IF pre_jda_origin = 'F' THEN
        var_add_to_request := 'T';
    END IF;
-- 373205 end

-- the previous product was a master product, call trfppkupd to create the components
    IF NVL(pre_trf_in_carton,0) > 0 THEN
        var_transfer_type := 2;
               trfppkupd
            (var_trans_session, var_trans_user,
             pre_set_trf_number, pre_prd_lvl_master,
             pre_trf_in_carton, 'S', pre_trf_carton_key,
             var_transfer_type, var_trf_carton_seq,
             pre_inner_pk_tech_key, pre_inner_pk_tech_key,
             pre_trf_set_ind, pre_trf_set_ind, pre_trf_ipid_conv,
             pre_trf_cp_conv, pre_trf_ipid_conv, pre_trf_cp_conv,
             --begin retrofit
--             'F', 0, pre_prd_lvl_master, NULL, 'F', var_add_to_request);
             'F', 0, pre_prd_lvl_master, NULL, 'F', var_add_to_request, var_mir_ship_ext_cost); --013.01
             --end retrofit

        SELECT     /*+ INDEX(TRFCTDEE TRFCTDEEP1) */
                    MAX(trf_seq_id)
                INTO     var_trf_carton_seq
                FROM     trfctdee
                WHERE     trf_carton_key = pre_trf_carton_key;

        IF var_trf_carton_seq IS NULL THEN
            var_trf_carton_seq := 0;
        END IF;

    ELSIF NVL(pre_trf_in_manifest,0) > 0 THEN
        var_transfer_type := 3;
            trfppkupd
            (
             var_trans_session, var_trans_user, pre_set_trf_number,
             pre_prd_lvl_master, pre_trf_in_manifest, 'S',
             pre_trf_manifest_key, var_transfer_type,
             var_trf_manifest_seq,
             pre_inner_pk_tech_key, pre_inner_pk_tech_key,
             pre_trf_set_ind, pre_trf_set_ind, pre_trf_ipid_conv,
             pre_trf_cp_conv, pre_trf_ipid_conv, pre_trf_cp_conv,
             'F', 0, pre_prd_lvl_master, NULL, 'F', var_add_to_request);
        SELECT     /*+ INDEX(TRFMFPEE TRFMFPEEP1) */
                    MAX (trf_seq_id)
                INTO     var_trf_manifest_seq
                FROM     trfmfpee
                WHERE     trf_manifest_key = pre_trf_manifest_key;

        IF var_trf_manifest_seq IS NULL THEN
            var_trf_manifest_seq := 0;
        END IF;

    ELSIF NVL(pre_trf_in_transfer,0) > 0 THEN
        var_add_to_request := 'F';
        var_transfer_type := 1;
        trfppkupd
                (
                var_trans_session, var_trans_user, pre_set_trf_number,
                pre_prd_lvl_master,    pre_trf_in_transfer, 'S',
                pre_set_trf_number,    var_transfer_type, 0,
                pre_inner_pk_tech_key, pre_inner_pk_tech_key,
                pre_trf_set_ind, pre_trf_set_ind, pre_trf_ipid_conv,
                pre_trf_cp_conv, pre_trf_ipid_conv, pre_trf_cp_conv,
                'F', 0, pre_prd_lvl_master, NULL, 'F', var_add_to_request);


    END IF;

    pre_prd_lvl_master := 0;
    pre_trf_set_ind := NULL;
    pre_set_trf_number := 0;
    pre_tot_quantity := 0;
    pre_trf_manifest_key := 0;
    pre_trf_carton_key := 0;
    pre_trf_in_manifest := 0;
    pre_trf_in_carton := 0;
    pre_trf_in_transfer := 0;

END create_comp;
-- ------------------------------------------------------------------------
-- ------------------------------------------------------------------------
PROCEDURE validate_01
IS
BEGIN

    -- This procedures validates and processes the action_code '01'
    --   (Work Status Transfer record).

    var_error_code := 0;

    IF dti_rec.trf_number IS NOT NULL THEN
        var_error_code := 1;
        RAISE EXP_VALIDATION_FAILED;
    END IF;

    -- date created must be entered
    IF dti_rec.date_created IS NULL THEN
        var_error_code := 147;
        RAISE EXP_VALIDATION_FAILED;
    END IF;

    -- shipping location must be entered
    -- get the shipping location tech key only if the previous shipping location is null within the same action
    IF dti_rec.from_loc IS NULL THEN
        var_error_code := 3;
        RAISE EXP_VALIDATION_FAILED;
    ELSE
        IF pre_from_loc IS NULL OR pre_from_loc <> dti_rec.from_loc THEN
            var_error_code := 0;
            get_from_loc_child;
            IF var_error_code > 0 THEN
                RAISE EXP_VALIDATION_FAILED;
            END IF;
        END IF;
    END IF;

    -- receiving location must be entered
    -- get the receiving location tech key only if the previous receiving location is null within the same action
    IF dti_rec.to_loc IS NULL THEN
        var_error_code := 4;
        RAISE EXP_VALIDATION_FAILED;
    ELSE
        IF pre_to_loc IS NULL OR pre_to_loc <> dti_rec.to_loc THEN
            var_error_code := 0;
            var_date_created := dti_rec.date_created;
            get_to_loc_child;
            IF var_error_code > 0 THEN
                RAISE EXP_VALIDATION_FAILED;
            END IF;
        END IF;

    END IF;

    -- shipping and receiving location cannot be the same location
    IF dti_rec.from_loc = dti_rec.to_loc THEN
        var_error_code := 87;
        RAISE EXP_VALIDATION_FAILED;
    END IF;

    -- validate source id
    IF dti_rec.trf_source_id IS NULL THEN
        var_error_code := 500;
        RAISE EXP_VALIDATION_FAILED;
    ELSE
        IF pre_trf_source_id IS NULL OR
            (rtrim(dti_rec.trf_source_id) <> rtrim(pre_trf_source_id)) THEN -- 25843
            BEGIN
                SELECT    /*+ INDEX(TRFSRCCD TRFSRCCDP1) */
                     1
                INTO var_count
                FROM trfsrccd
                WHERE trf_source_id = dti_rec.trf_source_id;
            EXCEPTION WHEN NO_DATA_FOUND THEN
                var_error_code := 500;
                RAISE EXP_VALIDATION_FAILED;
            END;
        END IF;
    END IF;

    -- these two fields will be null the first time after the location breaks
    IF pre_to_loc IS NULL OR
       pre_to_loc <> dti_rec.to_loc OR
       pre_from_loc IS NULL OR
       pre_from_loc <> dti_rec.from_loc THEN

        -- get the transfer type for the shipping/receiving location
        var_trf_type_id := NULL;
        trfgettyp (var_from_loc_child, var_to_loc_child, var_trf_type_id);
        IF var_trf_type_id IS NULL THEN
            var_error_code := 21;
            RAISE EXP_VALIDATION_FAILED;
        END IF;

        -- set the index to the transfer type value and get any additional default values from the transfer type table
        var_idx := trfdefpk.get_typ_idx (var_trf_type_id);
        var_trf_aprov_req := trfdefpk.arr_typ (var_idx).trf_aprov_req;
        var_trf_ship_mnfst := trfdefpk.arr_typ (var_idx).trf_ship_mnfst;
          var_cross_dock_reason := trfdefpk.arr_typ (var_idx).cross_dock_reason;
          var_cross_dock_reason := lpad(TO_NUMBER(var_cross_dock_reason),2,'0'); -- 26232

        -- get the lead days for the shipping/receiving location
      --30500
      var_trf_lead_days := get_trfleaddays(var_from_loc_child,var_to_loc_child);
     /* BEGIN
        SELECT  /*+ INDEX(TRFLDDEE TRFLDDEEP1)
              trf_lead_days
        INTO  var_trf_lead_days
        FROM  trflddee
        WHERE   trf_ship_loc = var_from_loc_child
        AND   trf_rec_loc = var_to_loc_child;
    EXCEPTION WHEN NO_DATA_FOUND THEN
      var_trf_lead_days := 0;
    END;
    */
    END IF;

    -- quantity must be greater than zero
    IF NVL(dti_rec.quantity,0.0) <= 0.0 THEN
        var_error_code := 6;
        RAISE EXP_VALIDATION_FAILED;
    END IF;

    -- product must be entered
    -- get the product tech key if the previous product is different
--  16752 Perishables enhancement
    var_entry_method := 1;

    IF var_org_is_store_ship = 'F' THEN
        IF dti_rec.inner_pack_id IS NULL THEN
            var_error_code := 999;
            RAISE EXP_VALIDATION_FAILED;
        END IF;
    END IF;

    IF dti_rec.inner_pack_id IS NOT NULL THEN
        var_entry_method := 3;
        var_error_code := 0;
        IF pre_inner_pack_id IS NULL OR
            pre_inner_pack_id <> dti_rec.inner_pack_id THEN
            get_inner_pk_key;
            IF var_error_code > 0 THEN
                RAISE EXP_VALIDATION_FAILED;
            END IF;
        END IF;
        --25843
--        IF var_org_is_store_ship = 'T' THEN
--            IF (var_loose_pack_flag = 'T' OR var_pack_lvl_parent IS NOT NULL) THEN
--                NULL;
--            ELSE
--                var_error_code := 0;
--                get_loose_inner; -- this gets the var_loose_inner_pack_id
--                IF var_error_code > 0 THEN
--                    RAISE EXP_VALIDATION_FAILED;
--                END IF;
--                dti_rec.inner_pack_id := var_loose_inner_pack_id;
--            END IF;
--        END IF;
        dti_rec.prd_lvl_number := save_prd_lvl_number;
        var_inner_pk_tech_key := save_inner_pk_tech_key;
    ELSE
        var_inner_pk_tech_key := 0;  -- 23505
    END IF;

    IF dti_rec.inner_pack_id IS NULL THEN
        IF dti_rec.prd_upc IS NOT NULL THEN
            var_error_code := 0;
            IF pre_prd_upc IS NULL OR dti_rec.prd_upc <> pre_prd_upc THEN
                get_vpc_upc;
                IF var_error_code > 0 THEN
                    RAISE EXP_VALIDATION_FAILED;
                END IF;
            END IF;
            IF var_entry_method = 5 THEN
                var_inner_pk_tech_key := save_inner_pk_tech_key;
-- 27110
                dti_rec.inner_pack_id := save_inner_pack_id;
            ELSE
                var_inner_pk_tech_key := 0;
            END IF;
            dti_rec.prd_lvl_number := save_prd_lvl_number;
        END IF;
    END IF;
--  16752 Perishables enhancement above

    IF dti_rec.prd_lvl_number IS NULL THEN
        var_error_code := 5;
        RAISE EXP_VALIDATION_FAILED;
     ELSE
        var_prd_lvl_child := 0;
        var_prd_lvl_parent := 0;
        var_prd_lvl_master := 0;
        var_error_code := 0;
           var_prd_lvl_number := dti_rec.prd_lvl_number;
           var_action_code := dti_rec.action_code;
            var_jda_origin := dti_rec.jda_origin;
        get_prd_lvl_child;
        IF var_error_code > 0 THEN
            RAISE EXP_VALIDATION_FAILED;
        END IF;

         IF pre_prd_lvl_number IS NULL
           OR pre_prd_lvl_number <> dti_rec.prd_lvl_number
           OR pre_inner_pk_tech_key <> var_inner_pk_tech_key THEN

            IF NVL(pre_prd_lvl_master,0) > 0 THEN
                create_comp;
            END IF;
        END IF;
    END IF;

    -- 25843
--     IF var_org_is_store_ship = 'T' THEN
--        IF dti_rec.inner_pack_id IS NULL THEN
--            dti_rec.inner_pack_id := var_loose_inner_pack_id;
--        END IF;
--    END IF;

   IF var_entry_method in (3,5) THEN    -- 22235
        IF NVL(dti_rec.trf_qty_flag,'S') = 'S' THEN
            var_error_code := 811;
            RAISE EXP_VALIDATION_FAILED;
        END IF;
    ELSE
        IF NVL(dti_rec.trf_qty_flag,'S') IN ('P', 'C') THEN
            var_error_code := 812;
            RAISE EXP_VALIDATION_FAILED;
        END IF;
    END IF;

    -- if the carrier is not entered use the default carrier id

-- transfer reason must be entered
-- validate the reason code using trfdefpk package
    IF dti_rec.trf_reason_code IS NULL THEN
        var_error_code := 145;
        RAISE EXP_VALIDATION_FAILED;
    ELSE
        IF pre_trf_reason_code IS NULL OR rtrim(pre_trf_reason_code) <> rtrim(dti_rec.trf_reason_code) THEN  --25276
            var_idx := trfdefpk.get_pty_idx (dti_rec.trf_reason_code);
            IF var_idx IS NULL THEN
                var_error_code := 145;
                RAISE EXP_VALIDATION_FAILED;
            END IF;
        END IF;
    END IF;

    -- if the reason code entered is the same reason as the "Cross Dock Reason" assigned to the transfer type
    -- the po number is required
    var_cross_dock_transfer := FALSE;
    IF var_cross_dock_reason IS NOT NULL THEN
        IF rtrim(dti_rec.trf_reason_code) = rtrim(var_cross_dock_reason) THEN   -- 26232
            IF dti_rec.pmg_po_number IS NULL THEN
                var_error_code := 651;
                RAISE EXP_VALIDATION_FAILED;
            ELSE
                var_count := 0;
                -- Ashok Added Hints
                SELECT     /*+ INDEX(PMGDOCEE PMGDOCEEP1) */
                        COUNT(*)
                INTO     var_count
                FROM     pmgdocee
                WHERE     pmg_po_number = dti_rec.pmg_po_number
                AND     ROWNUM = 1;
                IF var_count = 0 THEN
                    var_error_code := 651;
                    RAISE EXP_VALIDATION_FAILED;
                END IF;
                var_cross_dock_transfer := TRUE;
            END IF;
        END IF;
    END IF;

    -- get the cross dock location tech key if entered and different then the previous cross dock
    -- this cross dock location is totally different then the cross dock reason code check above
    IF dti_rec.cross_dock_loc IS NOT NULL THEN
        IF pre_cross_dock_loc IS NULL
        OR pre_cross_dock_loc <> dti_rec.cross_dock_loc THEN
            -- Ashok - Added Hints
            BEGIN
                SELECT     /*+ INDEX(ORGMSTEE ORGMSTEEI4) */
                        org_lvl_child
                INTO     var_crd_lvl_child
                FROM     orgmstee
                WHERE     org_lvl_number = dti_rec.cross_dock_loc
                AND     org_lvl_id = 1;
            EXCEPTION WHEN NO_DATA_FOUND THEN
                var_crd_lvl_child := NULL;
            END;
        END IF;
    ELSE
        var_crd_lvl_child := NULL;
    END IF;

    -- calculate the expected receipt date if not entered
    IF dti_rec.expt_receipt_date IS NULL THEN
        IF NVL(var_trf_lead_days,0) > 0 THEN
            var_expt_receipt_date := dti_rec.date_created + var_trf_lead_days;
        END IF;
    ELSE
        var_expt_receipt_date := dti_rec.expt_receipt_date;
    END IF;
-- we need to break the transfer if the parent hierarchy limits are set, or the number of lines are specified in the
-- control table (TRFCTLEE)
-- the parent product number was loaded into an array when the product was validated
-- first check if we have a transfer number in the array for the parent of the current record, if not create new transfer
-- then check if the number of limit lines exceeded, if yes create new transfer
-- otherwise use the transfer already in the array for the current record hierarchy
    var_create_trf_header := FALSE;
    IF arr_ship(var_prd_lvl_parent).arr_prd_lvl_parent = 0 THEN
        IF NVL(arr_ship(var_prd_lvl_parent).arr_trf_number,0) = 0 THEN
            SELECT     trf_number.NEXTVAL
            INTO     var_trf_number
            FROM     DUAL;
              var_create_trf_header := TRUE;
            arr_ship(var_prd_lvl_parent).arr_trf_number := var_trf_number;
            arr_ship(var_prd_lvl_parent).arr_limit_lines := 1;
        ELSE
            IF arr_ship(var_prd_lvl_parent).arr_limit_lines = var_max_nbr_of_lines
                AND var_max_nbr_of_lines > 0  THEN
                IF NVL(pre_trf_number,0) > 0 THEN
                    trfalwbld (pre_trf_number, 'H', 'F');
-- 377868        SAVEPOINT SAVE_THIS;
        COMMIT WORK;
                    arr_rowid.DELETE;
                    var_rowid_idx := 0;
                    arr_ship.DELETE;
                END IF;
                SELECT     trf_number.NEXTVAL
                INTO     var_trf_number
                FROM     DUAL;
                var_create_trf_header := TRUE;
                arr_ship(var_prd_lvl_parent).arr_trf_number := var_trf_number;
                arr_ship(var_prd_lvl_parent).arr_limit_lines := 1;
            ELSE
                var_trf_number := arr_ship(var_prd_lvl_parent).arr_trf_number;
                arr_ship(var_prd_lvl_parent).arr_limit_lines :=
                     arr_ship(var_prd_lvl_parent).arr_limit_lines + 1;
            END IF;
        END IF;
    ELSE
        IF arr_ship(var_prd_lvl_parent).arr_limit_lines = var_max_nbr_of_lines
            AND var_max_nbr_of_lines > 0  THEN
            IF NVL(pre_trf_number,0) > 0 THEN
                    trfalwbld (pre_trf_number, 'H', 'F');
-- 377868        SAVEPOINT SAVE_THIS;
        COMMIT WORK;
                    arr_rowid.DELETE;
                    var_rowid_idx := 0;
                    arr_ship.DELETE;
            END IF;
            SELECT     trf_number.NEXTVAL
            INTO     var_trf_number
            FROM     DUAL;
            var_create_trf_header := TRUE;
            arr_ship(var_prd_lvl_parent).arr_trf_number := var_trf_number;
            arr_ship(var_prd_lvl_parent).arr_limit_lines := 1;
         ELSE
            IF NVL(arr_ship(var_prd_lvl_parent).arr_trf_number,0) = 0 THEN
                IF NVL(pre_trf_number,0) > 0 THEN
                    trfalwbld (pre_trf_number, 'H', 'F');
-- 377868        SAVEPOINT SAVE_THIS;
        COMMIT WORK;
                    arr_rowid.DELETE;
                    var_rowid_idx := 0;
                    arr_ship.DELETE;
                END IF;

                SELECT     trf_number.NEXTVAL
                INTO     var_trf_number
                FROM     DUAL;
                var_create_trf_header := TRUE;
                arr_ship(var_prd_lvl_parent).arr_trf_number := var_trf_number;
                  arr_ship(var_prd_lvl_parent).arr_limit_lines := 1;
            ELSE
                var_trf_number := arr_ship(var_prd_lvl_parent).arr_trf_number;
                arr_ship(var_prd_lvl_parent).arr_limit_lines :=
                     arr_ship(var_prd_lvl_parent).arr_limit_lines + 1;
            END IF;
        END IF;
    END IF;

-- 16752 based on the carton/manifest values set the fields accordingly 16752
    trfgetavg (var_prd_lvl_child, var_from_loc_child,
        var_inner_pk_tech_key, var_vpc_prd_tech_key,
        out_on_hand_sell_units, out_on_hand_eaches,
        out_weight_per_sell_unit, out_weight_uom,
        out_prd_sll_uom, out_trf_ipid_conv,
        out_trf_cp_conv, out_weight_to_qty_ind);
    IF out_weight_to_qty_ind = 'T' THEN  -- 22235
        out_weight_per_sell_unit := 1;
        out_weight_uom := out_prd_sll_uom;
    END IF;

-- 16752 based on the flag convert the quantity to sell units.
-- 16752 'P' = number of inner packs, 'C' = number of case packs, 'S' = sell units
    IF dti_rec.trf_qty_flag = 'P' THEN
        var_qty_req_inners := dti_rec.quantity;
        dti_rec.quantity := dti_rec.quantity * out_trf_ipid_conv;
    ELSE
        IF dti_rec.trf_qty_flag = 'C' THEN
            var_qty_req_inners := dti_rec.quantity * out_trf_cp_conv;
            dti_rec.quantity := dti_rec.quantity
                            * out_trf_ipid_conv * out_trf_cp_conv;
        ELSE
            var_qty_req_inners := dti_rec.quantity;
        END IF;
    END IF;
    var_qty_pick_inners := var_qty_req_inners;

-- create the transfer header record
    IF var_create_trf_header = TRUE THEN
    --Log 689069 Added call to insert trfhdgww instead of trfhdree
        create_trfhdgww_03_false;
 /*        BEGIN

            -- Log ID:30664 Change, Following Insert is replaced to write to TRFHDGWW

-- 31157            INSERT INTO trfhdgww
                INSERT INTO trfhdree
                (
                trf_number,
                trf_ship_loc,
                trf_rec_loc,
                trf_entry_date,
                trf_type_id,
                trf_prior_id,
                trf_status,
                trf_ref_number,
                trf_source_id,
                trf_ship_mnfst,
                trf_notes,
                requested_by,
                expt_receipt_date,
                crd_lvl_child,
                pmg_po_number
                )
            VALUES
                (
                var_trf_number,
                var_from_loc_child,
                var_to_loc_child,
                var_date_created,
                var_trf_type_id,
                dti_rec.trf_reason_code,
                0,
                dti_rec.reference,
                dti_rec.trf_source_id,
                var_trf_ship_mnfst,
                dti_rec.notes,
                dti_rec.requested_by,
                var_expt_receipt_date,
                var_crd_lvl_child,
                dti_rec.pmg_po_number
                );
--30664                dbms_output.put_line (' Insert HDG 1 :' || var_trf_number);
        EXCEPTION WHEN DUP_VAL_ON_INDEX THEN
            NULL;
        END;
--        BEGIN
--               INSERT INTO trfrfxee
--                   (
--                trf_number,
--                trf_shp_ref_number,
--                trf_rcv_ref_number
--                )
--                   VALUES
--                (
--                var_trf_number,
--                dti_rec.reference,
--                NULL
--                );
--        EXCEPTION
--              WHEN DUP_VAL_ON_INDEX THEN
--                   NULL;
--        END;
*/
    END IF;

    -- create the transfer detail record
     -- Log ID:30664 Change, Following Insert is replaced to write to TRFDTGWW
     --Log 689069 Added call to insert trfdtgww instead of trfdtlee
/*    BEGIN
-- 31157         INSERT INTO trfdtgww

            INSERT INTO trfdtlee
            (
            trf_number,
            prd_lvl_child,
            prd_lvl_master,
            trf_shp_loc,
            trf_rec_loc,
            trf_qty_req,
            trf_qty_pick,
            trf_status,
            trf_ref_number,
            trf_source_id,
            trf_type_id,
            trf_set_ind,
            prd_upc,
            inner_pk_tech_key,
            master_inner_key,
            entry_method,
            on_hand_sell_units,
            on_hand_eaches,
            weight_per_sell_unit,
            weight_uom,
            prd_sll_uom,
            trf_ipid_conv,
            trf_cp_conv,
            qty_req_inners,
            qty_pick_inners,
            weight_to_qty_ind
            )
            VALUES
            (
            var_trf_number,
            var_prd_lvl_child,
            0,
            var_from_loc_child,
            var_to_loc_child,
            dti_rec.quantity,
            dti_rec.quantity,
            0,
            dti_rec.reference,
            dti_rec.trf_source_id,
            var_trf_type_id,
            var_trf_set_ind,
            dti_rec.prd_upc,
            var_inner_pk_tech_key,
            0,
            var_entry_method,
            out_on_hand_sell_units,
            out_on_hand_eaches,
            out_weight_per_sell_unit,
            out_weight_uom,
            out_prd_sll_uom,
            out_trf_ipid_conv,
            out_trf_cp_conv,
            var_qty_req_inners,
            var_qty_pick_inners,
            out_weight_to_qty_ind
            );
    EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
        -- Ashok - Added Hints
        -- Log ID:30664 Change, Following is replaced to write to TRFHDGWW
        */
        --UPDATE     /*+ INDEX(TRFDTLEE TRFDTLEEP1) */
  /*          trfdtlee
        SET    trf_qty_req = trf_qty_req + dti_rec.quantity,
            trf_qty_pick = trf_qty_pick + dti_rec.quantity,
            qty_req_inners = qty_req_inners + var_qty_req_inners,
              qty_pick_inners = qty_pick_inners + var_qty_pick_inners
        WHERE     trf_number = var_trf_number
        AND     prd_lvl_child = var_prd_lvl_child
        AND     prd_lvl_master = 0
        AND     inner_pk_tech_key = var_inner_pk_tech_key
        AND     master_inner_key = 0;
    END;
    */

     create_trfdtgww_03_false;

-- save the master product prd_lvl_child for the master/component check
-- the master product prd_lvl_master must be zero, the component products of the master will have the
-- master product in the prd_lvl_master column
-- we do not need to do this
--    IF var_trf_set_ind in (SET_MASTER, SET_SHIPPER) THEN
--        pre_prd_lvl_master := var_prd_lvl_master;
--        pre_tot_quantity := pre_tot_quantity + dti_rec.quantity;
--    ELSE
--        pre_prd_lvl_master := 0;
--        pre_tot_quantity := 0;
--    END IF;

     pre_cross_dock_loc := dti_rec.cross_dock_loc;
    pre_trf_reason_code := dti_rec.trf_reason_code;
    pre_trf_source_id := dti_rec.trf_source_id;
    pre_prd_upc := dti_rec.prd_upc;
    pre_inner_pack_id := dti_rec.inner_pack_id;
    pre_trf_number := var_trf_number;

END validate_01;
-- ------------------------------------------------------------------------
-- ------------------------------------------------------------------------
PROCEDURE validate_03_for_false
IS
BEGIN

    -- This procedures validates and processes the action_code '03' (shipping) and Jda_origin = 'F' record.
    -- Jda_origin = 'F' means that the transfer does not exists in the PMM system, create it and ship it.

    var_error_code := 0;

    IF dti_rec.trf_number IS NOT NULL THEN
        var_error_code := 1;
        RAISE EXP_VALIDATION_FAILED;
    END IF;

    -- date created must be entered
    IF dti_rec.date_created IS NULL THEN
        var_error_code := 147;
        RAISE EXP_VALIDATION_FAILED;
    END IF;


    -- shipping location must be entered
    -- get the shipping location tech key only if the previous shipping location is null within the same action
    IF dti_rec.from_loc IS NULL THEN
        var_error_code := 3;
        RAISE EXP_VALIDATION_FAILED;
    ELSE
        IF pre_from_loc IS NULL OR pre_from_loc <> dti_rec.from_loc THEN
            var_error_code := 0;
            get_from_loc_child;
            IF var_error_code > 0 THEN
                RAISE EXP_VALIDATION_FAILED;
            END IF;
        END IF;
    END IF;

    -- receiving location must be entered
    -- get the receiving location tech key only if the previous receiving location is null within the same action
    IF dti_rec.to_loc IS NULL THEN
        var_error_code := 4;
        RAISE EXP_VALIDATION_FAILED;
    ELSE
        IF pre_to_loc IS NULL OR pre_to_loc <> dti_rec.to_loc THEN
            var_error_code := 0;
            var_date_created := dti_rec.date_created;
            get_to_loc_child;
            IF var_error_code > 0 THEN
                RAISE EXP_VALIDATION_FAILED;
            END IF;
        END IF;

    END IF;

    -- shipping and receiving location cannot be the same location
    IF dti_rec.from_loc = dti_rec.to_loc THEN
        var_error_code := 87;
        RAISE EXP_VALIDATION_FAILED;
    END IF;

    -- validate source_id
    IF pre_trf_source_id IS NULL OR                             -- 25968
        rtrim(dti_rec.trf_source_id) <> rtrim(pre_trf_source_id) THEN  -- 25843
        BEGIN
            SELECT    /*+ INDEX(TRFSRCCD TRFSRCCDP1) */
               1
            INTO var_count
            FROM trfsrccd
            WHERE trf_source_id = dti_rec.trf_source_id;
        EXCEPTION WHEN NO_DATA_FOUND THEN
            var_error_code := 500;
            RAISE EXP_VALIDATION_FAILED;
        END;
    END IF;

    -- these two fields will be null the first time after the location breaks
    IF pre_to_loc IS NULL OR
       pre_to_loc <> dti_rec.to_loc OR
       pre_from_loc IS NULL OR
       pre_from_loc <> dti_rec.from_loc THEN

        -- get the transfer type for the shipping/receiving location
        var_trf_type_id := NULL;
        trfgettyp (var_from_loc_child, var_to_loc_child, var_trf_type_id);
        IF var_trf_type_id IS NULL THEN
            var_error_code := 21;
            RAISE EXP_VALIDATION_FAILED;
        END IF;

        -- set the index to the transfer type value and get any additional default values from the transfer type table
        var_idx := trfdefpk.get_typ_idx (var_trf_type_id);
        var_trf_aprov_req := trfdefpk.arr_typ (var_idx).trf_aprov_req;
        var_trf_ship_mnfst := trfdefpk.arr_typ (var_idx).trf_ship_mnfst;
          var_cross_dock_reason := trfdefpk.arr_typ (var_idx).cross_dock_reason;
          var_cross_dock_reason := lpad(TO_NUMBER(var_cross_dock_reason),2,'0');  -- 26232

        -- get the lead days for the shipping/receiving location
        --30500
        var_trf_lead_days := get_trfleaddays(var_from_loc_child,var_to_loc_child);
        /*BEGIN
            SELECT  /*+ INDEX(TRFLDDEE TRFLDDEEP1)
              trf_lead_days
            INTO  var_trf_lead_days
            FROM  trflddee
            WHERE   trf_ship_loc = var_from_loc_child
            AND   trf_rec_loc = var_to_loc_child;
        EXCEPTION WHEN NO_DATA_FOUND THEN
          var_trf_lead_days := 0;
        END;
        */
    END IF;

    -- quantity must be greater than zero
    IF NVL(dti_rec.quantity,0.0) <= 0.0 THEN
        var_error_code := 6;
        RAISE EXP_VALIDATION_FAILED;
    END IF;

    -- product must be entered
    -- get the product tech key if the previous product is different
--  16752 Perishables enhancement
    var_entry_method := 1;

    IF var_org_is_store_ship = 'F' THEN
        IF dti_rec.inner_pack_id IS NULL THEN
            var_error_code := 999;
            RAISE EXP_VALIDATION_FAILED;
        END IF;
    END IF;

    var_entry_method := 1;
    IF dti_rec.inner_pack_id IS NOT NULL THEN
        var_entry_method := 3;
        var_error_code := 0;
        IF pre_inner_pack_id IS NULL OR
            pre_inner_pack_id <> dti_rec.inner_pack_id THEN
            get_inner_pk_key;
            IF var_error_code > 0 THEN
                RAISE EXP_VALIDATION_FAILED;
            END IF;
        END IF;
        -- Log 25843
--        IF var_org_is_store_ship = 'T' THEN
--            IF (var_loose_pack_flag = 'T' OR var_pack_lvl_parent IS NOT NULL) THEN
--                NULL;
--            ELSE
--                var_error_code := 0;
--                get_loose_inner; -- this gets the var_loose_inner_pack_id
--                IF var_error_code > 0 THEN
--                    RAISE EXP_VALIDATION_FAILED;
--                END IF;
--                dti_rec.inner_pack_id := var_loose_inner_pack_id;
--            END IF;
--        END IF;
        dti_rec.prd_lvl_number := save_prd_lvl_number;
        var_inner_pk_tech_key := save_inner_pk_tech_key;
    ELSE
        var_inner_pk_tech_key := 0;            --23505
    END IF;

    IF dti_rec.inner_pack_id IS NULL THEN
        IF dti_rec.prd_upc IS NOT NULL THEN
            var_error_code := 0;
            IF pre_prd_upc IS NULL OR dti_rec.prd_upc <> pre_prd_upc THEN
                get_vpc_upc;
                IF var_error_code > 0 THEN
                    RAISE EXP_VALIDATION_FAILED;
                END IF;
            END IF;
            IF var_entry_method = 5 THEN
                var_inner_pk_tech_key := save_inner_pk_tech_key;
                dti_rec.inner_pack_id := save_inner_pack_id;
            ELSE
                var_inner_pk_tech_key := 0;
            END IF;
            dti_rec.prd_lvl_number := save_prd_lvl_number;
        END IF;
    END IF;

    IF var_entry_method in (3,5) THEN    -- 22235
        IF NVL(dti_rec.trf_qty_flag,'S') = 'S' THEN
            var_error_code := 811;
            RAISE EXP_VALIDATION_FAILED;
        END IF;
    ELSE
        IF NVL(dti_rec.trf_qty_flag,'S') IN ('P', 'C') THEN
            var_error_code := 812;
            RAISE EXP_VALIDATION_FAILED;
        END IF;
    END IF;


--  16752 Perishables enhancement above

    IF dti_rec.prd_lvl_number IS NULL THEN
        var_error_code := 5;
        RAISE EXP_VALIDATION_FAILED;
     ELSE
        var_prd_lvl_child := 0;
        var_prd_lvl_parent := 0;
        var_prd_lvl_master := 0;
        var_error_code := 0;
           var_prd_lvl_number := dti_rec.prd_lvl_number;
           var_action_code := dti_rec.action_code;
            var_jda_origin := dti_rec.jda_origin;
        get_prd_lvl_child;
        IF var_error_code > 0 THEN
            RAISE EXP_VALIDATION_FAILED;
        END IF;

        IF pre_prd_lvl_number IS NULL
           OR pre_prd_lvl_number <> dti_rec.prd_lvl_number
           OR pre_inner_pk_tech_key <> var_inner_pk_tech_key THEN

            IF NVL(pre_prd_lvl_master,0) > 0 THEN
                create_comp;
            END IF;
        END IF;
    END IF;

    -- Log 25843
--     IF var_org_is_store_ship = 'T' THEN
--        IF dti_rec.inner_pack_id IS NULL THEN
--            dti_rec.inner_pack_id := var_loose_inner_pack_id;
--        END IF;
--    END IF;

    -- if the carrier is not entered use the default carrier id
    IF dti_rec.carrier_name IS NULL THEN
        var_trf_car_id := var_default_car_id;
    ELSE
        IF pre_carrier_name IS NULL OR pre_carrier_name <> dti_rec.carrier_name THEN
            var_trf_car_id := 0;
            SELECT MIN(trf_car_id)
            INTO   var_trf_car_id
            FROM   trfcaree
            WHERE  trf_car_desc = dti_rec.carrier_name;
            IF NVL(var_trf_car_id, 0) = 0 THEN
                var_error_code := 148;
                RAISE EXP_VALIDATION_FAILED;
            END IF;
        END IF;
    END IF;

-- transfer reason must be entered
-- validate the reason code using trfdefpk package
    IF dti_rec.trf_reason_code IS NULL THEN
        var_error_code := 145;
        RAISE EXP_VALIDATION_FAILED;
    ELSE
        IF pre_trf_reason_code IS NULL OR rtrim(pre_trf_reason_code) <> rtrim(dti_rec.trf_reason_code) THEN --25276
            var_idx := trfdefpk.get_pty_idx (dti_rec.trf_reason_code);
            IF var_idx IS NULL THEN
                var_error_code := 145;
                RAISE EXP_VALIDATION_FAILED;
            END IF;
        END IF;
    END IF;

    -- if the reason code entered is the same reason as the "Cross Dock Reason" assigned to the transfer type
    -- the po number is required
    var_cross_dock_transfer := FALSE;
    IF var_cross_dock_reason IS NOT NULL THEN
        IF rtrim(dti_rec.trf_reason_code) = rtrim(var_cross_dock_reason) THEN  -- 26232
            IF dti_rec.pmg_po_number IS NULL THEN
                var_error_code := 651;
                RAISE EXP_VALIDATION_FAILED;
            ELSE
                var_count := 0;
                -- Ashok Added Hints
                SELECT     /*+ INDEX(PMGDOCEE PMGDOCEEP1) */
                        COUNT(*)
                INTO     var_count
                FROM     pmgdocee
                WHERE     pmg_po_number = dti_rec.pmg_po_number
                AND     ROWNUM = 1;
                IF var_count = 0 THEN
                    var_error_code := 651;
                    RAISE EXP_VALIDATION_FAILED;
                END IF;
                var_cross_dock_transfer := TRUE;
            END IF;
        END IF;
    END IF;

    -- get the cross dock location tech key if entered and different then the previous cross dock
    -- this cross dock location is totally different then the cross dock reason code check above
    IF dti_rec.cross_dock_loc IS NOT NULL THEN
        IF pre_cross_dock_loc IS NULL
        OR pre_cross_dock_loc <> dti_rec.cross_dock_loc THEN
            -- Ashok - Added Hints
            BEGIN
                SELECT     /*+ INDEX(ORGMSTEE ORGMSTEEI4) */
                        org_lvl_child
                INTO     var_crd_lvl_child
                FROM     orgmstee
                WHERE     org_lvl_number = dti_rec.cross_dock_loc
                AND     org_lvl_id = 1;
            EXCEPTION WHEN NO_DATA_FOUND THEN
                var_crd_lvl_child := NULL;
            END;
        END IF;
    ELSE
        var_crd_lvl_child := NULL;
    END IF;

    -- calculate the expected receipt date if not entered
    IF dti_rec.expt_receipt_date IS NULL THEN
        IF NVL(var_trf_lead_days,0) > 0 THEN
            var_expt_receipt_date := dti_rec.date_created + var_trf_lead_days;
        END IF;
    ELSE
        var_expt_receipt_date := dti_rec.expt_receipt_date;
    END IF;

    -- validate the manifest number if entered, only if different from
    -- the previous manifest within the same action code
    -- 23367 added checks of the location break
    IF dti_rec.mnfst_number IS NOT NULL THEN
        IF pre_manifest_number IS NULL
            OR pre_manifest_number <> dti_rec.mnfst_number
            OR pre_from_loc IS NULL
            OR pre_from_loc <> dti_rec.from_loc
            OR pre_to_loc IS NULL
            OR pre_to_loc <> dti_rec.to_loc THEN


            -- Ashok - Added hints and exception. Used Oracle Seq.
            BEGIN
            SELECT     /*+ INDEX(TRFMFHEE TRFMFHEEI2) */
                1
            INTO     var_count
            FROM     trfmfhee
            WHERE     trf_manifest_id = dti_rec.mnfst_number
            AND        trf_ship_loc = var_from_loc_child
            AND        trf_rec_loc = var_to_loc_child
            AND     ROWNUM = 1;

            var_error_code := 205;
            RAISE EXP_VALIDATION_FAILED;

            EXCEPTION
            WHEN NO_DATA_FOUND THEN
                SELECT     trf_manifest_key.NEXTVAL
                INTO    var_trf_manifest_key
                FROM     DUAL;

                INSERT INTO trfmfhee
                      (
                    trf_manifest_key,
                    trf_manifest_id,
                    trf_ship_loc,
                    trf_rec_loc,
                    trf_create_date,
                    trf_ship_date,
                    trf_rec_date,
                    trf_close_date,
                    trf_car_id,
                    trf_manifest_sts
                    )
                     VALUES
                    (
                    var_trf_manifest_key,
                    dti_rec.mnfst_number,
                    var_from_loc_child,
                    var_to_loc_child,
                    dti_rec.date_created,
                    dti_rec.date_created,
                    NULL,
                    NULL,
                    var_trf_car_id,
                    0
                    );
                var_trf_manifest_seq := 0;
                var_manifest_shipping := TRUE;
            END;
        END IF;
    END IF;
    -- validate the carton number if entered,
    -- not only if different from the previous carton number
    -- within the same action
    -- 23367 Added checks of the location breaks
    IF dti_rec.carton_number IS NOT NULL THEN
        IF pre_carton_number IS NULL
            OR pre_carton_number <> dti_rec.carton_number
            OR pre_from_loc IS NULL
            OR pre_from_loc <> dti_rec.from_loc
            OR pre_to_loc IS NULL
            OR pre_to_loc <> dti_rec.to_loc THEN
            BEGIN
                SELECT     /*+ INDEX(TRFCTHEE TRFCTHEEI2) */
                    1
                INTO     var_count
                FROM     trfcthee
                WHERE     trf_carton_id = dti_rec.carton_number
                AND        trf_ship_loc = var_from_loc_child
                AND     trf_rec_loc = var_to_loc_child
                AND     ROWNUM = 1;
                -- If we find a carton header then it is an error
                -- because this is just being created.
                var_error_code := 204;
                RAISE EXP_VALIDATION_FAILED;

            EXCEPTION
            WHEN NO_DATA_FOUND THEN
                SELECT     trf_carton_key.NEXTVAL
                INTO    var_trf_carton_key
                FROM    DUAL;

                INSERT INTO trfcthee
                     (
                    trf_carton_key,
                    trf_carton_id,
                    trf_ship_loc,
                    trf_rec_loc,
                    trf_create_date,
                    trf_ship_date,
                    trf_rec_date,
                    trf_close_date,
                    trf_car_id,
                    trf_carton_stat,
                    trf_track_num,
                    trf_carton_wgt
                    )
                    VALUES
                    (
                    var_trf_carton_key,
                    dti_rec.carton_number,
                    var_from_loc_child,
                    var_to_loc_child,
                    dti_rec.date_created,
                    dti_rec.date_created,
                    NULL,
                    NULL,
                    var_trf_car_id,
                    0,
                    dti_rec.trf_track_num,
                    dti_rec.trf_carton_wgt
                    );

                var_trf_carton_seq := 0;
                var_carton_shipping := TRUE;

                IF var_manifest_shipping = TRUE THEN
                    BEGIN
                          INSERT INTO trfmfcee
                            (
                            trf_manifest_key,
                            trf_carton_key,
                            trf_manifest_sts
                            )
                               VALUES
                            (
                            var_trf_manifest_key,
                            var_trf_carton_key,
                            0
                            );
                        var_mfc_flag := 'T';
                    EXCEPTION
                    WHEN DUP_VAL_ON_INDEX THEN
                        var_error_code := 12;
                        RAISE EXP_VALIDATION_FAILED;
                    END;
                END IF;
            END;
        END IF;
    END IF;
-- we need to break the transfer if the parent hierarchy limits are set, or the number of lines are specified in the
-- control table (TRFCTLEE)
-- the parent product number was loaded into an array when the product was validated
-- first check if we have a transfer number in the array for the parent of the current record, if not create new transfer
-- then check if the number of limit lines exceeded, if yes create new transfer
-- otherwise use the transfer already in the array for the current record hierarchy

    var_create_trf_header := FALSE;
    IF arr_ship(var_prd_lvl_parent).arr_prd_lvl_parent = 0 THEN
        IF NVL(arr_ship(var_prd_lvl_parent).arr_trf_number,0) = 0 THEN
            SELECT     trf_number.NEXTVAL
            INTO     var_trf_number
            FROM     DUAL;
              var_create_trf_header := TRUE;
            arr_ship(var_prd_lvl_parent).arr_trf_number := var_trf_number;
            arr_ship(var_prd_lvl_parent).arr_limit_lines := 1;
        ELSE
            IF arr_ship(var_prd_lvl_parent).arr_limit_lines = var_max_nbr_of_lines
                AND var_max_nbr_of_lines > 0  THEN
                IF var_manifest_shipping = FALSE
                    AND var_carton_shipping = FALSE THEN
                    IF NVL(pre_trf_number,0) > 0 THEN
                        trfalwbld (pre_trf_number, 'H', 'F');
                        trfshpupd.drv_trfshpupd
                        (
                        pre_trf_number,
                        TYPE_TRANSFER,
                        var_trf_car_id,
                        TO_CHAR (pre_date_created, jdastdpk.DATE_FORMAT), --log 26953
                        var_trans_user,
                        var_trans_session,
                        'T',
                        100,
                        'F'
                        );
                        -- 31157
                        copy_trf_from_work;
-- 377868        SAVEPOINT SAVE_THIS;
        COMMIT WORK;
                        clear_trf_work;
                        IF dti_rec.trf_number IS NOT NULL THEN
                            copy_trf_to_work;
                        END IF;
                        -- 31157
--                         SAVEPOINT SAVE_THIS;
                        arr_rowid.DELETE;
                        var_rowid_idx := 0;
                        var_manifest_shipping := FALSE;
                        var_carton_shipping := FALSE;
                        arr_ship.DELETE;
                    END IF;
                END IF;
                SELECT     trf_number.NEXTVAL
                INTO     var_trf_number
                FROM     DUAL;
                var_create_trf_header := TRUE;
                arr_ship(var_prd_lvl_parent).arr_trf_number := var_trf_number;
                arr_ship(var_prd_lvl_parent).arr_limit_lines := 1;
            ELSE
-- 25582 added code to check if we need to create a new transfer number within a
--       manifest or carton shipping
                IF (var_manifest_shipping = TRUE
                    OR var_carton_shipping = TRUE)
                    AND
                    (var_break_for_po = TRUE OR var_reason_break = TRUE
                    OR var_source_break = TRUE) THEN
                    SELECT     trf_number.NEXTVAL
                    INTO     var_trf_number
                    FROM     DUAL;
                    var_create_trf_header := TRUE;
                    arr_ship(var_prd_lvl_parent).arr_trf_number := var_trf_number;
                    arr_ship(var_prd_lvl_parent).arr_limit_lines := 1;
                ELSE
                    var_trf_number := arr_ship(var_prd_lvl_parent).arr_trf_number;
                    arr_ship(var_prd_lvl_parent).arr_limit_lines :=
                    arr_ship(var_prd_lvl_parent).arr_limit_lines + 1;
                END IF;
            END IF;
        END IF;
    ELSE
        IF arr_ship(var_prd_lvl_parent).arr_limit_lines = var_max_nbr_of_lines
            AND var_max_nbr_of_lines > 0  THEN
            IF var_manifest_shipping = FALSE
                AND var_carton_shipping = FALSE THEN
                IF NVL(pre_trf_number,0) > 0 THEN
                    trfalwbld (pre_trf_number, 'H', 'F');
                       trfshpupd.drv_trfshpupd
                    (
                    pre_trf_number,
                    TYPE_TRANSFER,
                    var_trf_car_id,
                    TO_CHAR (pre_date_created, jdastdpk.DATE_FORMAT), --log 26953
                    var_trans_user,
                    var_trans_session,
                    'T',
                    100,
                    'F'
                    );
                    -- 31157
                    copy_trf_from_work;
-- 377868        SAVEPOINT SAVE_THIS;
        COMMIT WORK;
                    clear_trf_work;
                    IF dti_rec.trf_number IS NOT NULL THEN
                        copy_trf_to_work;
                    END IF;
                    -- 31157
--                     SAVEPOINT SAVE_THIS;
                    arr_rowid.DELETE;
                    var_rowid_idx := 0;
                    var_manifest_shipping := FALSE;
                    var_carton_shipping := FALSE;
                    arr_ship.DELETE;
                END IF;
            END IF;
            SELECT     trf_number.NEXTVAL
            INTO     var_trf_number
            FROM     DUAL;
            var_create_trf_header := TRUE;
            arr_ship(var_prd_lvl_parent).arr_trf_number := var_trf_number;
            arr_ship(var_prd_lvl_parent).arr_limit_lines := 1;
         ELSE
            IF NVL(arr_ship(var_prd_lvl_parent).arr_trf_number,0) = 0 THEN
                IF var_manifest_shipping = FALSE
                    AND var_carton_shipping = FALSE THEN
                    IF NVL(pre_trf_number,0) > 0 THEN
                    trfalwbld (pre_trf_number, 'H', 'F');
                    trfshpupd.drv_trfshpupd
                    (
                    pre_trf_number,
                    TYPE_TRANSFER,
                    var_trf_car_id,
                    TO_CHAR (pre_date_created, jdastdpk.DATE_FORMAT), --log 26953
                    var_trans_user,
                    var_trans_session,
                    'T',
                    100,
                    'F'
                    );
                    -- 31157
                    copy_trf_from_work;
-- 377868        SAVEPOINT SAVE_THIS;
        COMMIT WORK;
                    clear_trf_work;
                    IF dti_rec.trf_number IS NOT NULL THEN
                        copy_trf_to_work;
                    END IF;
                    -- 31157
--                     SAVEPOINT SAVE_THIS;
                    arr_rowid.DELETE;
                    var_rowid_idx := 0;
                    var_manifest_shipping := FALSE;
                    var_carton_shipping := FALSE;
                    arr_ship.DELETE;
                    END IF;
                END IF;
                SELECT     trf_number.NEXTVAL
                INTO     var_trf_number
                FROM     DUAL;
                var_create_trf_header := TRUE;
                arr_ship(var_prd_lvl_parent).arr_trf_number := var_trf_number;
                  arr_ship(var_prd_lvl_parent).arr_limit_lines := 1;
            ELSE
-- 25582 added code to check if we need to create a new transfer number within a
--       manifest or carton shipping
                IF (var_manifest_shipping = TRUE
                    OR var_carton_shipping = TRUE)
                    AND
                    (var_break_for_po = TRUE OR var_reason_break = TRUE
                    OR var_source_break = TRUE) THEN
                    SELECT     trf_number.NEXTVAL
                    INTO     var_trf_number
                    FROM     DUAL;
                    var_create_trf_header := TRUE;
                    arr_ship(var_prd_lvl_parent).arr_trf_number := var_trf_number;
                    arr_ship(var_prd_lvl_parent).arr_limit_lines := 1;
                ELSE
                    var_trf_number := arr_ship(var_prd_lvl_parent).arr_trf_number;
                    arr_ship(var_prd_lvl_parent).arr_limit_lines :=
                    arr_ship(var_prd_lvl_parent).arr_limit_lines + 1;
                END IF;
            END IF;
        END IF;
    END IF;

-- 16752 based on the carton/manifest values set the fields accordingly 16752
    trfgetavg (var_prd_lvl_child, var_from_loc_child,
        var_inner_pk_tech_key, var_vpc_prd_tech_key,
        out_on_hand_sell_units, out_on_hand_eaches,
        out_weight_per_sell_unit, out_weight_uom,
        out_prd_sll_uom, out_trf_ipid_conv,
        out_trf_cp_conv, out_weight_to_qty_ind);

    IF out_weight_to_qty_ind = 'T' THEN  -- 22235
        out_weight_per_sell_unit := 1;
        out_weight_uom := out_prd_sll_uom;
    END IF;

-- 16752 based on the flag convert the quantity to sell units.
-- 16752 'P' = number of inner packs, 'C' = number of case packs, 'S' = sell units
    IF dti_rec.trf_qty_flag = 'P' THEN
        var_qty_req_inners := dti_rec.quantity;
        var_qty_pick_inners := dti_rec.quantity;
        dti_rec.quantity := dti_rec.quantity * out_trf_ipid_conv;
    ELSE
        IF dti_rec.trf_qty_flag = 'C' THEN
            var_qty_req_inners := dti_rec.quantity * out_trf_cp_conv;
            var_qty_pick_inners := dti_rec.quantity * out_trf_cp_conv;
            dti_rec.quantity := dti_rec.quantity
                            * out_trf_ipid_conv * out_trf_cp_conv;
        ELSE
            var_qty_req_inners := dti_rec.quantity;
            var_qty_pick_inners := dti_rec.quantity; -- 22235
        END IF;
    END IF;
    IF out_weight_to_qty_ind = 'T' THEN -- 22235
        IF dti_rec.trf_qty_flag IN ('P', 'C') THEN -- import record is by innerpack
            IF dti_rec.trf_weight IS NOT NULL THEN
                IF dti_rec.trf_weight_uom IS NOT NULL THEN
                    IF dti_rec.trf_weight_uom <> out_prd_sll_uom THEN
                        var_convert_weight :=
                        pmmuompk.convert_weight_uom (dti_rec.trf_weight,
                                             dti_rec.trf_weight_uom,
                                             out_prd_sll_uom);
                        dti_rec.quantity := var_convert_weight;
                    ELSE
                        dti_rec.quantity := dti_rec.trf_weight;
                    END IF;
                ELSE -- weight is given, but no weight uom is given
                    dti_rec.quantity := dti_rec.trf_weight;
                    dti_rec.trf_weight_uom := out_prd_sll_uom;
                END IF;
            ELSE -- no weight is given
                 dti_rec.trf_weight := out_weight_per_sell_unit * dti_rec.quantity;
                dti_rec.trf_weight_uom := out_weight_uom;
            END IF;
        ELSE -- import record is by product
            dti_rec.trf_weight := dti_rec.quantity;
            dti_rec.trf_weight_uom := out_weight_uom;
          END IF;
    ELSE -- it is not a weight_to_qty product
        IF dti_rec.trf_weight IS NULL THEN
               dti_rec.trf_weight := out_weight_per_sell_unit * dti_rec.quantity;
            dti_rec.trf_weight_uom := out_weight_uom;
        END IF;
    END IF;  -- 22235
    IF dti_rec.carton_number IS NOT NULL THEN
        var_trf_in_carton := dti_rec.quantity;
        var_trf_qty_ship := 0;
        var_trf_in_manifest := 0;
        var_in_carton_inners := var_qty_pick_inners;      -- 22235
        var_qty_ship_inners := 0;                -- 22235
        var_in_manifest_inners := 0;              --22235
        var_carton_weight_ship := dti_rec.trf_weight;  -- 22721
        var_carton_weight_ship_uom := dti_rec.trf_weight_uom;  -- 22721
        var_mft_weight_ship := NULL;  -- 22721
        var_mft_weight_ship_uom := NULL;  -- 2272
        var_trf_weight_ship := NULL;  -- 22721
        var_trf_weight_ship_uom := NULL;  -- 22721
    ELSE
        IF dti_rec.mnfst_number IS NOT NULL THEN
            var_trf_in_manifest := dti_rec.quantity;
            var_trf_qty_ship := 0;
            var_trf_in_carton := 0;
            var_in_manifest_inners := var_qty_pick_inners; -- 22235
            var_qty_ship_inners := 0;  -- 22235
            var_in_carton_inners := 0; -- 22235
            var_carton_weight_ship := NULL;  -- 22721
            var_carton_weight_ship_uom := NULL;  -- 22721
            var_mft_weight_ship := dti_rec.trf_weight;  -- 22721
            var_mft_weight_ship_uom := dti_rec.trf_weight_uom;  -- 2272
            var_trf_weight_ship := NULL;  -- 22721
            var_trf_weight_ship_uom := NULL;  -- 22721
        ELSE
            var_trf_qty_ship := dti_rec.quantity;
            var_trf_in_manifest := 0;
            var_trf_in_carton := 0;
            var_in_manifest_inners := 0; -- 22235
            var_qty_ship_inners := var_qty_pick_inners;  -- 22235
            var_in_carton_inners := 0; -- 22235
            var_carton_weight_ship := NULL;  -- 22721
            var_carton_weight_ship_uom := NULL;  -- 22721
            var_mft_weight_ship := NULL;  -- 22721
            var_mft_weight_ship_uom := NULL;  -- 2272
            var_trf_weight_ship := dti_rec.trf_weight;  -- 22721
            var_trf_weight_ship_uom := dti_rec.trf_weight_uom;  -- 22721
        END IF;
    END IF;

-- create the transfer header record
    IF var_create_trf_header = TRUE THEN
        create_trfhdgww_03_false;
    END IF;
-- moved this insert to a proc to be in a Pragma Autonomous transaction
/*
        BEGIN
            -- Log ID:30664 Change, Following Insert is replaced to write to TRFHDGWW
            INSERT INTO trfhdgww
                (
                trf_number,
                trf_ship_loc,
                trf_rec_loc,
                trf_entry_date,
                trf_type_id,
                trf_prior_id,
                trf_car_id,
                trf_status,
                trf_ref_number,
                trf_source_id,
                trf_ship_mnfst,
                trf_notes,
                requested_by,
                expt_receipt_date,
                crd_lvl_child,
                pmg_po_number
                )
            VALUES
                (
                var_trf_number,
                var_from_loc_child,
                var_to_loc_child,
                var_date_created,
                var_trf_type_id,
                dti_rec.trf_reason_code,
                var_trf_car_id,
                0,
                dti_rec.reference,
                dti_rec.trf_source_id,
                var_trf_ship_mnfst,
                dti_rec.notes,
                dti_rec.requested_by,
                var_expt_receipt_date,
                var_crd_lvl_child,
                dti_rec.pmg_po_number
                );
        EXCEPTION WHEN DUP_VAL_ON_INDEX THEN
            NULL;
        END;
*/
        BEGIN
               INSERT INTO trfrfxee
                   (
                trf_number,
                trf_shp_ref_number,
                trf_rcv_ref_number
                )
                   VALUES
                (
                var_trf_number,
                dti_rec.reference,
                NULL
                );
        EXCEPTION
              WHEN DUP_VAL_ON_INDEX THEN
                   NULL;
        END;
--    END IF;  377868

    -- create the transfer detail record
    -- Log ID:30664 Change, Following Insert is replaced to write to TRFDTGWW


-- moved this insert to a proc to be in a Pragma Autonomous transaction 377868
    create_trfdtgww_03_false;
/*
    BEGIN
         INSERT INTO trfdtgww
            (
            trf_number,
            prd_lvl_child,
            prd_lvl_master,
            trf_shp_loc,
            trf_rec_loc,
            trf_qty_req,
            trf_qty_pick,
            trf_qty_ship,
            trf_in_carton,
            trf_in_manifest,
            trf_status,
            trf_ref_number,
            trf_source_id,
            trf_type_id,
            trf_set_ind,
            prd_upc,
            inner_pk_tech_key,
            master_inner_key,
            entry_method,
            on_hand_sell_units,
            on_hand_eaches,
            weight_per_sell_unit,
            weight_uom,
            prd_sll_uom,
            trf_ipid_conv,
            trf_cp_conv,
            trf_weight_ship,
            trf_wgt_ship_uom,
            qty_req_inners,   -- 22235
            qty_pick_inners,  -- 22235
            qty_ship_inners,  -- 22235
            in_carton_inners,  -- 22235
            in_manifest_inners,  -- 22235
            weight_to_qty_ind
            )
            VALUES
            (
            var_trf_number,
            var_prd_lvl_child,
            0,
            var_from_loc_child,
            var_to_loc_child,
            dti_rec.quantity,
            dti_rec.quantity,
            var_trf_qty_ship,
            var_trf_in_carton,
            var_trf_in_manifest,
            0,
            dti_rec.reference,
            dti_rec.trf_source_id,
            var_trf_type_id,
            var_trf_set_ind,
            dti_rec.prd_upc,
            var_inner_pk_tech_key,
            0,
            var_entry_method,
            out_on_hand_sell_units,
            out_on_hand_eaches,
            out_weight_per_sell_unit,
            out_weight_uom,
            out_prd_sll_uom,
            out_trf_ipid_conv,
            out_trf_cp_conv,
            var_trf_weight_ship,
            var_trf_weight_ship_uom,
            var_qty_req_inners,  -- 22235
            var_qty_pick_inners,  -- 22235
            var_qty_ship_inners,  -- 22235
            var_in_carton_inners,  -- 22235
            var_in_manifest_inners,  -- 22235
            out_weight_to_qty_ind
            );
    EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
        IF NVL(var_trf_weight_ship,0) > 0 THEN
            -- Log ID:30664 Change, Following Select is replaced to read from TRFDTGWW
            SELECT trf_wgt_ship_uom
            INTO   pre_trf_wgt_ship_uom
            FROM   trfdtgww
            WHERE     trf_number = var_trf_number
            AND     prd_lvl_child = var_prd_lvl_child
            AND     prd_lvl_master = 0
               AND     inner_pk_tech_key = var_inner_pk_tech_key
               AND     master_inner_key = 0;
            IF pre_trf_wgt_ship_uom IS NOT NULL THEN
                IF pre_trf_wgt_ship_uom <> var_trf_weight_ship_uom THEN
                    var_conv_weight :=  pmmuompk.convert_weight_uom(
                        var_trf_weight_ship, var_trf_weight_ship_uom,
                            pre_trf_wgt_ship_uom);
                    var_trf_weight_ship := var_conv_weight;
                    var_trf_weight_ship_uom := pre_trf_wgt_ship_uom;
                END IF;
            END IF;
        END IF;

        -- Ashok - Added Hints
        -- Log ID:30664 Change, Following Update is replaced to write to TRFDTGWW
*/
--        UPDATE     /*+ INDEX(TRFDTGWW TRFDTGWWP1) */
--            trfdtgww
/*
        SET    trf_qty_req = NVL(trf_qty_req,0.0) + dti_rec.quantity,
            trf_qty_pick = NVL(trf_qty_pick,0.0) + dti_rec.quantity,
            trf_qty_ship = NVL(trf_qty_ship,0.0) + var_trf_qty_ship,
            trf_in_carton = NVL(trf_in_carton,0.0) + var_trf_in_carton,
            trf_in_manifest = NVL(trf_in_manifest,0.0) + var_trf_in_manifest,
            qty_req_inners = NVL(qty_req_inners,0.0) + var_qty_req_inners,  -- 22235
            qty_pick_inners = NVL(qty_pick_inners,0.0) + var_qty_pick_inners,  -- 22235
            qty_ship_inners = NVL(qty_ship_inners,0.0) + var_qty_ship_inners,  -- 22235
            in_carton_inners = NVL(in_carton_inners,0.0) + var_in_carton_inners,  -- 22235
            in_manifest_inners = NVL(in_manifest_inners,0.0) + var_in_manifest_inners, -- 22235
            trf_weight_ship = NVL(trf_weight_ship,0.0) + NVL(var_trf_weight_ship,0.0),
            trf_wgt_ship_uom = var_trf_weight_ship_uom,
            update_row = 'T'
         WHERE     trf_number = var_trf_number
        AND     prd_lvl_child = var_prd_lvl_child
        AND     prd_lvl_master = 0
        AND     inner_pk_tech_key = var_inner_pk_tech_key
        AND     master_inner_key = 0;
    END;
*/
    -- if the shipment is by carton, create carton detail records
    IF var_trf_in_carton > 0 THEN
        SELECT count(*)
        INTO var_count
        FROM trfctdee
        WHERE trf_carton_key = var_trf_carton_key
        AND      prd_lvl_child = var_prd_lvl_child
        AND      prd_lvl_master = 0
        AND      trf_number = var_trf_number
        AND   inner_pk_tech_key = var_inner_pk_tech_key
        AND   master_inner_key = 0;
        IF var_count = 0 THEN
            var_trf_carton_seq := var_trf_carton_seq + 1;
        END IF;
        BEGIN
         INSERT INTO trfctdee
                (
                trf_carton_key,
                trf_seq_id,
                prd_lvl_child,
                prd_lvl_master,
                trf_number,
                trf_qty_ship,
                trf_carton_stat,
                trf_set_ind,
                inner_pk_tech_key,
                master_inner_key,
                entry_method,
                trf_ipid_conv,
                trf_cp_conv,
                trf_weight_ship,
                trf_weight_ship_uom,
                --begin retrofit
                mir_shp_loc_cost,  --013.01
                mir_rec_loc_cost,  --013.01
                --end retrofit
                qty_ship_inners, -- 22235
                weight_to_qty_ind
                )
            VALUES
                (
                var_trf_carton_key,
                var_trf_carton_seq,
                var_prd_lvl_child,
                0,
                var_trf_number,
                var_trf_in_carton,
                0,
                var_trf_set_ind,
                var_inner_pk_tech_key,
                0,
                var_entry_method,
                out_trf_ipid_conv,
                out_trf_cp_conv,
                var_carton_weight_ship,
                var_carton_weight_ship_uom,
                --begin retrofit
                var_ship_loc_cost,  --013.01
                var_rec_loc_cost,   --013.01
                --end retrofit
                var_in_carton_inners,  -- 22235
                out_weight_to_qty_ind
                );
        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
            IF NVL(var_carton_weight_ship,0) > 0 THEN
                SELECT trf_weight_ship_uom
                INTO   pre_trf_wgt_ship_uom
                FROM   trfctdee
                WHERE     trf_carton_key = var_trf_carton_key
                AND    prd_lvl_child = var_prd_lvl_child
                AND    prd_lvl_master = 0
                AND    trf_number = var_trf_number
                AND inner_pk_tech_key = var_inner_pk_tech_key
                AND master_inner_key = 0;
                IF pre_trf_wgt_ship_uom IS NOT NULL THEN
                    IF pre_trf_wgt_ship_uom <> var_carton_weight_ship_uom THEN
                        var_conv_weight :=  pmmuompk.convert_weight_uom(
                            var_carton_weight_ship, var_carton_weight_ship_uom,
                                pre_trf_wgt_ship_uom);
                        var_carton_weight_ship := var_conv_weight;
                        var_carton_weight_ship_uom := pre_trf_wgt_ship_uom;
                    END IF;
                END IF;
            END IF;
            UPDATE     /*+ INDEX(TRFCTDEE TRFCTDEEC2) */
                trfctdee
            SET    trf_qty_ship = NVL(trf_qty_ship,0.0) + var_trf_in_carton,
                qty_ship_inners = NVL(qty_ship_inners,0.0) + var_in_carton_inners,  -- 22235
                trf_weight_ship = NVL(trf_weight_ship,0.0) +
                                  NVL(var_carton_weight_ship,0.0),
                trf_weight_ship_uom = var_carton_weight_ship_uom
            WHERE     trf_carton_key = var_trf_carton_key
            AND    prd_lvl_child = var_prd_lvl_child
            AND    prd_lvl_master = 0
            AND    trf_number = var_trf_number
            AND inner_pk_tech_key = var_inner_pk_tech_key
            AND master_inner_key = 0;
        END;
        var_mfc_flag := 'T';
    END IF;

-- if the shipment is by manifest, create manifest product record
    IF var_trf_in_manifest > 0 THEN
        SELECT count(*)
        INTO  var_count
        FROM  trfmfpee
        WHERE trf_manifest_key = var_trf_manifest_key
        AND   prd_lvl_master = 0
        AND      prd_lvl_child = var_prd_lvl_child
        AND      trf_number = var_trf_number
           AND   inner_pk_tech_key = var_inner_pk_tech_key
           AND   master_inner_key = 0;
        IF var_count = 0 THEN
            var_trf_manifest_seq := var_trf_manifest_seq + 1;
        END IF;
        BEGIN
            INSERT INTO trfmfpee
                (
                trf_manifest_key,
                trf_seq_id,
                prd_lvl_child,
                prd_lvl_master,
                trf_number,
                trf_qty_ship,
                trf_manifest_sts,
                trf_set_ind,
                inner_pk_tech_key,
                master_inner_key,
                entry_method,
                trf_ipid_conv,
                trf_cp_conv,
                trf_weight_ship,
                trf_weight_ship_uom,
                --begin retrofit
                mir_shp_loc_cost,  --013.01
                mir_rec_loc_cost,  --013.01
                --end retrofit
                qty_ship_inners,  -- 22235
                weight_to_qty_ind
                )
            VALUES
                (
                var_trf_manifest_key,
                var_trf_manifest_seq,
                var_prd_lvl_child,
                0,
                var_trf_number,
                var_trf_in_manifest,
                0,
                var_trf_set_ind,
                var_inner_pk_tech_key,
                0,
                var_entry_method,
                out_trf_ipid_conv,
                out_trf_cp_conv,
                var_mft_weight_ship,
                var_mft_weight_ship_uom,
                --begin retrofit
                var_ship_loc_cost,  --013.01
                var_rec_loc_cost,   --013.01
                --end retrofit
                var_in_manifest_inners,   -- 22235
                out_weight_to_qty_ind
                );
        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
            IF NVL(var_mft_weight_ship,0) > 0 THEN
                SELECT trf_weight_ship_uom
                INTO   pre_trf_wgt_ship_uom
                FROM trfmfpee
                WHERE     trf_manifest_key = var_trf_manifest_key
                AND     prd_lvl_master = 0
                AND        prd_lvl_child = var_prd_lvl_child
                AND        trf_number = var_trf_number
                AND     inner_pk_tech_key = var_inner_pk_tech_key
                AND     master_inner_key = 0;
                IF pre_trf_wgt_ship_uom IS NOT NULL THEN
                    IF pre_trf_wgt_ship_uom <> var_mft_weight_ship_uom THEN
                        var_conv_weight :=  pmmuompk.convert_weight_uom(
                            var_mft_weight_ship, var_mft_weight_ship_uom,
                                pre_trf_wgt_ship_uom);
                        var_mft_weight_ship := var_conv_weight;
                        var_mft_weight_ship_uom := pre_trf_wgt_ship_uom;
                    END IF;
                END IF;
            END IF;
            UPDATE     /*+ INDEX(TRFMFPEE TRFMFPEEC2) */
                trfmfpee
            SET trf_qty_ship = NVL(trf_qty_ship,0.0) + var_trf_in_manifest,
                qty_ship_inners = NVL(qty_ship_inners,0.0) + var_in_manifest_inners,  --22235
                trf_weight_ship = NVL(trf_weight_ship,0.0) +
                                  NVL(var_mft_weight_ship,0.0),
                trf_weight_ship_uom = var_mft_weight_ship_uom
            WHERE     trf_manifest_key = var_trf_manifest_key
            AND     prd_lvl_master = 0
            AND        prd_lvl_child = var_prd_lvl_child
            AND        trf_number = var_trf_number
            AND     inner_pk_tech_key = var_inner_pk_tech_key
            AND     master_inner_key = 0;
        END ;

        var_mfp_flag := 'T';
    END IF;

-- save the master product prd_lvl_child for the master/component check
-- the master product prd_lvl_master must be zero, the component products of the master will have the
-- master product in the prd_lvl_master column
    IF var_trf_set_ind in (SET_MASTER, SET_SHIPPER) THEN
        pre_prd_lvl_master := var_prd_lvl_master;
        pre_trf_set_ind := var_trf_set_ind;
        pre_set_trf_number := var_trf_number;
        pre_tot_quantity := pre_tot_quantity + dti_rec.quantity;
        pre_trf_manifest_key := var_trf_manifest_key;
        pre_trf_carton_key := var_trf_carton_key;
        pre_trf_in_manifest := NVL(pre_trf_in_manifest,0) + var_trf_in_manifest;
        pre_trf_in_carton := NVL(pre_trf_in_carton,0) + var_trf_in_carton;
        pre_trf_in_transfer := NVL(pre_trf_in_transfer,0) + var_trf_qty_ship;
--    ELSE
--        pre_prd_lvl_master := 0;
--        pre_trf_set_ind := NULL;
--        pre_set_trf_number := 0;
--        pre_tot_quantity := 0;
--        pre_trf_manifest_key := 0;
--        pre_trf_carton_key := 0;
--        pre_trf_in_manifest := 0;
--        pre_trf_in_carton := 0;
--        pre_trf_in_transfer := 0;
    END IF;

     pre_cross_dock_loc := dti_rec.cross_dock_loc;
    pre_carrier_name := dti_rec.carrier_name;
    pre_trf_reason_code := dti_rec.trf_reason_code;
    pre_trf_source_id := dti_rec.trf_source_id;
    pre_prd_upc := dti_rec.prd_upc;
    pre_inner_pack_id := dti_rec.inner_pack_id;
    pre_trf_number := var_trf_number;

END validate_03_for_false;
-- ------------------------------------------------------------------------
-- ------------------------------------------------------------------------
PROCEDURE validate_03_for_true
IS
BEGIN

-- This procedures validates and processes the action_code '03' (shipping) and Jda_origin = 'T' record.
-- Jda_origin = 'T' means that the transfer does exists in the PMM system. Cartons and/or manifests
-- still needs to be created and shipped.

    var_error_code := 0;
-- date created must be entered
    IF dti_rec.date_created IS NULL THEN
        var_error_code := 147;
        RAISE EXP_VALIDATION_FAILED;
    END IF;

    IF dti_rec.trf_number IS NULL THEN
        var_error_code := 1;
        RAISE EXP_VALIDATION_FAILED;
    ELSE
        IF pre_trf_number IS NULL OR pre_trf_number <> dti_rec.trf_number THEN
            BEGIN
            -- Ashok - Added Hints
            -- Log 30664 - Replace the query to use the TRFHDGWW
            SELECT     /*+ INDEX(TRFHDGWW TRFHDGWWP1)
                        INDEX(ORGMSTEE ORGMSTEEP1)
                    */
                    trf_number,
                    trf_ship_loc,
                    trf_rec_loc,
                    trf_type_id,
                    trf_prior_id,
--                    trf_car_id,                -- 26821
                    trf_status,
                    org_is_store
            INTO    var_trf_number,
                    var_trf_ship_loc,
                    var_trf_rec_loc,
                    var_trf_type_id,
                    var_trf_reason_code,
--                    var_trf_car_id,            -- 26821
                    var_trf_header_status,
                    var_org_is_store_ship
            FROM     trfhdgww, orgmstee
            WHERE     trf_number = dti_rec.trf_number
            AND     org_lvl_child = trf_ship_loc;
            EXCEPTION
            WHEN NO_DATA_FOUND THEN
                var_error_code := 1;
                RAISE EXP_VALIDATION_FAILED;
            END;
        END IF;
    END IF;

    -- validate the transfer header status 4=shipped, 5=complete, 6=received with discrepancy
    IF var_trf_header_status IN (4, 5, 6) THEN
        var_error_code := 207;
        RAISE EXP_VALIDATION_FAILED;
    END IF;


    -- shipping location must be entered
    -- get the shipping location tech key only if the previous shipping location is null within the same action
    IF dti_rec.from_loc IS NULL THEN
        var_from_loc_child := var_trf_ship_loc;
        BEGIN
            SELECT org_lvl_number
            INTO dti_rec.from_loc
            FROM orgmstee
            WHERE org_lvl_child = var_from_loc_child;
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                var_error_code := 3;
                RAISE EXP_VALIDATION_FAILED;
        END;
    END IF;
    IF pre_from_loc IS NULL OR pre_from_loc <> dti_rec.from_loc THEN
        var_error_code := 0;
        get_from_loc_child;
        IF var_error_code > 0 THEN
            RAISE EXP_VALIDATION_FAILED;
        ELSE
            IF var_from_loc_child <> var_trf_ship_loc THEN
                var_error_code := 3;
                RAISE EXP_VALIDATION_FAILED;
            END IF;
        END IF;
    ELSE
        IF var_from_loc_child <> var_trf_ship_loc THEN
            var_error_code := 3;
            RAISE EXP_VALIDATION_FAILED;
        END IF;
    END IF;

    IF var_org_is_store_ship = 'F' THEN
        IF dti_rec.inner_pack_id IS NULL THEN
            var_error_code := 999;
            RAISE EXP_VALIDATION_FAILED;
        END IF;
    END IF;
    -- receiving location must be entered
    -- get the receiving location tech key only if the previous receiving location is null within the same action
    IF dti_rec.to_loc IS NULL THEN
        var_to_loc_child := var_trf_rec_loc;
        BEGIN
            SELECT org_lvl_number
            INTO dti_rec.to_loc
            FROM orgmstee
            WHERE org_lvl_child = var_to_loc_child;
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                var_error_code := 3;
                RAISE EXP_VALIDATION_FAILED;
        END;
    END IF;
    IF pre_to_loc IS NULL OR pre_to_loc <> dti_rec.to_loc THEN
        var_error_code := 0;
                   var_date_created := dti_rec.date_created;
        get_to_loc_child;
        IF var_error_code > 0 THEN
            RAISE EXP_VALIDATION_FAILED;
        ELSE
            IF var_to_loc_child <> var_trf_rec_loc THEN
                var_error_code := 4;
                RAISE EXP_VALIDATION_FAILED;
            END IF;
        END IF;
    ELSE
        IF var_to_loc_child <> var_trf_rec_loc THEN
            var_error_code := 4;
            RAISE EXP_VALIDATION_FAILED;
        END IF;
    END IF;


    -- these two fields will be null the first time after the location breaks
    IF pre_from_loc IS NULL OR
       pre_from_loc <> dti_rec.from_loc OR
       pre_to_loc IS NULL OR
       pre_to_loc <> dti_rec.to_loc THEN

        -- get the transfer type for the shipping/receiving location
        var_trf_type_id := NULL;
        trfgettyp (var_from_loc_child, var_to_loc_child, var_trf_type_id);
        IF var_trf_type_id IS NULL THEN
            var_error_code := 21;
            RAISE EXP_VALIDATION_FAILED;
        END IF;

        -- set the index to the transfer type value and get any additional default values from the transfer type table
        var_idx := trfdefpk.get_typ_idx (var_trf_type_id);
        var_trf_aprov_req := trfdefpk.arr_typ (var_idx).trf_aprov_req;
        var_trf_ship_mnfst := trfdefpk.arr_typ (var_idx).trf_ship_mnfst;
          var_cross_dock_reason := trfdefpk.arr_typ (var_idx).cross_dock_reason;
          var_cross_dock_reason := lpad(TO_NUMBER(var_cross_dock_reason),2,'0');  -- 26232

    END IF;

    -- check if the approval is a required step for the specific transfer type
    IF var_trf_header_status = 0 THEN
        IF var_trf_aprov_req = 'T' THEN
            var_error_code := 207;
            RAISE EXP_VALIDATION_FAILED;
        END IF;
    END IF;

    -- quantity must be greater than zero
    IF NVL(dti_rec.quantity,0.0) < 0.0 THEN
        var_error_code := 6;
        RAISE EXP_VALIDATION_FAILED;
    END IF;

-- product must be entered
-- get the product tech key if the previous product is different
    var_entry_method := 1;
    IF dti_rec.inner_pack_id IS NOT NULL THEN
        var_entry_method := 3;
        var_error_code := 0;
        IF pre_inner_pack_id IS NULL OR
            pre_inner_pack_id <> dti_rec.inner_pack_id THEN
            get_inner_pk_key;
            IF var_error_code > 0 THEN
                RAISE EXP_VALIDATION_FAILED;
            END IF;
        END IF;
        -- Log 25843
--        IF var_org_is_store_ship = 'T' THEN
--            IF (var_loose_pack_flag = 'T' OR var_pack_lvl_parent IS NOT NULL) THEN
--                NULL;
--            ELSE
--                var_error_code := 0;
--                get_loose_inner; -- this gets the var_loose_inner_pack_id
--                IF var_error_code > 0 THEN
--                    RAISE EXP_VALIDATION_FAILED;
--                END IF;
--                dti_rec.inner_pack_id := var_loose_inner_pack_id;
--            END IF;
--        END IF;

        dti_rec.prd_lvl_number := save_prd_lvl_number;
        var_inner_pk_tech_key := save_inner_pk_tech_key;
    ELSE
        var_inner_pk_tech_key := 0;     -- 23505
    END IF;

    IF dti_rec.inner_pack_id IS NULL THEN
        IF dti_rec.prd_upc IS NOT NULL THEN
            var_error_code := 0;
            IF pre_prd_upc IS NULL OR dti_rec.prd_upc <> pre_prd_upc THEN
                get_vpc_upc;
                IF var_error_code > 0 THEN
                    RAISE EXP_VALIDATION_FAILED;
                END IF;
            END IF;
            IF var_entry_method = 5 THEN
                var_inner_pk_tech_key := save_inner_pk_tech_key;
                dti_rec.inner_pack_id := save_inner_pack_id;
            ELSE
                var_inner_pk_tech_key := 0;
            END IF;
            dti_rec.prd_lvl_number := save_prd_lvl_number;
        END IF;
    END IF;

    -- Log 25843
--     IF var_org_is_store_ship = 'T' THEN
--        IF dti_rec.inner_pack_id IS NULL THEN
--            dti_rec.inner_pack_id := var_loose_inner_pack_id;
--        END IF;
--    END IF;

    IF var_entry_method in (3,5) THEN    -- 22235
        IF NVL(dti_rec.trf_qty_flag,'S') = 'S' THEN
            var_error_code := 811;
            RAISE EXP_VALIDATION_FAILED;
        END IF;
    ELSE
        IF NVL(dti_rec.trf_qty_flag,'S') IN ('P', 'C') THEN
            var_error_code := 812;
            RAISE EXP_VALIDATION_FAILED;
        END IF;
    END IF;

--  16752 Perishables enhancement above
    IF dti_rec.prd_lvl_number IS NULL THEN
        var_error_code := 5;
        RAISE EXP_VALIDATION_FAILED;
     ELSE
          var_add_new_product := FALSE;
        var_prd_lvl_child := 0;
        var_prd_lvl_parent := 0;
        var_prd_lvl_master := 0;
        var_error_code := 0;
        var_prd_lvl_number := dti_rec.prd_lvl_number;
        var_action_code := dti_rec.action_code;
        var_jda_origin := dti_rec.jda_origin;
        get_prd_lvl_child;
        IF var_error_code > 0 THEN
            RAISE EXP_VALIDATION_FAILED;
        END IF;

        IF pre_prd_lvl_number IS NULL
           OR (pre_prd_lvl_number <> dti_rec.prd_lvl_number)
            OR (pre_inner_pk_tech_key <> var_inner_pk_tech_key)
           OR (pre_trf_number IS NULL OR pre_trf_number <> dti_rec.trf_number) THEN     -- 24441
            IF NVL(pre_prd_lvl_master,0) > 0 THEN
                create_comp;
            END IF;
            pre_trf_wgt_ship_uom := NULL;
            BEGIN
            -- Ashok - Added hints
                -- Log 30664 - Replace the query to use the TRFDTGWW
                SELECT     /*+ INDEX(TRFDTGWW TRFDTGWWP1) */
                        trf_status, weight_per_sell_unit, weight_uom,
                        trf_ipid_conv, trf_cp_conv, entry_method,
                        weight_to_qty_ind, prd_sll_uom, ROWID
                INTO     var_trf_detail_status, out_weight_per_sell_unit,
                        out_weight_uom, out_trf_ipid_conv, out_trf_cp_conv,
                        save_entry_method, out_weight_to_qty_ind,
                        out_prd_sll_uom, var_rowid_trf
                FROM     trfdtgww
                WHERE     trf_number = dti_rec.trf_number
                AND     prd_lvl_child = var_prd_lvl_child
                AND     prd_lvl_master = 0
                AND     inner_pk_tech_key = var_inner_pk_tech_key
                AND     master_inner_key = 0;
            EXCEPTION WHEN NO_DATA_FOUND THEN
                var_error_code := 5;
                RAISE EXP_VALIDATION_FAILED;
            END;
        END IF;
    END IF;

-- 27057
    trfgetavg (var_prd_lvl_child, var_from_loc_child,
        var_inner_pk_tech_key, var_vpc_prd_tech_key,
        out_on_hand_sell_units, out_on_hand_eaches,
        out_weight_per_sell_unit, out_weight_uom,
        out_prd_sll_uom, out_trf_ipid_conv,
        out_trf_cp_conv, out_weight_to_qty_ind);

    IF out_weight_to_qty_ind = 'T' THEN  -- 22235
        out_weight_per_sell_unit := 1;
        out_weight_uom := out_prd_sll_uom;
    END IF;

-- 27057

--    IF var_entry_method <> save_entry_method THEN    -- 22235
--            var_error_code := 998;
--            RAISE EXP_VALIDATION_FAILED;
--      END IF;

    IF var_trf_detail_status IN (4, 5, 6) THEN
        var_error_code := 207;
        RAISE EXP_VALIDATION_FAILED;
    END IF;

    IF var_trf_detail_status = 7 THEN
        IF dti_rec.carton_number IS NULL AND dti_rec.mnfst_number IS NULL THEN
            var_error_code := 207;
            RAISE EXP_VALIDATION_FAILED;
        END IF;
    END IF;


    -- if the carrier is not entered use the default carrier id
    IF dti_rec.carrier_name IS NULL THEN
        var_trf_car_id := var_default_car_id;
    ELSE
        IF pre_carrier_name IS NULL OR pre_carrier_name <> dti_rec.carrier_name THEN
            var_trf_car_id := 0;
            SELECT MIN(trf_car_id)
            INTO   var_trf_car_id
            FROM   trfcaree
            WHERE     trf_car_desc = dti_rec.carrier_name;
            IF NVL(var_trf_car_id, 0) = 0 THEN
                var_error_code := 148;
                RAISE EXP_VALIDATION_FAILED;
            END IF;
        END IF;
    END IF;


    -- validate the manifest number if entered, only if different from
    -- the previous manifest within the same action code
    -- 23367 Added checks of the location breaks
    IF dti_rec.mnfst_number IS NOT NULL THEN
        IF pre_manifest_number IS NULL
            OR pre_manifest_number <> dti_rec.mnfst_number
            OR pre_from_loc IS NULL
            OR pre_from_loc <> dti_rec.from_loc
            OR pre_to_loc IS NULL
            OR pre_to_loc <> dti_rec.to_loc THEN

            -- Ashok - Added hints and exception. Used Oracle Seq.
            BEGIN

            SELECT     /*+ INDEX(TRFMFHEE TRFMFHEEI2) */
                1
            INTO     var_count
            FROM     trfmfhee
            WHERE     trf_manifest_id = dti_rec.mnfst_number
            AND        trf_ship_loc = var_from_loc_child
            AND        trf_rec_loc = var_to_loc_child
            AND        ROWNUM = 1;

            var_error_code := 205;
            RAISE EXP_VALIDATION_FAILED;

            EXCEPTION
            WHEN NO_DATA_FOUND THEN
                SELECT     trf_manifest_key.NEXTVAL
                INTO    var_trf_manifest_key
                FROM     DUAL;

                INSERT INTO trfmfhee
                      (
                    trf_manifest_key,
                    trf_manifest_id,
                    trf_ship_loc,
                    trf_rec_loc,
                    trf_create_date,
                    trf_ship_date,
                    trf_rec_date,
                    trf_close_date,
                    trf_car_id,
                    trf_manifest_sts
                    )
                     VALUES
                    (
                    var_trf_manifest_key,
                    dti_rec.mnfst_number,
                    var_from_loc_child,
                    var_to_loc_child,
                    dti_rec.date_created,
                    dti_rec.date_created,
                    NULL,
                    NULL,
                    var_trf_car_id,
                    0
                    );
                    var_trf_manifest_seq := 0;
                    var_manifest_shipping := TRUE;
            END;
        END IF;
    END IF;

    -- validate the carton number if entered, but only if different from
    -- the previous carton number within the same action
    -- 23093 Added checks of the locations breaks
    IF dti_rec.carton_number IS NOT NULL THEN
        IF pre_carton_number IS NULL
            OR pre_carton_number <> dti_rec.carton_number
            OR pre_from_loc IS NULL
            OR pre_from_loc <> dti_rec.from_loc
            OR pre_to_loc IS NULL
            OR pre_to_loc <> dti_rec.to_loc THEN

            BEGIN
            -- Added hints and exception. Used Oracle Seq.
            SELECT    /*+ INDEX(TRFCTHEE TRFCTHEEI2) */
                1
            INTO     var_count
            FROM     trfcthee
            WHERE    trf_carton_id = dti_rec.carton_number
            AND        trf_ship_loc = var_from_loc_child
            AND        trf_rec_loc = var_to_loc_child
            AND     ROWNUM = 1;

            var_error_code := 204;
            RAISE EXP_VALIDATION_FAILED;

            EXCEPTION
            WHEN NO_DATA_FOUND THEN

                SELECT     trf_carton_key.NEXTVAL
                INTO     var_trf_carton_key
                FROM    DUAL;

                INSERT INTO trfcthee
                     (
                    trf_carton_key,
                    trf_carton_id,
                    trf_ship_loc,
                    trf_rec_loc,
                    trf_create_date,
                    trf_ship_date,
                    trf_rec_date,
                    trf_close_date,
                    trf_car_id,
                    trf_carton_stat,
                    trf_track_num,
                    trf_carton_wgt
                    )
                       VALUES
                    (
                    var_trf_carton_key,
                    dti_rec.carton_number,
                       var_from_loc_child,
                    var_to_loc_child,
                       dti_rec.date_created,
                    dti_rec.date_created,
                       NULL,
                    NULL,
                    var_trf_car_id,
                       0,
                    dti_rec.trf_track_num,
                       dti_rec.trf_carton_wgt
                    );

                var_trf_carton_seq := 0;
                var_carton_shipping := TRUE;
                IF var_manifest_shipping = TRUE THEN
                    BEGIN
                          INSERT INTO trfmfcee
                               (
                            trf_manifest_key,
                            trf_carton_key,
                            trf_manifest_sts
                            )
                               VALUES
                            (
                            var_trf_manifest_key,
                            var_trf_carton_key,
                            0
                            );
                            var_mfc_flag := 'T';
                    EXCEPTION WHEN DUP_VAL_ON_INDEX THEN
                        var_error_code := 12;
                        RAISE EXP_VALIDATION_FAILED;
                    END;
                END IF;
            END;
        END IF;
    END IF;
-- 16752 based on the carton/manifest values set the fields accordingly 16752
-- 16752 based on the flag convert the quantity to sell units.
-- 16752 'P' = number of inner packs, 'C' = number of case packs, 'S' = sell units
    IF dti_rec.trf_qty_flag = 'P' THEN  -- 22235
        var_qty_ship_inners :=  dti_rec.quantity;
        dti_rec.quantity := dti_rec.quantity * out_trf_ipid_conv;
    ELSE
        IF dti_rec.trf_qty_flag = 'C' THEN
            var_qty_ship_inners := dti_rec.quantity * out_trf_cp_conv;
            dti_rec.quantity := dti_rec.quantity
                                * out_trf_ipid_conv * out_trf_cp_conv;
        ELSE
            var_qty_ship_inners := dti_rec.quantity;
        END IF;
    END IF;

    IF out_weight_to_qty_ind = 'T' THEN -- 22235
        IF dti_rec.trf_qty_flag IN ('P', 'C') THEN -- import record is by innerpack
            IF dti_rec.trf_weight IS NOT NULL THEN
                IF dti_rec.trf_weight_uom IS NOT NULL THEN
                    IF dti_rec.trf_weight_uom <> out_prd_sll_uom THEN
                        var_convert_weight :=
                        pmmuompk.convert_weight_uom (dti_rec.trf_weight,
                                             dti_rec.trf_weight_uom,
                                             out_prd_sll_uom);
                        dti_rec.quantity := var_convert_weight;
                    ELSE
                        dti_rec.quantity := dti_rec.trf_weight;
                    END IF;
                ELSE -- weight is given, but no weight uom is given
                    dti_rec.quantity := dti_rec.trf_weight;
                    dti_rec.trf_weight_uom := out_prd_sll_uom;
                END IF;
            ELSE -- no weight is given
                 dti_rec.trf_weight := out_weight_per_sell_unit * dti_rec.quantity;
                dti_rec.trf_weight_uom := out_weight_uom;
            END IF;
        ELSE -- import record is by product
             dti_rec.trf_weight := dti_rec.quantity;
            dti_rec.trf_weight_uom := out_weight_uom;
          END IF;
    ELSE -- it is not a weight_to_qty product
        IF dti_rec.trf_weight IS NULL THEN
               dti_rec.trf_weight := out_weight_per_sell_unit * dti_rec.quantity;
             dti_rec.trf_weight_uom := out_weight_uom;
        END IF;
    END IF;  -- 22235

-- 26256
-- initialize the new columns
    var_create_carton_detail := 'F';
    var_create_manifest_detail := 'F';

-- based on the carton/manifest values set the fields accordingly
    IF dti_rec.carton_number IS NOT NULL THEN
        var_trf_in_carton := dti_rec.quantity;
        var_trf_qty_ship := 0;
        var_trf_in_manifest := 0;
        var_in_carton_inners := var_qty_ship_inners;   -- 22235
        var_in_manifest_inners := 0;                    -- 22235
        var_qty_ship_inners := 0;                        -- 22235
        var_carton_weight_ship := dti_rec.trf_weight;  -- 22721
        var_carton_weight_ship_uom := dti_rec.trf_weight_uom;  -- 22721
        var_mft_weight_ship := NULL;  -- 22721
        var_mft_weight_ship_uom := NULL;  -- 2272
        var_trf_weight_ship := NULL;  -- 22721
        var_trf_weight_ship_uom := NULL;  -- 22721
        var_create_carton_detail := 'T';        -- 26256
--        var_trf_status := 7;
    ELSE
        IF dti_rec.mnfst_number IS NOT NULL THEN
            var_trf_in_manifest := dti_rec.quantity;
            var_trf_qty_ship := 0;
            var_trf_in_carton := 0;
            var_in_manifest_inners := var_qty_ship_inners; -- 22235
            var_qty_ship_inners := 0;  -- 22235
            var_in_carton_inners := 0;  -- 22235
            var_mft_weight_ship := dti_rec.trf_weight;  -- 22721
            var_mft_weight_ship_uom := dti_rec.trf_weight_uom;  -- 22721
            var_carton_weight_ship := NULL;  -- 22721
            var_carton_weight_ship_uom := NULL;  -- 22721
            var_trf_weight_ship := NULL;  -- 22721
            var_trf_weight_ship_uom := NULL;  -- 22721
            var_create_manifest_detail := 'T';        -- 26256
--            var_trf_status := 7;
        ELSE
            var_trf_qty_ship := dti_rec.quantity;
            var_trf_in_manifest := 0;
            var_trf_in_carton := 0;
            var_in_manifest_inners := 0;   -- 22235
            var_in_carton_inners := 0;     -- 22235
            var_trf_weight_ship := dti_rec.trf_weight;  -- 22721
            var_trf_weight_ship_uom := dti_rec.trf_weight_uom;  -- 22721
            var_carton_weight_ship := NULL;  -- 22721
            var_carton_weight_ship_uom := NULL;  -- 22721
            var_mft_weight_ship := NULL;  -- 22721
            var_mft_weight_ship_uom := NULL;  -- 22721
--            var_trf_status := 0;
        END IF;
    END IF;

-- 22721
    IF var_trf_in_carton = 0 AND var_trf_in_manifest = 0 THEN
        IF NVL(var_trf_weight_ship,0) > 0 THEN
            IF pre_trf_wgt_ship_uom IS NOT NULL THEN
                IF pre_trf_wgt_ship_uom <> var_trf_weight_ship_uom THEN
                    var_conv_weight :=  pmmuompk.convert_weight_uom(
                        var_trf_weight_ship, var_trf_weight_ship_uom,
                        pre_trf_wgt_ship_uom);
                    var_trf_weight_ship := var_conv_weight;
                    var_trf_weight_ship_uom := pre_trf_wgt_ship_uom;
                END IF;
            END IF;
        END IF;
    END IF;

-- update the transfer detail record
    -- Added Hints
    -- Log 30664 - Replace the query to use the TRFDTGWW
    update_trfdtgww;       -- 377868
--    UPDATE     /*+ ROWID(TRFDTGWW) */
--        trfdtgww
--    SET    trf_qty_ship = NVL(trf_qty_ship,0) + var_trf_qty_ship,
--        trf_weight_ship = NVL(trf_weight_ship,0.0) + NVL(var_trf_weight_ship,0),
--        trf_wgt_ship_uom = var_trf_weight_ship_uom,
--        trf_in_carton = NVL(trf_in_carton,0) + var_trf_in_carton,
--        trf_in_manifest = NVL(trf_in_manifest,0) + var_trf_in_manifest,
--        qty_ship_inners = NVL(qty_ship_inners,0.0) + var_qty_ship_inners,  -- 22235
--        in_manifest_inners = NVL(in_manifest_inners,0.0) +
--                                var_in_manifest_inners,                -- 22235
--        in_carton_inners = NVL(in_carton_inners,0.0) +
--                                var_in_carton_inners,                -- 22235
--        weight_to_qty_ind = out_weight_to_qty_ind,            -- 27057
--        update_row = 'T'                    -- 31157--
--    WHERE     ROWID = var_ROWID_trf;

    pre_trf_wgt_ship_uom := var_trf_weight_ship_uom;  -- 22271

-- if the shipment is by carton, create carton detail records
-- 26256 check the new flag
--     IF var_trf_in_carton > 0 THEN
    IF var_create_carton_detail = 'T' THEN
        SELECT count(*)
        INTO var_count
        FROM trfctdee
        WHERE    trf_carton_key = var_trf_carton_key
        AND     prd_lvl_child = var_prd_lvl_child
        AND        prd_lvl_master = 0
        AND        trf_number = var_trf_number
           AND     inner_pk_tech_key = var_inner_pk_tech_key
           AND     master_inner_key = 0;
        IF var_count = 0 THEN
             var_trf_carton_seq := var_trf_carton_seq + 1;
        END IF;
        BEGIN
            INSERT INTO trfctdee
                (
                trf_carton_key,
                trf_seq_id,
                prd_lvl_child,
                prd_lvl_master,
                trf_number,
                trf_qty_ship,
                trf_carton_stat,
                trf_set_ind,
                inner_pk_tech_key,
                master_inner_key,
                entry_method,
                trf_ipid_conv,
                trf_cp_conv,
                trf_weight_ship,
                trf_weight_ship_uom,
                --begin retrofit
                mir_shp_loc_cost,  --013.01
                mir_rec_loc_cost,  --013.01
                --end retrofit
                qty_ship_inners,					-- 22235
                weight_to_qty_ind
                )
            VALUES
                (
                var_trf_carton_key,
                var_trf_carton_seq,
                var_prd_lvl_child,
                0,
                var_trf_number,
                var_trf_in_carton,
                0,
                var_trf_set_ind,
                var_inner_pk_tech_key,
                0,
                var_entry_method,
                out_trf_ipid_conv,
                out_trf_cp_conv,
                var_carton_weight_ship,
                var_carton_weight_ship_uom,
                --begin retrofit
                var_ship_loc_cost,  --013.01
                var_rec_loc_cost,   --013.01
                --end retrofit
                var_in_carton_inners,            -- 22235
                out_weight_to_qty_ind
                );
        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
            IF NVL(var_carton_weight_ship,0) > 0 THEN
                SELECT trf_weight_ship_uom
                INTO   pre_trf_wgt_ship_uom
                FROM   trfctdee
                WHERE    trf_carton_key = var_trf_carton_key
                AND     prd_lvl_child = var_prd_lvl_child
                AND        prd_lvl_master = 0
                AND        trf_number = var_trf_number
                AND     inner_pk_tech_key = var_inner_pk_tech_key
                AND     master_inner_key = 0;
                IF pre_trf_wgt_ship_uom IS NOT NULL THEN
                    IF pre_trf_wgt_ship_uom <> var_carton_weight_ship_uom THEN
                        var_conv_weight :=  pmmuompk.convert_weight_uom(
                            var_carton_weight_ship, var_carton_weight_ship_uom,
                                pre_trf_wgt_ship_uom);
                        var_carton_weight_ship := var_conv_weight;
                        var_carton_weight_ship_uom := pre_trf_wgt_ship_uom;
                    END IF;
                END IF;
            END IF;
            UPDATE     /*+ INDEX(TRFCTDEE TRFCTDEEC2) */
                trfctdee
            SET     trf_qty_ship = NVL(trf_qty_ship,0.0) + var_trf_in_carton,
                    trf_weight_ship = NVL(trf_weight_ship,0.0) +
                                      NVL(var_carton_weight_ship,0),
                    trf_weight_ship_uom = var_carton_weight_ship_uom,
                    qty_ship_inners = NVL(qty_ship_inners,0.0) +
                                        var_in_carton_inners            -- 22235
            WHERE    trf_carton_key = var_trf_carton_key
            AND     prd_lvl_child = var_prd_lvl_child
            AND        prd_lvl_master = 0
            AND        trf_number = var_trf_number
            AND     inner_pk_tech_key = var_inner_pk_tech_key
            AND     master_inner_key = 0;
        END;

        var_mfc_flag := 'T';
    END IF;

    -- if the shipment is by manifest, create manifest product record
-- 26256 Check the new flag
--    IF var_trf_in_manifest > 0 THEN
    IF var_create_manifest_detail = 'T' THEN
        SELECT count(*)
        INTO    var_count
        FROM    trfmfpee
        WHERE     trf_manifest_key = var_trf_manifest_key
        AND     prd_lvl_master = 0
        AND        prd_lvl_child = var_prd_lvl_child
        AND        trf_number = var_trf_number
           AND     inner_pk_tech_key = var_inner_pk_tech_key
           AND     master_inner_key = 0;
        IF var_count = 0 THEN
            var_trf_manifest_seq := var_trf_manifest_seq + 1;
        END IF;
        BEGIN
            INSERT INTO trfmfpee
                (
                trf_manifest_key,
                trf_seq_id,
                prd_lvl_child,
                prd_lvl_master,
                trf_number,
                trf_qty_ship,
                trf_manifest_sts,
                trf_set_ind,
                inner_pk_tech_key,
                master_inner_key,
                entry_method,
                trf_ipid_conv,
                trf_cp_conv,
                trf_weight_ship,
                trf_weight_ship_uom,
                --begin retrofit
                mir_shp_loc_cost,  --013.01
                mir_rec_loc_cost,  --013.01
                --end retrofit
                qty_ship_inners,				-- 22235
                weight_to_qty_ind
                )
            VALUES
                (
                var_trf_manifest_key,
                var_trf_manifest_seq,
                var_prd_lvl_child,
                0,
                var_trf_number,
                var_trf_in_manifest,
                0,
                var_trf_set_ind,
                var_inner_pk_tech_key,
                0,
                var_entry_method,
                out_trf_ipid_conv,
                out_trf_cp_conv,
                var_mft_weight_ship,
                var_mft_weight_ship_uom,
                --begin retrofit
                var_ship_loc_cost, --013.01
                var_rec_loc_cost,  --013.01
                --end retrofit
                var_in_manifest_inners,			-- 22235
                out_weight_to_qty_ind
                );
        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
            IF NVL(var_mft_weight_ship,0) > 0 THEN
                SELECT trf_weight_ship_uom
                INTO   pre_trf_wgt_ship_uom
                FROM trfmfpee
                WHERE     trf_manifest_key = var_trf_manifest_key
                AND     prd_lvl_master = 0
                AND        prd_lvl_child = var_prd_lvl_child
                AND        trf_number = var_trf_number
                AND     inner_pk_tech_key = var_inner_pk_tech_key
                AND     master_inner_key = 0;
                IF pre_trf_wgt_ship_uom IS NOT NULL THEN
                    IF pre_trf_wgt_ship_uom <> var_mft_weight_ship_uom THEN
                        var_conv_weight :=  pmmuompk.convert_weight_uom(
                            var_mft_weight_ship, var_mft_weight_ship_uom,
                                pre_trf_wgt_ship_uom);
                        var_mft_weight_ship := var_conv_weight;
                        var_mft_weight_ship_uom := pre_trf_wgt_ship_uom;
                    END IF;
                END IF;
            END IF;
            UPDATE     /*+ INDEX(TRFMFPEE TRFMFPEEC2) */
                trfmfpee
            SET     trf_qty_ship = NVL(trf_qty_ship,0.0) + var_trf_in_manifest,
                    trf_weight_ship = NVL(trf_weight_ship,0.0) +
                                      NVL(var_mft_weight_ship,0.0),
                    trf_weight_ship_uom = var_mft_weight_ship_uom,
                    qty_ship_inners = NVL(qty_ship_inners,0.0) +
                                var_in_manifest_inners                -- 22235
            WHERE     trf_manifest_key = var_trf_manifest_key
            AND     prd_lvl_master = 0
            AND        prd_lvl_child = var_prd_lvl_child
            AND        trf_number = var_trf_number
            AND     inner_pk_tech_key = var_inner_pk_tech_key
            AND     master_inner_key = 0;
        END;

        var_mfp_flag := 'T';
    END IF;

-- save the master product prd_lvl_child for the master/component check
-- the master product prd_lvl_master must be zero, the component products of the master will have the
-- master product in the prd_lvl_master column
    IF var_trf_set_ind in (SET_MASTER, SET_SHIPPER) THEN
        pre_prd_lvl_master := var_prd_lvl_master;
        pre_set_trf_number := var_trf_number;
        pre_trf_set_ind := var_trf_set_ind;
        pre_tot_quantity := pre_tot_quantity + dti_rec.quantity;
        pre_trf_manifest_key := var_trf_manifest_key;
        pre_trf_carton_key := var_trf_carton_key;
-- 28552
        pre_trf_in_manifest := NVL(pre_trf_in_manifest,0) + var_trf_in_manifest;
        pre_trf_in_carton := NVL(pre_trf_in_carton,0) + var_trf_in_carton;
        pre_trf_in_transfer := NVL(pre_trf_in_transfer,0) + var_trf_qty_ship;
--
--        pre_trf_in_manifest := var_trf_in_manifest;
--        pre_trf_in_carton := var_trf_in_carton;
--        pre_trf_in_transfer := var_trf_qty_ship;
-- 28552 end
--    ELSE
--        pre_prd_lvl_master := 0;
--        pre_set_trf_number := var_trf_number;
--        pre_trf_set_ind := NULL;
--        pre_tot_quantity := 0;
--        pre_trf_manifest_key := 0;
--        pre_trf_carton_key := 0;
--        pre_trf_in_manifest := 0;
--        pre_trf_in_carton := 0;
--        pre_trf_in_transfer := 0;
    END IF;

    pre_carrier_name := dti_rec.carrier_name;
    pre_trf_reason_code := var_trf_reason_code;
    pre_prd_upc := dti_rec.prd_upc;
    pre_inner_pack_id := dti_rec.inner_pack_id;


END validate_03_for_true;
-- ------------------------------------------------------------------------
-- ------------------------------------------------------------------------
-- The next three procedures are executed to add a new product to a shipment.  The ship
-- quantity will be defaulted to ZERO.
-- This function only valid if the transfer control "Allow Additional Product on Import" is
-- set to true.
-- ------------------------------------------------------------------------
-- ------------------------------------------------------------------------
-- ------------------------------------------------------------------------
-- added Pragma autonomous transaction 377868
PROCEDURE add_at_receiving_trf
IS
PRAGMA AUTONOMOUS_TRANSACTION;

BEGIN
    BEGIN
        -- Log 30664 - Replace the query to use the TRFDTGWW
        INSERT INTO trfdtgww
            (
            trf_number,
            prd_lvl_child,
            prd_lvl_master,
            trf_shp_loc,
            trf_rec_loc,
            trf_qty_req,
            trf_qty_pick,
            trf_qty_ship,
            trf_in_carton,
            trf_in_manifest,
            trf_shp_carton,
            trf_shp_manifest,
            trf_status,
            trf_ref_number,
            trf_source_id,
            trf_type_id,
            trf_ship_date,
            tdrc_tech_key,
            trf_discrepancy_ref,
            trf_set_ind,
            prd_upc,
            inner_pk_tech_key,
            master_inner_key,
            entry_method,
            on_hand_sell_units,
            on_hand_eaches,
            weight_per_sell_unit,
            weight_uom,
            prd_sll_uom,
            trf_ipid_conv,
            trf_cp_conv,
            trf_weight_rec,
            trf_wgt_rec_uom,
            --begin retrofit (05/18/2010 - WILDGEN Added)
            mir_shp_loc_cost,  --013.01
            mir_rec_loc_cost,  --013.01
            --end retrofit
            qty_req_inners,
            qty_pick_inners,
            in_carton_inners,
            in_manifest_inners,
            shp_carton_inners,
            shp_manifest_inners,
            weight_to_qty_ind
            )
        VALUES
            (
            var_trf_number,
            var_prd_lvl_child,
            0,
            var_from_loc_child,
            var_to_loc_child,
            0, -- dti_rec.quantity, 23979
            0, -- dti_rec.quantity,    23979        -- 22235 pick needs to be same as req
            0,
            0,
            0,
            0,
            0,
            var_add_status,
            dti_rec.reference,
            7,
            var_trf_type_id,
            dti_rec.date_created,
            var_tdrc_tech_key,
            dti_rec.trf_discrepancy_ref,
            NULL,
            var_prd_upc,
            var_inner_pk_tech_key,
            0,
            var_entry_method,
            out_on_hand_sell_units,
            out_on_hand_eaches,
            out_weight_per_sell_unit,
            out_weight_uom,
            out_prd_sll_uom,
            out_trf_ipid_conv,
            out_trf_cp_conv,
            dti_rec.trf_weight,
            dti_rec.trf_weight_uom,
            --begin retrofit (05/18/2010 - WILDGEN Added)
            var_ship_loc_cost, --013.01
            var_rec_loc_cost,  --013.01
            --end retrofit
            0, -- var_qty_rec_inners, 23979                -- 22235
            0, -- var_qty_rec_inners, 23979                -- 22235
            0,
            0,
            0,
            0,
            out_weight_to_qty_ind
            );
--                        dbms_output.put_line ('inside '||'add_at_receiving_trf '||var_trf_number);
    EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
            COMMIT WORK;
            var_error_code := 10;
            RAISE EXP_VALIDATION_FAILED;
        WHEN OTHERS THEN
            ROLLBACK WORK;
            clear_trf_work;
            RAISE;
    END;

COMMIT WORK;

END add_at_receiving_trf;
-- ------------------------------------------------------------------------
-- ------------------------------------------------------------------------
PROCEDURE add_at_receiving_mfp
IS
BEGIN

    -- Added hints and removed NVL
    SELECT  /*+ INDEX(TRFMFPEE TRFMFPEEP1) */
        MAX(trf_seq_id)
    INTO     var_trf_seq_id
    FROM     trfmfpee
    WHERE     trf_manifest_key = var_trf_manifest_key;

    IF var_trf_seq_id IS NULL THEN
        var_trf_seq_id := 0;
    END IF;

    var_trf_seq_id := var_trf_seq_id + 1;

    BEGIN
        INSERT INTO trfmfpee
            (
            trf_manifest_key,
            trf_seq_id,
            prd_lvl_child,
            prd_lvl_master,
            trf_number,
            trf_qty_ship,
            trf_qty_rec,
            trf_manifest_sts,
            tdrc_tech_key,
            trf_discrepancy_ref,
            trf_set_ind,
            inner_pk_tech_key,
            master_inner_key,
            entry_method,
            trf_ipid_conv,
            trf_cp_conv,
            trf_weight_rec,
            trf_wgt_rec_uom,
            --begin retrofit
            mir_shp_loc_cost, --013.01
            mir_rec_loc_cost, --013.01
            --end retrofit
            qty_ship_inners,                -- 22235
            qty_rec_inners,                    -- 22235
            weight_to_qty_ind
            )
        VALUES
            (
            var_trf_manifest_key,
            var_trf_seq_id,
            var_prd_lvl_child,
            0,
            var_trf_number,
            0,
            dti_rec.quantity,
            4,
            var_tdrc_tech_key,
            dti_rec.trf_discrepancy_ref,
            NULL,
            var_inner_pk_tech_key,
            0,
            var_entry_method,
            out_trf_ipid_conv,
            out_trf_cp_conv,
            dti_rec.trf_weight,
            dti_rec.trf_weight_uom,
            --begin retrofit
            var_ship_loc_cost,  --013.01
            var_rec_loc_cost,   --013.01
            --end retrofit
            0,                            -- 22235
            var_qty_rec_inners,            -- 22235
            out_weight_to_qty_ind
            );
    EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
            var_error_code := 5;
            RAISE EXP_VALIDATION_FAILED;
    END;

-- now add it to the transfer detail table
    add_at_receiving_trf;

END add_at_receiving_mfp;
-- ------------------------------------------------------------------------
-- ------------------------------------------------------------------------
PROCEDURE add_at_receiving_ctd
IS
BEGIN

    -- Added Hints and Removed NVL
    SELECT     /*+ INDEX(TRFCTDEE TRFCTDEEP1) */
        MAX(trf_seq_id)
    INTO     var_trf_seq_id
    FROM     trfctdee
    WHERE     trf_carton_key = var_trf_carton_key;

    IF var_trf_seq_id IS NULL THEN
        var_trf_seq_id := 0;
    END IF;

    var_trf_seq_id := var_trf_seq_id + 1;

    BEGIN
        INSERT INTO trfctdee
            (
            trf_carton_key,
            trf_seq_id,
            prd_lvl_child,
            prd_lvl_master,
            trf_number,
            trf_qty_ship,
            trf_qty_rec,
            trf_carton_stat,
            tdrc_tech_key,
            trf_discrepancy_ref,
            trf_set_ind,
            inner_pk_tech_key,
            master_inner_key,
            entry_method,
            trf_ipid_conv,
            trf_cp_conv,
            trf_weight_rec,
            trf_wgt_rec_uom,
            --begin retrofit
            mir_shp_loc_cost,  --013.01
            mir_rec_loc_cost,  --013.01
            --end retrofit
            qty_ship_inners,  -- 22235
            qty_rec_inners,      -- 22235
            weight_to_qty_ind
            )
        VALUES
            (
            var_trf_carton_key,
            var_trf_seq_id,
            var_prd_lvl_child,
            0,
            var_trf_number,
            0,
            dti_rec.quantity,
            4,
            var_tdrc_tech_key,
            dti_rec.trf_discrepancy_ref,
            NULL,
            var_inner_pk_tech_key,
            0,
            var_entry_method,
            out_trf_ipid_conv,
            out_trf_cp_conv,
            dti_rec.trf_weight,
            dti_rec.trf_weight_uom,
            --begin retrofit
            var_ship_loc_cost, --013.01
            var_rec_loc_cost,  --013.01
            --end retrofit
            0,                        -- 22235
            var_qty_rec_inners,        -- 22235
            out_weight_to_qty_ind
            );
    EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
            var_error_code := 5;
            RAISE EXP_VALIDATION_FAILED;
    END;

-- now add it to the transfer detail table
    add_at_receiving_trf;

END add_at_receiving_ctd;
-- ------------------------------------------------------------------------
-- ------------------------------------------------------------------------
-- The next three procedures are executed to load the shipped quantity into the received
-- quantity. The import record did not have any product number indicating to receive
-- the entire shipment. (manifest/carton/transfer)
-- ------------------------------------------------------------------------
PROCEDURE load_carton_rcv_all
IS
BEGIN

    -- Ashok - Added hints
    UPDATE     /*+ INDEX(TRFCTDEE TRFCTDEEP1) */
        trfctdee
    SET    trf_qty_rec = trf_qty_ship,
        trf_weight_rec = trf_weight_ship,
        tdrc_tech_key = var_tdrc_tech_key,
        trf_discrepancy_ref = dti_rec.trf_discrepancy_ref,
        trf_wgt_rec_uom = trf_weight_ship_uom,
        qty_rec_inners = qty_ship_inners        -- 22235
    WHERE     trf_carton_key = var_trf_carton_key
    AND     (trf_set_ind IS NULL OR trf_set_ind = 'C' OR trf_set_ind = 'S')
    AND     trf_carton_stat = 4
    AND     trf_qty_rec IS NULL;

END load_carton_rcv_all;
-- ------------------------------------------------------------------------
-- ------------------------------------------------------------------------
PROCEDURE load_manifest_rcv_all
IS
BEGIN

    -- Ashok - Added hints
    UPDATE     /*+ INDEX(TRFMFPEE TRFMFPEEP1) */
        trfmfpee
    SET    trf_qty_rec = trf_qty_ship,
        trf_weight_rec = trf_weight_ship,
        tdrc_tech_key = var_tdrc_tech_key,
        trf_discrepancy_ref = dti_rec.trf_discrepancy_ref,
        trf_wgt_rec_uom = trf_weight_ship_uom,
        qty_rec_inners = qty_ship_inners        -- 22235
    WHERE     trf_manifest_key = var_trf_manifest_key
    AND     (trf_set_ind IS NULL OR trf_set_ind = 'C' OR trf_set_ind = 'S')
    AND     trf_manifest_sts = 4
    AND     trf_qty_rec IS NULL;

    save_trf_carton_key := var_trf_carton_key;

    FOR ctn IN c4 LOOP
        var_trf_carton_key := ctn.trf_carton_key;
        load_carton_rcv_all;
    END LOOP;

    var_trf_carton_key := save_trf_carton_key;

END load_manifest_rcv_all;
-- ------------------------------------------------------------------------
-- --------------------------------
-- 377868
PROCEDURE load_trf_rcv_all
IS
PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
  BEGIN
    -- Ashok - Added hints
    -- Log 30664 - Replace the query to use the TRFDTGWW
    UPDATE     /*+ INDEX(TRFDTGWW TRFDTGWWP1) */
        trfdtgww
    SET       trf_qty_rec = trf_qty_ship,
            trf_weight_rec = trf_weight_ship,
            tdrc_tech_key = var_tdrc_tech_key,
            trf_discrepancy_ref = dti_rec.trf_discrepancy_ref,
            trf_wgt_rec_uom = trf_wgt_ship_uom,
            qty_rec_inners = qty_ship_inners,        -- 22235
            update_row = 'T'            -- 31157
    WHERE     trf_number = var_trf_number
    AND     (trf_set_ind IS NULL OR trf_set_ind = 'C' OR trf_set_ind = 'S')
    AND     trf_status = 4
    AND     trf_qty_rec IS NULL;

    EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK WORK;
        RAISE;
  END;

COMMIT WORK;

END load_trf_rcv_all;
-- ------------------------------------------------------------------------
-- ------------------------------------------------------------------------
PROCEDURE validate_04_by_prd
IS
BEGIN

    var_add_new_product := FALSE;
    var_add_status := 0;
    var_add_new_ctd_product := FALSE;
    var_add_new_mfp_product := FALSE;

-- shipping location must be entered
-- get the shipping location tech key only if the previous shipping location is null within the same action
-- 23093 the From and To location validation was moved to validate_04 routine.

-- quantity cannot be less than zero
    IF NVL(dti_rec.quantity,0.0) < 0.0 THEN
        var_error_code := 6;
        RAISE EXP_VALIDATION_FAILED;
    END IF;


    var_entry_method := 1;
    IF dti_rec.inner_pack_id IS NOT NULL THEN
        var_entry_method := 3;
        var_error_code := 0;
        IF pre_inner_pack_id IS NULL OR
            pre_inner_pack_id <> dti_rec.inner_pack_id THEN
            get_inner_pk_key;
            IF var_error_code > 0 THEN
                RAISE EXP_VALIDATION_FAILED;
            END IF;
        END IF;
        -- Log 25843
--        IF var_org_is_store_ship = 'T' THEN
--            IF (var_loose_pack_flag = 'T' OR var_pack_lvl_parent IS NOT NULL) THEN
--                NULL;
--            ELSE
--                var_error_code := 0;
--                get_loose_inner; -- this gets the var_loose_inner_pack_id
--                IF var_error_code > 0 THEN
--                    RAISE EXP_VALIDATION_FAILED;
--                END IF;
--                dti_rec.inner_pack_id := var_loose_inner_pack_id;
--            END IF;
--        END IF;
        dti_rec.prd_lvl_number := save_prd_lvl_number;
        var_inner_pk_tech_key := save_inner_pk_tech_key;
    ELSE
        var_inner_pk_tech_key := 0;            --23505
    END IF;

    IF dti_rec.inner_pack_id IS NULL THEN
        IF dti_rec.prd_upc IS NOT NULL THEN
            var_error_code := 0;
            IF pre_prd_upc IS NULL OR dti_rec.prd_upc <> pre_prd_upc THEN
                get_vpc_upc;
                IF var_error_code > 0 THEN
                    RAISE EXP_VALIDATION_FAILED;
                END IF;
            END IF;
            IF var_entry_method = 5 THEN
                var_inner_pk_tech_key := save_inner_pk_tech_key;
                dti_rec.inner_pack_id := save_inner_pack_id;
            ELSE
                var_inner_pk_tech_key := 0;
            END IF;
            dti_rec.prd_lvl_number := save_prd_lvl_number;
        END IF;
    END IF;

--  16752 Perishables enhancement above
    IF pre_prd_lvl_number IS NULL OR pre_prd_lvl_number <> dti_rec.prd_lvl_number
       OR pre_prd_lvl_master <> dti_rec.prd_mst_number  -- 372590
    THEN
        var_prd_lvl_child := 0;
        var_prd_lvl_parent := 0;
        var_prd_lvl_master := 0;
        var_error_code := 0;
        var_ent_prd_lvl_master := 0;
        var_prd_lvl_number := dti_rec.prd_lvl_number;
        var_action_code := dti_rec.action_code;
        var_jda_origin := dti_rec.jda_origin;
        get_prd_lvl_child;
        IF var_error_code > 0 THEN
            RAISE EXP_VALIDATION_FAILED;
        END IF;
        IF var_trf_set_ind = SET_MASTER THEN
            var_error_code := 5;
            RAISE EXP_VALIDATION_FAILED;
        END IF;
    ELSE
        IF var_trf_set_ind = SET_MASTER THEN
            var_error_code := 5;
            RAISE EXP_VALIDATION_FAILED;
        END IF;
    END IF;
-- 363122
    IF var_prd_add_imp = 'T' THEN
        IF var_org_is_store_ship = 'T' THEN
            IF dti_rec.inner_pack_id IS NULL THEN  -- 373129
                dti_rec.inner_pack_id := var_loose_inner_pack_id;
            END IF;
        END IF;
    END IF;

    -- DWarnke  09/08/05  25843
    -- Inner pack ID is required for DCs
    -- also required for stores
    IF var_trf_set_ind IS NULL THEN
        IF var_org_is_store_ship = 'F' THEN     -- 710117
            IF dti_rec.inner_pack_id is null THEN
                var_error_code := 999;
                RAISE EXP_VALIDATION_FAILED;
            END IF;
         END IF;                                --710117
    END IF;

-- Log 25843
-- 27236
    IF dti_rec.inner_pack_id IS NULL THEN
        var_inner_pk_tech_key := 0;
    END IF;
-- 27236

    IF var_ent_prd_lvl_master > 0 THEN
        BEGIN
               -- Log 30664 - Replace the query to use the TRFDTGWW
               SELECT /*+ INDEX(TRFDTGWW TRFDTGWWP1) */
                inner_pk_tech_key
            INTO var_ent_master_inner_key
            FROM trfdtgww
            WHERE trf_number = dti_rec.trf_number
--             AND inner_pk_tech_key = var_inner_pk_tech_key   -- 25918
            AND prd_lvl_child = var_ent_prd_lvl_master            -- 25918
            AND prd_lvl_master = 0
            AND master_inner_key = 0;
        EXCEPTION WHEN NO_DATA_FOUND THEN
            var_error_code := 5;
            RAISE EXP_VALIDATION_FAILED;
        END;
    ELSE
        var_ent_master_inner_key := 0;
    END IF;
    var_qty_ship_inners := 0;
    var_qty_rec_inners := 0;
    var_trf_qty_ship := 0;
-- 27236 check if we have inner pack key
    var_count_inner := 0;

    IF var_inner_pk_tech_key = 0 THEN
        -- Log 30664 - Replace the query to use the TRFDTGWW
        SELECT  count(*), MIN(inner_pk_tech_key)
        INTO     var_count_inner, var_inner_pk_tech_key
        FROM     trfdtgww
        WHERE     trf_number = dti_rec.trf_number
        AND     prd_lvl_child = var_prd_lvl_child
        AND        prd_lvl_master = var_ent_prd_lvl_master
        AND        master_inner_key = var_ent_master_inner_key;
        IF var_count_inner > 1 THEN         -- more than one inner for the same product
            var_error_code := 5;
            RAISE EXP_VALIDATION_FAILED;
        END IF;
        -- Log 30664 - Commented the below and used MIN(inner_pk_tech_key) in the
        -- above select
        /*
        IF var_count_inner = 1 THEN
            SELECT  inner_pk_tech_key
            INTO     var_inner_pk_tech_key
            FROM     trfdtlee
            WHERE     trf_number = dti_rec.trf_number
            AND     prd_lvl_child = var_prd_lvl_child
            AND        prd_lvl_master = var_ent_prd_lvl_master
            AND        master_inner_key = var_ent_master_inner_key;
        END IF;
        */
    END IF;
-- 27236

    BEGIN
        -- Log 30664 - Replace the query to use the TRFDTGWW
        SELECT /*+ INDEX(TRFDTGWW TRFDTGWWP1) */
             trf_status, trf_ipid_conv, trf_cp_conv,
             trf_weight_ship, trf_wgt_ship_uom, trf_set_ind,
             trf_qty_ship, qty_ship_inners,
             weight_to_qty_ind, prd_sll_uom,      --374552
             rowid
        INTO var_trf_detail_status, out_trf_ipid_conv,
             out_trf_cp_conv, out_trf_weight_ship,
             out_trf_weight_ship_uom, rec_trf_set_ind,
             var_trf_qty_ship, var_qty_ship_inners,
             out_weight_to_qty_ind, out_prd_sll_uom,  --374552
             var_rowid_trf
        FROM trfdtgww
        WHERE trf_number = dti_rec.trf_number
        AND prd_lvl_child = var_prd_lvl_child
        AND prd_lvl_master = var_ent_prd_lvl_master
        AND inner_pk_tech_key = var_inner_pk_tech_key
        AND master_inner_key = var_ent_master_inner_key;
        IF rec_trf_set_ind IN (SET_MASTER, SET_PART) THEN
            var_error_code := 5;
            RAISE EXP_VALIDATION_FAILED;
        END IF;
    EXCEPTION WHEN NO_DATA_FOUND THEN
        IF var_ent_prd_lvl_master > 0 THEN
            var_error_code := 5;
            RAISE EXP_VALIDATION_FAILED;
        ELSE
            IF var_prd_add_imp = 'F' THEN
                var_error_code := 5;
                RAISE EXP_VALIDATION_FAILED;
            ELSE
                var_add_new_product := TRUE;
                var_add_status := 4;
            END IF;
        END IF;
    END;

    IF var_add_status = 0 THEN
        IF var_carton_receiving = TRUE OR var_manifest_receiving = TRUE THEN
            IF var_trf_detail_status <> 7 THEN
                var_error_code := 207;
                RAISE EXP_VALIDATION_FAILED;
            END IF;
        ELSE
            IF var_trf_detail_status IN (0, 1, 2, 3, 5, 6) THEN
                var_error_code := 207;
                RAISE EXP_VALIDATION_FAILED;
            END IF;

        END IF;
    END IF;

    IF var_carton_receiving = TRUE THEN
        IF var_add_new_product = TRUE THEN
            var_add_new_ctd_product := TRUE;
            var_add_status := 7;
        ELSE
            BEGIN
            -- Ashok - Added hints
            SELECT  /*+ INDEX(TRFCTDEE TRFCTDEEC2) */
                    trf_carton_stat, trf_ipid_conv, trf_cp_conv,
                    trf_weight_ship, trf_weight_ship_uom,
                    trf_qty_ship, qty_ship_inners,
                    weight_to_qty_ind,   --374552
                    rowid
            INTO      var_carton_detail_status, out_trf_ipid_conv,
                    out_trf_cp_conv, out_trf_weight_ship,
                    out_trf_weight_ship_uom,
                    var_trf_qty_ship, var_qty_ship_inners,
                    out_weight_to_qty_ind,   --374552
                    var_rowid_ctd
            FROM      trfctdee
            WHERE     trf_carton_key = var_trf_carton_key
            AND       trf_number = dti_rec.trf_number
            AND       prd_lvl_child = var_prd_lvl_child
            AND     inner_pk_tech_key = var_inner_pk_tech_key
            AND     master_inner_key = var_ent_master_inner_key
            AND       prd_lvl_master = var_ent_prd_lvl_master;
            EXCEPTION
            WHEN NO_DATA_FOUND THEN
                var_error_code := 10;
                RAISE EXP_VALIDATION_FAILED;
            END;
            IF var_carton_detail_status IN (0, 5, 6) THEN
                var_error_code := 10;
                RAISE EXP_VALIDATION_FAILED;
            END IF;
        END IF;
    ELSE
        IF var_manifest_receiving = TRUE THEN
            IF var_add_new_product = TRUE THEN
                var_add_new_mfp_product := TRUE;
                var_add_status := 7;
            ELSE
                BEGIN
                -- Ashok - Added hints
                SELECT    /*+ INDEX(TRFMFPEE TRFMFPEEC2) */
                        trf_manifest_sts, trf_ipid_conv, trf_cp_conv,
                        trf_weight_ship, trf_weight_ship_uom,
                        trf_qty_ship, qty_ship_inners,
                        weight_to_qty_ind,   --374552
                        rowid
                INTO      var_manifest_detail_status, out_trf_ipid_conv,
                        out_trf_cp_conv, out_trf_weight_ship,
                        out_trf_weight_ship_uom,
                        var_trf_qty_ship, var_qty_ship_inners,
                        out_weight_to_qty_ind,   --374552
                        var_rowid_mfp
                FROM      trfmfpee
                WHERE     trf_manifest_key = var_trf_manifest_key
                AND       trf_number = dti_rec.trf_number
                AND       prd_lvl_child = var_prd_lvl_child
                AND       prd_lvl_master = var_ent_prd_lvl_master
                AND     inner_pk_tech_key = var_inner_pk_tech_key
                AND     master_inner_key = var_ent_master_inner_key;
                EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    var_error_code := 14;
                    RAISE EXP_VALIDATION_FAILED;
                END;
                IF var_manifest_detail_status IN (0, 5, 6) THEN
                    var_error_code := 14;
                    RAISE EXP_VALIDATION_FAILED;
                END IF;
            END IF;
        END IF;
    END IF;

    IF var_add_new_ctd_product = TRUE
       OR
       var_add_new_mfp_product = TRUE
       OR
       var_add_new_product = TRUE THEN
        trfgetavg (var_prd_lvl_child, var_from_loc_child,
            var_inner_pk_tech_key, var_vpc_prd_tech_key,
            out_on_hand_sell_units, out_on_hand_eaches,
            out_weight_per_sell_unit, out_weight_uom,
            out_prd_sll_uom, out_trf_ipid_conv,
            out_trf_cp_conv, out_weight_to_qty_ind);

        IF out_weight_to_qty_ind = 'T' THEN  -- 22235
            out_weight_per_sell_unit := 1;
            out_weight_uom := out_prd_sll_uom;
        END IF;
    END IF;
-- 25968  Do not limit the receipt quantity to the original entry method of the transfer

-- 26032 start
    IF NVL(dti_rec.trf_qty_flag,'S') NOT IN ('S', 'P', 'C') THEN
        var_error_code := 812;
        RAISE EXP_VALIDATION_FAILED;
    END IF;
-- 26032 end


    IF dti_rec.trf_qty_flag = 'P' THEN  -- 22235
        var_qty_rec_inners :=  dti_rec.quantity;
        dti_rec.quantity := dti_rec.quantity * out_trf_ipid_conv;
    ELSE
        IF dti_rec.trf_qty_flag = 'C' THEN
            var_qty_rec_inners := dti_rec.quantity * out_trf_cp_conv;
            dti_rec.quantity := dti_rec.quantity
                                * out_trf_ipid_conv * out_trf_cp_conv;
        ELSE
            var_qty_rec_inners := TRUNC(dti_rec.quantity / out_trf_ipid_conv);
        END IF;
    END IF;

    IF out_weight_to_qty_ind = 'T' THEN -- 22235
        IF NVL(dti_rec.trf_qty_flag,'S') IN ('P', 'C') THEN -- import record is by innerpack
            IF dti_rec.trf_weight IS NOT NULL THEN
                IF dti_rec.trf_weight_uom IS NOT NULL THEN
                    IF dti_rec.trf_weight_uom <> out_prd_sll_uom THEN
                        var_convert_weight :=
                        pmmuompk.convert_weight_uom (dti_rec.trf_weight,
                                             dti_rec.trf_weight_uom,
                                             out_prd_sll_uom);
                        dti_rec.quantity := var_convert_weight;
                    ELSE
                        dti_rec.quantity := dti_rec.trf_weight;
                    END IF;
                ELSE -- weight is given, but no weight uom is given
                    dti_rec.quantity := dti_rec.trf_weight;
                    dti_rec.trf_weight_uom := out_prd_sll_uom;
                END IF;
            ELSE -- no weight is given
                dti_rec.quantity := var_trf_qty_ship;
                 dti_rec.trf_weight := dti_rec.quantity;
                dti_rec.trf_weight_uom := out_prd_sll_uom;
            END IF;
        ELSE -- import record is by product
             dti_rec.trf_weight := dti_rec.quantity;
            dti_rec.trf_weight_uom := out_prd_sll_uom;
            var_qty_rec_inners := var_qty_ship_inners;
          END IF;
    ELSE -- it is not a weight_to_qty product
        IF dti_rec.trf_weight IS NULL THEN
               dti_rec.trf_weight := out_weight_per_sell_unit * dti_rec.quantity;
            dti_rec.trf_weight_uom := out_weight_uom;
        END IF;
    END IF;  -- 22235

    IF var_add_new_ctd_product = TRUE THEN
        add_at_receiving_ctd;
    ELSE
        IF var_add_new_mfp_product = TRUE THEN
            add_at_receiving_mfp;
        ELSE
            IF var_add_new_product = TRUE THEN
                 add_at_receiving_trf;
            END IF;
        END IF;
    END IF;

    IF var_add_new_product = FALSE THEN
         IF var_carton_receiving = TRUE THEN
            -- Ashok - Added hints
            UPDATE     /*+ ROWID(TRFCTDEE) */
                    trfctdee
            SET     trf_qty_rec = NVL(trf_qty_rec,0) + dti_rec.quantity,
                    tdrc_tech_key = var_tdrc_tech_key,
                    trf_discrepancy_ref = dti_rec.trf_discrepancy_ref,
                    trf_weight_rec = NVL(trf_weight_rec,0) + dti_rec.trf_weight,
                    trf_wgt_rec_uom = dti_rec.trf_weight_uom,
                    qty_rec_inners = NVL(qty_rec_inners,0.0) +
                        var_qty_rec_inners
            WHERE     ROWID = var_rowid_ctd;
        ELSE
            IF var_manifest_receiving = TRUE THEN
                -- Ashok - Added hints
                UPDATE     /*+ ROWID(TRFMFPEE) */
                        trfmfpee
                SET     trf_qty_rec = NVL(trf_qty_rec,0) + dti_rec.quantity,
                        tdrc_tech_key = var_tdrc_tech_key,
                        trf_discrepancy_ref = dti_rec.trf_discrepancy_ref,
                        trf_weight_rec = NVL(trf_weight_rec,0) + dti_rec.trf_weight,
                        trf_wgt_rec_uom = dti_rec.trf_weight_uom,
                        qty_rec_inners = NVL(qty_rec_inners,0.0) +
                            var_qty_rec_inners
                WHERE     ROWID = var_rowid_mfp;
            ELSE
                -- Ashok - Added hints
                 -- Log 30664 - Replace the query to use the TRFHDGWW
                 update_receiving_trfdtgww;      -- 377868
--                UPDATE     /*+ ROWID(TRFDTGWW) */   -- 377868
--                        trfdtgww
--                SET     trf_qty_rec = NVL(trf_qty_rec,0) + dti_rec.quantity,
--                        tdrc_tech_key = var_tdrc_tech_key,
--                        trf_discrepancy_ref = dti_rec.trf_discrepancy_ref,
--                        trf_weight_rec = NVL(trf_weight_rec,0) + dti_rec.trf_weight,
--                        trf_wgt_rec_uom = dti_rec.trf_weight_uom,
--                        qty_rec_inners = NVL(qty_rec_inners,0.0) +
--                        var_qty_rec_inners,
--                        update_row = 'T'            -- 31157
--                WHERE     ROWID = var_rowid_trf;
            END IF;
        END IF;
    ELSE -- we added new transfer detail record at receiving time -- 23979
        IF var_carton_receiving = FALSE
            AND var_manifest_receiving = FALSE THEN -- it must be transfer receipt
                 -- Log 30664 - Replace the query to use the TRFDTGWW
                 update_mani_rec_trfdtgww;      -- 377868
--                UPDATE     trfdtgww
--                SET     trf_qty_rec = NVL(trf_qty_rec,0) + dti_rec.quantity,
--                        tdrc_tech_key = var_tdrc_tech_key,
--                        trf_discrepancy_ref = dti_rec.trf_discrepancy_ref,
--                        trf_weight_rec = NVL(trf_weight_rec,0) + dti_rec.trf_weight,--
--                        trf_wgt_rec_uom = dti_rec.trf_weight_uom,
--                        qty_rec_inners = NVL(qty_rec_inners,0.0) +
--                        var_qty_rec_inners,
--                        update_row = 'T'            -- 31157
--                WHERE     trf_number = var_trf_number
--                AND     prd_lvl_child = var_prd_lvl_child
--                AND     prd_lvl_master = 0
--                AND     inner_pk_tech_key = var_inner_pk_tech_key
--                AND     master_inner_key = 0;
        END IF;
    END IF;

END validate_04_by_prd;
-- ------------------------------------------------------------------------
-- ------------------------------------------------------------------------
PROCEDURE validate_04
IS
BEGIN

    var_limit_prd_lvl_id := NULL;
    var_error_code := 0;

-- This procedures validates and processes the action_code '04' (receiving) record.

-- date created must be entered
    IF dti_rec.date_created IS NULL THEN
        var_error_code := 147;
        RAISE EXP_VALIDATION_FAILED;
    END IF;

-- receipt date must be entered
    IF dti_rec.receipt_date IS NULL THEN
        var_error_code := 146;
        RAISE EXP_VALIDATION_FAILED;
    END IF;

-- at least one of the values are required
    IF dti_rec.trf_number IS NULL AND dti_rec.mnfst_number IS NULL AND dti_rec.carton_number IS NULL THEN
        var_error_code := 1;
        RAISE EXP_VALIDATION_FAILED;
    END IF;


-- when the receiving is by product the transfer number is required
    IF dti_rec.trf_number IS NULL AND dti_rec.prd_lvl_number IS NOT NULL THEN
        var_error_code := 1;
        RAISE EXP_VALIDATION_FAILED;
    END IF;

    IF dti_rec.trf_number IS NOT NULL THEN
        IF pre_trf_number IS NULL OR pre_trf_number <> dti_rec.trf_number THEN
            BEGIN
            -- Ashok - Added hints
             -- Log 30664 - Replace the query to use the TRFHDGWW
            SELECT     /*+ INDEX(TRFHDGWW TRFHDGWWP1)
                       INDEX(ORGMSTEE ORGMSTEEP1)
             */
                    trf_number,
                    trf_ship_loc,
                    trf_rec_loc,
                    trf_type_id,
                    trf_prior_id,
--                    trf_car_id,                -- 26821
                    trf_status,
                    org_is_store
            INTO    var_trf_number,
                    var_trf_ship_loc,
                    var_trf_rec_loc,
                    var_trf_type_id,
                    var_trf_reason_code,
--                    var_trf_car_id,            -- 26821
                    var_trf_header_status,
                    var_org_is_store_rec
            FROM     trfhdgww, orgmstee
            WHERE     trf_number = dti_rec.trf_number
            AND     org_lvl_child = trf_rec_loc;
            EXCEPTION WHEN NO_DATA_FOUND THEN
                var_error_code := 1;
                RAISE EXP_VALIDATION_FAILED;
            END;


            -- check the status before any updates
            IF var_trf_header_status IN (0, 1, 2, 3, 5) THEN
                var_error_code := 209;
                RAISE EXP_VALIDATION_FAILED;
            END IF;

            -- update the Notes field on the trfhdree table
            IF dti_rec.notes IS NOT NULL THEN
                -- Ashok - Added hints
                 -- Log 30664 - Replace the query to use the TRFHDGWW
                 update_trfhdgww_notes;     -- 377868
--                UPDATE     /*+ INDEX(TRFHDGWW TRFHDGWWP1) */
--                    trfhdgww
--                SET     trf_notes = NVL(trf_notes, '') || NVL(dti_rec.notes, '')
--                WHERE     trf_number = dti_rec.trf_number;
            END IF;

            -- update the reference number cross reference table
            -- Ashok - Added hints
            UPDATE     /*+ INDEX(TRFRFXEE TRFRFXEEP1) */
                trfrfxee
            SET     trf_rcv_ref_number = dti_rec.reference
            WHERE     trf_number = dti_rec.trf_number;
        ELSE
-- check the status of the header even if there are no new transfer number to reject the additional products for
-- the same transfer number
            IF var_trf_header_status IN (0, 1, 2, 3, 5) THEN
                var_error_code := 209;
                RAISE EXP_VALIDATION_FAILED;
            END IF;
        END IF;
    END IF;

-- 23367 Added validation of the from an to locations
-- this validation was done in the validate_04_product routine
-- and it was moved here because the location needed for the carton
-- or the manifest validation.
    IF dti_rec.from_loc IS NULL THEN
        var_from_loc_child := var_trf_ship_loc;
        BEGIN
            SELECT org_lvl_number
            INTO dti_rec.from_loc
            FROM orgmstee
            WHERE org_lvl_child = var_from_loc_child;
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                var_error_code := 3;
                RAISE EXP_VALIDATION_FAILED;
        END;
    END IF;


    IF pre_from_loc IS NULL OR pre_from_loc <> dti_rec.from_loc THEN
        var_error_code := 0;
        get_from_loc_child;
        IF var_error_code > 0 THEN
            RAISE EXP_VALIDATION_FAILED;
        ELSE
            IF var_from_loc_child <> var_trf_ship_loc THEN
                var_error_code := 3;
                RAISE EXP_VALIDATION_FAILED;
            END IF;

        END IF;
    ELSE
        IF var_from_loc_child <> var_trf_ship_loc THEN
            var_error_code := 3;
            RAISE EXP_VALIDATION_FAILED;
        END IF;
    END IF;

    IF dti_rec.to_loc IS NULL THEN
        var_to_loc_child := var_trf_rec_loc;
        BEGIN
            SELECT org_lvl_number
            INTO dti_rec.to_loc
            FROM orgmstee
            WHERE org_lvl_child = var_to_loc_child;
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                var_error_code := 3;
                RAISE EXP_VALIDATION_FAILED;
        END;
    END IF;
    IF pre_to_loc IS NULL OR pre_to_loc <> dti_rec.to_loc THEN
        var_error_code := 0;
        var_date_created := dti_rec.date_created;
        get_to_loc_child;
        IF var_error_code > 0 THEN
            RAISE EXP_VALIDATION_FAILED;
        ELSE
            IF var_to_loc_child <> var_trf_rec_loc THEN
                var_error_code := 4;
                RAISE EXP_VALIDATION_FAILED;
            END IF;
        END IF;
    ELSE
        IF var_to_loc_child <> var_trf_rec_loc THEN
            var_error_code := 4;
            RAISE EXP_VALIDATION_FAILED;
        END IF;
    END IF;

-- validate the manifest number if entered, only if different from
-- the previous manifest within the same action code
-- 23093 Added checks of the locations breaks
    IF dti_rec.mnfst_number IS NOT NULL THEN
        IF pre_manifest_number IS NULL
            OR pre_manifest_number <> dti_rec.mnfst_number
            OR pre_from_loc IS NULL
            OR pre_from_loc <> dti_rec.from_loc
            OR pre_to_loc IS NULL
            OR pre_to_loc <> dti_rec.to_loc THEN
            BEGIN
            SELECT     /*+ INDEX(TRFMFHEE TRFMFHEEI2) */
                trf_manifest_sts, trf_manifest_key
            INTO     var_manifest_header_status, var_trf_manifest_key
            FROM     trfmfhee
            WHERE     trf_manifest_id = dti_rec.mnfst_number
            AND        trf_ship_loc = var_from_loc_child
            AND        trf_rec_loc = var_to_loc_child;

            var_manifest_receiving := TRUE;

            EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    var_error_code := 12;
                    RAISE EXP_VALIDATION_FAILED;
                WHEN TOO_MANY_ROWS THEN
                    var_error_code := 205;
                    RAISE EXP_VALIDATION_FAILED;
            END;
        END IF;

        IF var_manifest_header_status IN (0, 5) THEN
            var_error_code := 205;
            RAISE EXP_VALIDATION_FAILED;
        END IF;
    END IF;

-- validate the carton number if entered, but only if different from
-- the previous carton number within the same action
-- 23367 Added checks of the location breaks
    IF dti_rec.carton_number IS NOT NULL THEN
        IF pre_carton_number IS NULL
            OR pre_carton_number <> dti_rec.carton_number
            OR pre_from_loc IS NULL
            OR pre_from_loc <> dti_rec.from_loc
            OR pre_to_loc IS NULL
            OR pre_to_loc <> dti_rec.to_loc THEN

            BEGIN
            SELECT     /*+ INDEX(TRFCTHEE TRFCTHEEI2) */
                trf_carton_stat, trf_carton_key
            INTO     var_carton_header_status, var_trf_carton_key
            FROM     trfcthee
            WHERE     trf_carton_id = dti_rec.carton_number
            AND        trf_ship_loc = var_from_loc_child
            AND        trf_rec_loc = var_to_loc_child;
            EXCEPTION
            WHEN NO_DATA_FOUND THEN
                var_error_code := 149;
                RAISE EXP_VALIDATION_FAILED;
            WHEN TOO_MANY_ROWS THEN
                var_error_code := 204;
                RAISE EXP_VALIDATION_FAILED;
            END;

            var_carton_receiving := TRUE;
            IF var_manifest_receiving = TRUE THEN
                BEGIN
                    -- Ashok - Added hints
                    SELECT     /*+ INDEX(TRFMFCEE TRFMFCEEP1) */
                        trf_manifest_sts
                    INTO     var_mfc_header_status
                    FROM     trfmfcee
                    WHERE     trf_manifest_key = var_trf_manifest_key
                    AND     trf_carton_key = var_trf_carton_key;

                    IF var_mfc_header_status IN (0, 5) THEN
                        var_error_code := 204;
                        RAISE EXP_VALIDATION_FAILED;
                    END IF;
                EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                        var_error_code := 12;
                        RAISE EXP_VALIDATION_FAILED;
                END;
-- 31022            ELSE
--                var_count := 0;
--                -- Ashok - Added hints and used COUNT(*)
--                SELECT     /*+ INDEX(TRFMFCEE TRFMFCEEI2) */
--                    COUNT(*)
--                INTO     var_count
--                FROM     trfmfcee
--                WHERE     trf_carton_key = var_trf_carton_key
--                AND     ROWNUM = 1;
--                IF var_count > 0 THEN
--                    var_error_code := 204;
--                    RAISE EXP_VALIDATION_FAILED;
--                END IF;
-- 31022
            END IF;
        END IF;
        IF var_carton_header_status IN (0, 5) THEN
            var_error_code := 204;
            RAISE EXP_VALIDATION_FAILED;
        END IF;
    END IF;

    IF var_manifest_receiving = TRUE OR var_carton_receiving = TRUE THEN
        IF var_trf_header_status <> 7 THEN
            var_error_code := 209;
            RAISE EXP_VALIDATION_FAILED;
        END IF;
    END IF;

    IF var_manifest_receiving = FALSE AND var_carton_receiving = FALSE THEN
        IF dti_rec.trf_number IS NULL THEN
            var_error_code := 1;
            RAISE EXP_VALIDATION_FAILED;
        END IF;
    END IF;

    IF dti_rec.tdrc_code IS NOT NULL THEN
        BEGIN
        -- Ashok - Add TRFDRCEEI2 (TDRC_CODE) index on TRFDRCEE table
        SELECT     /*+ INDEX(TRFDRCEE TRFDRCEEI2) */
            tdrc_tech_key
        INTO     var_tdrc_tech_key
        FROM     trfdrcee
        WHERE     tdrc_code = dti_rec.tdrc_code;
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            var_error_code := 210;
            RAISE EXP_VALIDATION_FAILED;
        END;
    ELSE
        var_tdrc_tech_key := NULL;
    END IF;

    IF dti_rec.prd_lvl_number IS NULL
        AND dti_rec.inner_pack_id IS NULL
        AND dti_rec.prd_upc IS NULL THEN
        IF var_carton_receiving = TRUE THEN
            load_carton_rcv_all;
        ELSE
            IF var_manifest_receiving = TRUE THEN
                load_manifest_rcv_all;
            ELSE
                load_trf_rcv_all;
            END IF;
        END IF;
    ELSE
        validate_04_by_prd;
    END IF;


END validate_04;
-- ------------------------------------------------------------------------
-- ------------------------------------------------------------------------
-- The next three procedures will be executed to update the remainder of the products
-- in the manifest/carton/transfer if the receiving was by product. When multiple receiving
-- is not allowed the entire shipment has to be received. (manifest/carton/transfer)
-- ------------------------------------------------------------------------
PROCEDURE finish_ctd_rcv
IS
BEGIN

    IF var_apply_shipped = 'T' THEN
        -- Ashok - Added hints
        UPDATE     /*+ INDEX(TRFCTDEE TRFCTDEEP1) */
            trfctdee
        SET     trf_qty_rec = trf_qty_ship,
                trf_weight_rec = trf_weight_ship,
                trf_wgt_rec_uom = trf_weight_ship_uom,
                qty_rec_inners = qty_ship_inners
        WHERE     trf_carton_key = var_trf_carton_key
        AND     (trf_set_ind IS NULL OR trf_set_ind = 'C' OR trf_set_ind = 'S')
        AND     trf_carton_stat = 4
        AND     trf_qty_rec IS NULL;
    ELSE
        -- Ashok - Added hints
        UPDATE     /*+ INDEX(TRFCTDEE TRFCTDEEP1) */
            trfctdee
        SET     trf_qty_rec = 0,
                trf_weight_rec = 0,
                trf_wgt_rec_uom = trf_weight_ship_uom,
                qty_rec_inners = 0
        WHERE     trf_carton_key = var_trf_carton_key
        AND     (trf_set_ind IS NULL OR trf_set_ind = 'C' OR trf_set_ind = 'S')
        AND     trf_carton_stat = 4
        AND     trf_qty_rec IS NULL;
    END IF;

END finish_ctd_rcv;
-- ------------------------------------------------------------------------
-- ------------------------------------------------------------------------
PROCEDURE finish_mfp_rcv
IS
BEGIN

    IF var_apply_shipped = 'T' THEN
        -- Ashok - Added hints
        UPDATE     /*+ INDEX(TRFMFPEE TRFMFPEEP1) */
            trfmfpee
        SET     trf_qty_rec = trf_qty_ship,
                trf_weight_rec = trf_weight_ship,
                trf_wgt_rec_uom = trf_weight_ship_uom,
                qty_rec_inners = qty_ship_inners
        WHERE     trf_manifest_key = var_trf_manifest_key
        AND     (trf_set_ind IS NULL OR trf_set_ind = 'C' OR trf_set_ind = 'S')
        AND     trf_manifest_sts = 4
        AND     trf_qty_rec IS NULL;

        save_trf_carton_key := var_trf_carton_key;

        FOR ctn IN c4 LOOP
            var_trf_carton_key := ctn.trf_carton_key;
            finish_ctd_rcv;
        END LOOP;
        var_trf_carton_key := save_trf_carton_key;
    ELSE
        -- Ashok - Added hints
        UPDATE     /*+ INDEX(TRFMFPEE TRFMFPEEP1) */
            trfmfpee
        SET     trf_qty_rec = 0,
                trf_weight_rec = 0,
                trf_wgt_rec_uom = trf_weight_ship_uom,
                qty_rec_inners = 0
        WHERE     trf_manifest_key = var_trf_manifest_key
        AND     (trf_set_ind IS NULL OR trf_set_ind = 'C' OR trf_set_ind = 'S')
        AND     trf_manifest_sts = 4
        AND     trf_qty_rec IS NULL;

        save_trf_carton_key := var_trf_carton_key;

        FOR ctn IN c4 LOOP
            var_trf_carton_key := ctn.trf_carton_key;
            finish_ctd_rcv;
        END LOOP;
        var_trf_carton_key := save_trf_carton_key;
    END IF;

END finish_mfp_rcv;
-- ------------------------------------------------------------------------
-- ------------------------------------------------------------------------
PROCEDURE finish_trf_rcv
IS
BEGIN

    IF var_apply_shipped = 'T' THEN
        -- Ashok - Added hints
        -- Log 30664 - Replace the query to use the TRFDTGWW
        update_trf_rcv_trfdtgww;      -- 377868
--        UPDATE     /*+ INDEX(TRFDTGWW TRFDTGWWP1) */
--            trfdtgww
--        SET     trf_qty_rec = trf_qty_ship,
--                trf_weight_rec = trf_weight_ship,
--                trf_wgt_rec_uom = trf_wgt_ship_uom,
--                qty_rec_inners = qty_ship_inners,
--                update_row = 'T'            -- 31157
--        WHERE     trf_number = var_trf_number
--        AND     (trf_set_ind IS NULL OR trf_set_ind = 'C' OR trf_set_ind = 'S')
--        AND     trf_status = 4
--        AND     trf_qty_rec IS NULL;
    ELSE
        -- Ashok - Added hints
        -- Log 30664 - Replace the query to use the TRFDTGWW
        update_trf_rcv_zero_trfdtgww;     -- 377868
--        UPDATE     /*+ INDEX(TRFDTGWW TRFDTGWWP1) */
--            trfdtgww
--        SET     trf_qty_rec = 0,
--                trf_weight_rec = 0,
--                trf_wgt_rec_uom = trf_wgt_ship_uom,
--                qty_rec_inners = 0,
--                update_row = 'T'            -- 31157
--        WHERE    trf_number = var_trf_number
--        AND     (trf_set_ind IS NULL OR trf_set_ind = 'C' OR trf_set_ind = 'S')
--        AND     trf_status = 4
--        AND     trf_qty_rec IS NULL;
    END IF;

END finish_trf_rcv;
-- ------------------------------------------------------------------------
-- ------------------------------------------------------------------------
PROCEDURE reconcile_all
IS
BEGIN

    FOR rcn in c5 LOOP

        var_total_shipped :=      NVL (rcn.trf_in_carton, 0.0)
                                 + NVL (rcn.trf_in_manifest, 0.0)
                                  + NVL (rcn.trf_qty_ship, 0.0);
        var_total_shipped_inners := NVL(rcn.in_carton_inners,0.0)
                                  + NVL(rcn.in_manifest_inners,0.0)
                                  + NVL(rcn.qty_ship_inners,0.0);
        var_qty_exception :=    var_total_shipped
                              - (NVL (rcn.trf_qty_pick, 0.0)
                            - NVL (rcn.trf_qty_cncl, 0.0));
        var_qty_exception_inners := var_total_shipped_inners
                                  - NVL(rcn.qty_pick_inners,0.0);

        IF var_qty_exception <> 0.0 OR
           var_qty_exception_inners <> 0 THEN

            -- Ashok - Removed Select statement. Added session number in where clause
            UPDATE     /*+ INDEX(TRFPIKWW TRFPIKWWI2) */
                    trfpikww
            SET     trf_qty_exception = NVL(trf_qty_exception,0.0) + var_qty_exception,
                    qty_exception_inners = NVL(qty_exception_inners,0.0) +
                                            var_qty_exception_inners
               WHERE     trf_number = dti_rec.trf_number
            AND     prd_lvl_child = rcn.prd_lvl_child
            AND     inner_pk_tech_key = rcn.inner_pk_tech_key
            AND        session_number = var_trans_session;

               var_any_trfpik_row := TRUE;

              IF SQL%NOTFOUND THEN
                var_pik_sequence := var_pik_sequence + 1;
                  INSERT INTO trfpikww
                      (
                    session_number,
                    sequence_num,
                      trf_process_flag,
                    trf_ship_loc,
                    trf_rec_loc,
                      trf_number,
                    prd_lvl_child,
                      trf_qty_exception,
                    trf_date_created,
                    inner_pk_tech_key,
                    entry_method,
                    trf_ipid_conv,
                    trf_cp_conv,
                    master_inner_key,
                    qty_exception_inners
                    )
                      VALUES
                    (
                    var_trans_session,
                    var_pik_sequence,
                      'T',
                    var_trf_ship_loc,
                    var_trf_rec_loc,
                     dti_rec.trf_number,
                    rcn.prd_lvl_child,
                      var_qty_exception,
                    dti_rec.date_created,
                    rcn.inner_pk_tech_key,
                    rcn.entry_method,
                    rcn.trf_ipid_conv,
                    rcn.trf_cp_conv,
                    0,
                    var_qty_exception_inners
                    );
                var_any_trfpik_row := TRUE;
            END IF;
        END IF;
    END LOOP;

END reconcile_all;
-- ------------------------------------------------------------------------
-- ------------------------------------------------------------------------
PROCEDURE reconcile_prd
IS
BEGIN

    var_total_shipped :=  NVL (var_trf_in_carton, 0.0)
                          + NVL (var_trf_in_manifest, 0.0)
                          + NVL (var_trf_qty_ship, 0.0);
    var_total_shipped_inners := NVL(var_in_carton_inners,0.0)
                                 + NVL(var_in_manifest_inners,0.0)
                                 + NVL(var_qty_ship_inners,0.0);
    var_qty_exception := var_total_shipped
                         - (NVL (var_trf_qty_pick, 0.0) - NVL (var_trf_qty_cncl, 0.0));
    var_qty_exception_inners := var_total_shipped_inners
                                 - NVL(var_qty_pick_inners,0.0);

    IF var_qty_exception <> 0.0 OR
           var_qty_exception_inners <> 0 THEN
        -- Ashok - Removed Select statement.
        UPDATE     /*+ INDEX(TRFPIKWW TRFPIKWWI2) */
                trfpikww
        SET     trf_qty_exception = NVL(trf_qty_exception,0.0) + var_qty_exception,
                qty_exception_inners = NVL(qty_exception_inners,0.0)
                                     + var_qty_exception_inners
        WHERE     trf_number = dti_rec.trf_number
          AND     prd_lvl_child = var_prd_lvl_child
        AND        session_number = var_trans_session
        AND     inner_pk_tech_key = var_inner_pk_tech_key;

        var_any_trfpik_row := TRUE;

           IF SQL%NOTFOUND THEN
            var_pik_sequence := var_pik_sequence + 1;
            INSERT INTO trfpikww
                  (
                session_number,
                sequence_num,
                trf_process_flag,
                trf_ship_loc,
                trf_rec_loc,
                trf_number,
                prd_lvl_child,
                trf_qty_exception,
                trf_date_created,
                inner_pk_tech_key,
                entry_method,
                trf_ipid_conv,
                trf_cp_conv,
                master_inner_key,
                qty_exception_inners
                )
                VALUES
                (
                var_trans_session,
                var_pik_sequence,
                  'T',
                var_trf_ship_loc,
                var_trf_rec_loc,
                dti_rec.trf_number,
                var_prd_lvl_child,
                var_qty_exception,
                dti_rec.date_created,
                var_inner_pk_tech_key,
                var_entry_method,
                out_trf_ipid_conv,
                out_trf_cp_conv,
                0,
                var_qty_exception_inners
                );
            var_any_trfpik_row := TRUE;
        END IF;
    END IF;
END reconcile_prd;
-- ------------------------------------------------------------------------
-- ------------------------------------------------------------------------
PROCEDURE validate_05
IS
BEGIN

-- date created must be entered
    IF dti_rec.date_created IS NULL THEN
        var_error_code := 147;
        RAISE EXP_VALIDATION_FAILED;
    END IF;

-- the transfer number is required
    IF dti_rec.trf_number IS NULL THEN
        var_error_code := 1;
        RAISE EXP_VALIDATION_FAILED;
    END IF;

    IF pre_trf_number IS NULL OR pre_trf_number <> dti_rec.trf_number THEN
        -- Ashok - Added hints
        -- Log 30664 - Replace the query to use the TRFHDGWW
        BEGIN
        SELECT     /*+ INDEX(TRFHDGWW TRFHDGWWP1) */
                trf_number,
                trf_ship_loc,
                trf_rec_loc,
                trf_status
        INTO    var_trf_number,
                var_trf_ship_loc,
                var_trf_rec_loc,
                var_trf_header_status
        FROM     trfhdgww
        WHERE     trf_number = dti_rec.trf_number;

        EXCEPTION WHEN NO_DATA_FOUND THEN
            var_error_code := 1;
            RAISE EXP_VALIDATION_FAILED;
        END;
-- check the status before any updates
        IF var_trf_header_status IN (0, 5) THEN
            var_error_code := 209;
            RAISE EXP_VALIDATION_FAILED;
        END IF;
    ELSE
-- check the status of the header even if there are no new transfer number to reject the additional products for
-- the same transfer number
        IF var_trf_header_status IN (0, 5) THEN
            var_error_code := 209;
            RAISE EXP_VALIDATION_FAILED;
        END IF;
    END IF;

-- if the shipping reconciliation (pick exception) is by product then validate the
-- product number and the trfdtlee table when the transfer number or the
-- product number changed
    IF dti_rec.prd_lvl_number IS NOT NULL OR
        dti_rec.inner_pack_id IS NOT NULL OR
        dti_rec.prd_upc IS NOT NULL THEN
        var_entry_method := 1;
        IF dti_rec.inner_pack_id IS NOT NULL THEN
            var_entry_method := 3;
            var_error_code := 0;
            IF pre_inner_pack_id IS NULL OR
                pre_inner_pack_id <> dti_rec.inner_pack_id THEN
                get_inner_pk_key;
                IF var_error_code > 0 THEN
                    RAISE EXP_VALIDATION_FAILED;
                END IF;
            END IF;
            dti_rec.prd_lvl_number := save_prd_lvl_number;
            var_inner_pk_tech_key := save_inner_pk_tech_key;
        ELSE
            var_inner_pk_tech_key := 0;             -- 23505
        END IF;
        IF dti_rec.inner_pack_id IS NULL THEN
            IF dti_rec.prd_upc IS NOT NULL THEN
                var_error_code := 0;
                IF pre_prd_upc IS NULL OR dti_rec.prd_upc <> pre_prd_upc THEN
                    get_vpc_upc;
                    IF var_error_code > 0 THEN
                        RAISE EXP_VALIDATION_FAILED;
                    END IF;
                END IF;
                IF var_entry_method = 5 THEN
                    var_inner_pk_tech_key := save_inner_pk_tech_key;
                    dti_rec.inner_pack_id := save_inner_pack_id;
                ELSE
                    var_inner_pk_tech_key := 0;
                END IF;
                dti_rec.prd_lvl_number := save_prd_lvl_number;
            END IF;
        END IF;
    END IF;

    IF dti_rec.prd_lvl_number IS NOT NULL THEN
        IF pre_prd_lvl_number IS NULL OR pre_prd_lvl_number <> dti_rec.prd_lvl_number THEN
            var_error_code := 0;
            var_prd_lvl_number := dti_rec.prd_lvl_number;
            var_action_code := dti_rec.action_code;
            var_jda_origin := dti_rec.jda_origin;
            get_prd_lvl_child;
            IF var_error_code > 0 THEN
                      RAISE EXP_VALIDATION_FAILED;
            END IF;
        END IF;
        IF (pre_trf_number IS NULL OR pre_trf_number <> dti_rec.trf_number)
           OR
              (pre_prd_lvl_number IS NULL OR pre_prd_lvl_number <> dti_rec.prd_lvl_number)
           OR
           (pre_inner_pack_id IS NULL OR pre_inner_pack_id <> dti_rec.inner_pack_id) THEN        -- 29702
            BEGIN
                 -- Log 30664 - Replace the query to use the TRFDTGWW
                  SELECT     /*+ INDEX(TRFDTGWW TRFDTGWWP1) */
                                    trf_status,    trf_qty_ship, trf_in_carton,
                            trf_in_manifest, trf_qty_pick, trf_qty_cncl,
                            entry_method, trf_ipid_conv, trf_cp_conv,
                            qty_ship_inners, in_carton_inners,
                            in_manifest_inners, qty_pick_inners
                       INTO     var_trf_dtl_status, var_trf_qty_ship,
                            var_trf_in_carton, var_trf_in_manifest,
                            var_trf_qty_pick, var_trf_qty_cncl,
                            var_entry_method, out_trf_ipid_conv,
                            out_trf_cp_conv, var_qty_ship_inners,
                            var_in_carton_inners, var_in_manifest_inners,
                            var_qty_pick_inners
                       FROM     trfdtgww
                       WHERE   trf_number = dti_rec.trf_number
                       AND     prd_lvl_child = var_prd_lvl_child
                       AND     prd_lvl_master = 0
                    AND     inner_pk_tech_key = var_inner_pk_tech_key
                    AND     master_inner_key = 0;
                    IF var_trf_dtl_status IN (0, 5) THEN
                           var_error_code := 200;
                           RAISE EXP_VALIDATION_FAILED;
                       END IF;
            EXCEPTION
                WHEN NO_DATA_FOUND THEN
                           var_error_code := 207;
                           RAISE EXP_VALIDATION_FAILED;
                 END;
        END IF;
        reconcile_prd;
    ELSE
        reconcile_all;
    END IF;


END validate_05;
-- ------------------------------------------------------------------------
-- ------------------------------------------------------------------------
PROCEDURE validate_09
IS
BEGIN

-- the transfer number is required
    IF dti_rec.trf_number IS NULL THEN
        var_error_code := 1;
        RAISE EXP_VALIDATION_FAILED;
    END IF;


    BEGIN
        -- Ashok - Added hints
        -- Log 30664 - Replace the query to use the TRFHDGWW
        SELECT     /*+ INDEX(TRFHDGWW TRFHDGWWP1) */
                trf_status
        INTO    var_trf_header_status
        FROM    trfhdgww
        WHERE      trf_number = dti_rec.trf_number;
    EXCEPTION WHEN NO_DATA_FOUND THEN
        var_error_code := 1;
        RAISE EXP_VALIDATION_FAILED;
    END;
    IF var_trf_header_status >= 4 THEN
        var_error_code := 15;
        RAISE EXP_VALIDATION_FAILED;
    END IF;

    trfcnlup (dti_rec.trf_number, var_trans_user, var_trans_session, NULL, 'F');
-- 31157
    copy_trf_from_work;
-- 377868        SAVEPOINT SAVE_THIS;
        COMMIT WORK;
    clear_trf_work;
    IF dti_rec.trf_number IS NOT NULL THEN
        copy_trf_to_work;
    END IF;
-- 31157
    -- Reset Save Point and Initialize Array
--    SAVEPOINT SAVE_THIS;
    arr_rowid.DELETE;
    var_rowid_idx := 0;

END validate_09;
-- ------------------------------------------------------------------------
-- This procedure is called when there is a break in any of
-- the following columns:
--    action code
--    JDA origin
--    manifest number
--    carton number
--    transfer number
--
-- ------------------------------------------------------------------------
PROCEDURE check_for_breaks
IS
BEGIN

    var_break_for_po := FALSE;
    var_reason_break := FALSE;
    var_source_break := FALSE;

    IF pre_action_code = '01' THEN
        IF var_cross_dock_transfer = TRUE THEN
            IF NVL(pre_pmg_po_number,0) <> NVL(dti_rec.pmg_po_number,0) THEN
                var_break_for_po := TRUE;
            END IF;
        END IF;
        IF rtrim(pre_trf_reason_code) <> rtrim(dti_rec.trf_reason_code) THEN  --25276
            var_reason_break := TRUE;
        END IF;
        IF rtrim(pre_trf_source_id) <> rtrim(dti_rec.trf_source_id) THEN   -- 25843
            var_source_break := TRUE;
        END IF;
    END IF;
     IF pre_action_code = '01' THEN
        IF (pre_from_loc <> dti_rec.from_loc
            OR pre_to_loc <> dti_rec.to_loc
            OR var_break_for_po = TRUE
            OR var_reason_break = TRUE
            OR var_source_break = TRUE
            OR dti_rec.jda_origin <> pre_jda_origin
            OR pre_trf_number <> var_trf_number
            OR pre_action_code <> dti_rec.action_code) THEN
            var_prd_lvl_parent := arr_ship.FIRST;
            WHILE var_prd_lvl_parent IS NOT NULL LOOP
                IF arr_ship(var_prd_lvl_parent).arr_trf_number > 0 THEN
                    trfalwbld (arr_ship(var_prd_lvl_parent).arr_trf_number, 'H', 'F');
                END IF;
                var_prd_lvl_parent := arr_ship.NEXT(var_prd_lvl_parent);
            END LOOP;
-- 377868        SAVEPOINT SAVE_THIS;
        COMMIT WORK;
            arr_rowid.DELETE;
            var_rowid_idx := 0;
            arr_ship.DELETE;
            pre_prd_lvl_number := NULL;
            pre_inner_pack_id       := NULL;
            pre_vpc_prd_tech_key    := NULL;
            pre_inner_pk_tech_key   := NULL;
            pre_prd_upc             := NULL;
        END IF;
    END IF;

--    IF pre_action_code = '03' THEN
--        IF pre_prd_lvl_master > 0 THEN
--            create_comp;
--        END IF;
--    END IF;

    IF pre_action_code = '03'
    AND pre_jda_origin = 'F' THEN
        IF var_cross_dock_transfer = TRUE THEN
            IF NVL(pre_pmg_po_number,0) <> NVL(dti_rec.pmg_po_number,0) THEN
                var_break_for_po := TRUE;
            END IF;
        END IF;

        IF rtrim(pre_trf_reason_code) <> rtrim(dti_rec.trf_reason_code) THEN   --25276
            var_reason_break := TRUE;
        END IF;

        IF rtrim(pre_trf_source_id) <> rtrim(dti_rec.trf_source_id) THEN   -- 25843
            var_source_break := TRUE;
        END IF;

       END IF;
-- 23367
    IF pre_action_code = '03' THEN
        IF pre_jda_origin = 'F' THEN
            var_comp_trf_number := var_trf_number;
        ELSE
            var_comp_trf_number := dti_rec.trf_number;
        END IF;
    END IF;
-- 23367

-- 25048
    IF pre_action_code = '04' THEN
        var_comp_trf_number := dti_rec.trf_number;
    END IF;
-- 25048

    IF pre_action_code = '03' THEN
        IF var_manifest_shipping = TRUE THEN
            IF (dti_rec.mnfst_number IS NULL
                OR pre_manifest_number <> dti_rec.mnfst_number)
                OR pre_from_loc <> dti_rec.from_loc
                OR pre_to_loc <> dti_rec.to_loc
                OR dti_rec.action_code <> pre_action_code
                --OR dti_rec.jda_origin <> pre_jda_origin --Log 718826
                OR (dti_rec.jda_origin <> pre_jda_origin AND dti_rec.trf_number <> pre_trf_number)      --DEF788420
                OR var_break_for_po = TRUE
                OR var_reason_break = TRUE
                OR var_source_break = TRUE THEN
                IF pre_prd_lvl_master > 0 THEN
                     create_comp;
                END IF;
                IF var_mfp_flag = 'T' OR var_mfc_flag = 'T' THEN
                    UPDATE /*+ INDEX(trfmfhee trfmfheep1) */
                            trfmfhee
                    SET     trf_prd_asn = var_mfp_flag,
                            trf_car_asn = var_mfc_flag
                    WHERE   trf_manifest_key = var_trf_manifest_key;
                END IF;
                var_mfp_flag := 'F';
                var_mfc_flag := 'F';
                IF pre_jda_origin = 'F' THEN
                       FOR trf in c6 LOOP
                           trfalwbld (trf.trf_number, 'H', 'F');
                       END LOOP;
                END IF;
                IF (dti_rec.mnfst_number IS NULL                    -- 24628
                    OR pre_manifest_number <> dti_rec.mnfst_number)
                    OR pre_from_loc <> dti_rec.from_loc
                    OR pre_to_loc <> dti_rec.to_loc
                    OR dti_rec.action_code <> pre_action_code THEN
                    trfshpupd.drv_trfshpupd
                    (
                    var_trf_manifest_key,
                    TYPE_MANIFEST,
                    var_trf_car_id,
                    TO_CHAR (pre_date_created, jdastdpk.DATE_FORMAT), --log 26953
                    var_trans_user,
                    var_trans_session,
                    'T',
                    100,
                    'F'
                    );
                    -- 31157
                    copy_trf_from_work;
-- 377868        SAVEPOINT SAVE_THIS;
        COMMIT WORK;
                    clear_trf_work;
                    IF dti_rec.trf_number IS NOT NULL THEN
                        copy_trf_to_work;
                    END IF;
                    -- 31157
--                    SAVEPOINT SAVE_THIS;
                    arr_rowid.DELETE;
                    arr_ship.DELETE;
                    var_rowid_idx := 0;
                    var_manifest_shipping := FALSE;
                    var_carton_shipping := FALSE;
                    pre_prd_lvl_number := NULL;
                    pre_inner_pack_id       := NULL;
                    pre_vpc_prd_tech_key    := NULL;
                    pre_inner_pk_tech_key   := NULL;
                    pre_prd_upc             := NULL;
                    pre_manifest_number := NULL;        -- 23367
                END IF;                                                -- 24628
            ELSE
            -- 372590
                IF dti_rec.action_code = pre_action_code  -- 23367
                    AND pre_manifest_number IS NOT NULL
                    AND pre_manifest_number = dti_rec.mnfst_number
                    AND pre_manifest_number IS NOT NULL
                    AND dti_rec.carton_number IS NOT NULL
                    AND pre_from_loc = dti_rec.from_loc
                    AND pre_to_loc = dti_rec.to_loc
                    AND dti_rec.carton_number <> pre_carton_number
                    AND var_rejected = FALSE THEN
                    IF pre_prd_lvl_master > 0 THEN
                         create_comp;
                    END IF;
                END IF;
                -- 372590
                IF dti_rec.action_code = pre_action_code  -- 23367
                    AND pre_manifest_number IS NOT NULL
                    AND pre_manifest_number = dti_rec.mnfst_number
                    AND pre_manifest_number IS NOT NULL
                    AND dti_rec.carton_number IS NOT NULL
                    AND pre_from_loc = dti_rec.from_loc
                    AND pre_to_loc = dti_rec.to_loc
                    AND dti_rec.carton_number <> pre_carton_number
                    AND var_rejected = TRUE THEN
                    IF pre_prd_lvl_master > 0 THEN
                         create_comp;
                    END IF;
                    IF var_mfp_flag = 'T' OR var_mfc_flag = 'T' THEN
                        UPDATE /*+ INDEX(trfmfhee trfmfheep1) */
                                trfmfhee
                        SET     trf_prd_asn = var_mfp_flag,
                                trf_car_asn = var_mfc_flag
                        WHERE   trf_manifest_key = var_trf_manifest_key;
                    END IF;
                    var_mfp_flag := 'F';
                    var_mfc_flag := 'F';
                    IF pre_jda_origin = 'F' THEN
                        FOR trf in c6 LOOP
                            trfalwbld (trf.trf_number, 'H', 'F');
                        END LOOP;
                    END IF;
                    trfshpupd.drv_trfshpupd
                    (
                    var_trf_manifest_key,
                    TYPE_MANIFEST,
                    var_trf_car_id,
                    TO_CHAR (pre_date_created, jdastdpk.DATE_FORMAT), --log 26953
                    var_trans_user,
                    var_trans_session,
                    'T',
                    100,
                    'F'
                    );
                    -- 31157
                    copy_trf_from_work;
-- 377868        SAVEPOINT SAVE_THIS;
        COMMIT WORK;
                    clear_trf_work;
                    IF dti_rec.trf_number IS NOT NULL THEN
                        copy_trf_to_work;
                    END IF;
                    -- 31157
--                    SAVEPOINT SAVE_THIS;
                    arr_rowid.DELETE;
                    arr_ship.DELETE;
                    var_rowid_idx := 0;
                    var_manifest_shipping := FALSE;
                    var_carton_shipping := FALSE;
                    pre_prd_lvl_number := NULL;
                    pre_inner_pack_id       := NULL;
                    pre_vpc_prd_tech_key    := NULL;
                    pre_inner_pk_tech_key   := NULL;
                    pre_prd_upc             := NULL;
                    pre_manifest_number := NULL;        -- 23367
                END IF;
            END IF;
        ELSIF var_carton_shipping = TRUE THEN
            IF ((dti_rec.carton_number IS NULL
                OR pre_carton_number <> dti_rec.carton_number)
                OR pre_from_loc <> dti_rec.from_loc
                OR pre_to_loc <> dti_rec.to_loc
                --OR dti_rec.jda_origin <> pre_jda_origin --Log 718226
                OR (dti_rec.jda_origin <> pre_jda_origin AND dti_rec.trf_number <> pre_trf_number)          --DEF788420
                OR dti_rec.action_code <> pre_action_code
                OR var_break_for_po = TRUE
                OR var_reason_break = TRUE
                OR var_source_break = TRUE) THEN
                IF pre_prd_lvl_master > 0 THEN
                     create_comp;
                END IF;
                IF pre_jda_origin = 'F' THEN
                    FOR trf in c7 LOOP
                        trfalwbld (trf.trf_number, 'H', 'F');
                    END LOOP;
                END IF;
                IF (dti_rec.carton_number IS NULL                        -- 24628
                    OR pre_carton_number <> dti_rec.carton_number)
                    OR pre_from_loc <> dti_rec.from_loc
                    OR pre_to_loc <> dti_rec.to_loc
                    OR dti_rec.action_code <> pre_action_code THEN
                    trfshpupd.drv_trfshpupd
                        (
                        var_trf_carton_key,
                        TYPE_CARTON,
                        var_trf_car_id,
                        TO_CHAR (pre_date_created, jdastdpk.DATE_FORMAT), --log 26953
                        var_trans_user,
                        var_trans_session,
                        'T',
                        100,
                        'F'
                        );
                        -- 31157
                        copy_trf_from_work;
-- 377868        SAVEPOINT SAVE_THIS;
        COMMIT WORK;
                        clear_trf_work;
                        IF dti_rec.trf_number IS NOT NULL THEN
                            copy_trf_to_work;
                        END IF;
                        -- 31157
--                    SAVEPOINT SAVE_THIS;
                    arr_rowid.DELETE;
                    var_rowid_idx := 0;
                       var_manifest_shipping := FALSE;
                    var_carton_shipping := FALSE;
                    arr_ship.DELETE;
                    pre_prd_lvl_number := NULL;
                    pre_inner_pack_id       := NULL;
                    pre_vpc_prd_tech_key    := NULL;
                    pre_inner_pk_tech_key   := NULL;
                    pre_prd_upc             := NULL;
                    pre_carton_number := NULL;            -- 23367
                END IF;                                                    -- 24628
            ELSE                                     -- 23367
                IF dti_rec.action_code = pre_action_code
                    AND pre_carton_number = dti_rec.carton_number
                    AND dti_rec.mnfst_number IS NOT NULL
                    AND dti_rec.from_loc = pre_from_loc
                    AND dti_rec.to_loc = pre_to_loc THEN
                    IF pre_prd_lvl_master > 0 THEN
                         create_comp;
                    END IF;
                    IF pre_jda_origin = 'F' THEN
                        FOR trf in c7 LOOP
                            trfalwbld (trf.trf_number, 'H', 'F');
                        END LOOP;
                    END IF;
                    trfshpupd.drv_trfshpupd
                    (
                    var_trf_carton_key,
                    TYPE_CARTON,
                    var_trf_car_id,
                    TO_CHAR (pre_date_created, jdastdpk.DATE_FORMAT), --log 26953
                    var_trans_user,
                    var_trans_session,
                    'T',
                    100,
                    'F'
                    );
                    -- 31157
                    copy_trf_from_work;
-- 377868        SAVEPOINT SAVE_THIS;
        COMMIT WORK;
                    clear_trf_work;
                    IF dti_rec.trf_number IS NOT NULL THEN
                        copy_trf_to_work;
                    END IF;
                    -- 31157
--                    SAVEPOINT SAVE_THIS;
                    arr_rowid.DELETE;
                    var_rowid_idx := 0;
                       var_manifest_shipping := FALSE;
                    var_carton_shipping := FALSE;
                    arr_ship.DELETE;
                    pre_prd_lvl_number := NULL;
                    pre_inner_pack_id       := NULL;
                    pre_vpc_prd_tech_key    := NULL;
                    pre_inner_pk_tech_key   := NULL;
                    pre_prd_upc             := NULL;
                    pre_carton_number := NULL;            -- 23367
                END IF;
            END IF;
        ELSIF (pre_from_loc <> dti_rec.from_loc
            OR pre_to_loc <> dti_rec.to_loc
            OR var_break_for_po = TRUE
            OR var_reason_break = TRUE
            OR var_source_break = TRUE
            OR dti_rec.jda_origin <> pre_jda_origin
            OR pre_trf_number <> var_comp_trf_number)  THEN   -- 23367
            IF pre_prd_lvl_master > 0 THEN
                create_comp;
            END IF;
            IF pre_jda_origin = 'F' THEN
                var_prd_lvl_parent := arr_ship.FIRST;
                WHILE var_prd_lvl_parent IS NOT NULL LOOP
                    IF arr_ship(var_prd_lvl_parent).arr_trf_number > 0 THEN
--                    IF pre_jda_origin = 'F' THEN
                        trfalwbld (arr_ship(var_prd_lvl_parent).arr_trf_number, 'H', 'F');
--                   END IF;
                        trfshpupd.drv_trfshpupd
                        (
                        arr_ship(var_prd_lvl_parent).arr_trf_number,
                        TYPE_TRANSFER,
                        var_trf_car_id,
                        TO_CHAR (pre_date_created, jdastdpk.DATE_FORMAT), --log 26953
                        var_trans_user,
                        var_trans_session,
                        'T',
                        100,
                        'F'
                        );
                        -- 31157
                        copy_trf_from_work;
                        clear_trf_work;
                        IF dti_rec.trf_number IS NOT NULL THEN
                            copy_trf_to_work;
                        END IF;
                        -- 31157
                       END IF;
                       var_prd_lvl_parent := arr_ship.NEXT(var_prd_lvl_parent);
                 END LOOP;
            ELSE
                IF pre_trf_number > 0 THEN  -- 23367
                    trfshpupd.drv_trfshpupd
                    (
                    pre_trf_number,
                    TYPE_TRANSFER,
                    var_trf_car_id,
                    TO_CHAR (pre_date_created, jdastdpk.DATE_FORMAT), --log 26953
                    var_trans_user,
                    var_trans_session,
                    'T',
                    100,
                    'F'
                    );
                    -- 31157
                    copy_trf_from_work;
                    COMMIT WORK;        -- 377868
                    clear_trf_work;
                    IF dti_rec.trf_number IS NOT NULL THEN
                        copy_trf_to_work;
                    END IF;
                    -- 31157
                END IF;
            END IF;

-- 377868        SAVEPOINT SAVE_THIS;
        COMMIT WORK;
            arr_rowid.DELETE;
            var_rowid_idx := 0;
            var_manifest_shipping := FALSE;
            var_carton_shipping := FALSE;
            arr_ship.DELETE;
            pre_prd_lvl_number := NULL;
            pre_inner_pack_id       := NULL;
            pre_vpc_prd_tech_key    := NULL;
            pre_inner_pk_tech_key   := NULL;
            pre_prd_upc             := NULL;
            pre_carton_number := NULL;        -- 23367
            pre_manifest_number := NULL;    -- 23367
        END IF;
    END IF;

    IF pre_action_code = '04' THEN
        IF var_manifest_receiving = TRUE THEN
            IF (dti_rec.mnfst_number IS NULL
                OR pre_manifest_number <> dti_rec.mnfst_number)
                OR pre_from_loc <> dti_rec.from_loc
                OR pre_to_loc <> dti_rec.to_loc
                OR pre_action_code <> dti_rec.action_code THEN
                IF var_allow_multi_receipt = 'F' THEN
                    finish_mfp_rcv;
                END IF;
                trfrcvup
                    (
                    var_trf_manifest_key,
                    TYPE_MANIFEST,
                    TO_CHAR (pre_receipt_date, jdastdpk.DATE_FORMAT), --log 26953
                    var_trans_user,
                    var_trans_session,
                    'F',
                    'T',
                    in_batch_count,
                    'F',
                --begin retrofit
                    var_mir_ship_ext_cost, -- O13.01
                    var_mir_rec_ext_cost -- O13.01
                --end retrofit
                    );
                -- 31157
                copy_trf_from_work;
-- 377868        SAVEPOINT SAVE_THIS;
        COMMIT WORK;
                clear_trf_work;
                IF dti_rec.trf_number IS NOT NULL THEN
                    copy_trf_to_work;
                END IF;
                -- 31157
--                SAVEPOINT SAVE_THIS;
                arr_rowid.DELETE;
                var_rowid_idx := 0;
                var_manifest_receiving := FALSE;
                var_carton_receiving := FALSE;
                pre_prd_lvl_number := NULL;
                pre_inner_pack_id       := NULL;
                pre_vpc_prd_tech_key    := NULL;
                pre_inner_pk_tech_key   := NULL;
                pre_prd_upc             := NULL;
            END IF;
        ELSIF var_carton_receiving = TRUE THEN
            IF (dti_rec.carton_number IS NULL
                OR pre_carton_number <> dti_rec.carton_number)
                OR pre_from_loc <> dti_rec.from_loc
                OR pre_to_loc <> dti_rec.to_loc
                OR pre_action_code <> dti_rec.action_code THEN
                IF var_allow_multi_receipt = 'F' THEN
                    finish_ctd_rcv;
                END IF;
                trfrcvup
                    (
                    var_trf_carton_key,
                    TYPE_CARTON,
                    TO_CHAR (pre_receipt_date, jdastdpk.DATE_FORMAT), --log 26953
                    var_trans_user,
                    var_trans_session,
                    'F',
                    'T',
                    in_batch_count,
                    'F',
                 --begin retrofit
                    var_mir_ship_ext_cost, -- O13.01
                    var_mir_rec_ext_cost -- O13.01
                 --end retrofit
                    );
                -- 31157
                copy_trf_from_work;
-- 377868        SAVEPOINT SAVE_THIS;
        COMMIT WORK;
                clear_trf_work;
                IF dti_rec.trf_number IS NOT NULL THEN
                    copy_trf_to_work;
                END IF;
                -- 31157
--                SAVEPOINT SAVE_THIS;
                arr_rowid.DELETE;
                var_rowid_idx := 0;
                var_manifest_receiving := FALSE;
                var_carton_receiving := FALSE;
                pre_prd_lvl_number := NULL;
                pre_inner_pack_id       := NULL;
                pre_vpc_prd_tech_key    := NULL;
                pre_inner_pk_tech_key   := NULL;
                pre_prd_upc             := NULL;
            END IF;
--        ELSIF (pre_trf_number <> var_trf_number) THEN
-- 25048
        ELSIF (pre_trf_number <> var_comp_trf_number) THEN
                IF var_allow_multi_receipt = 'F' THEN
                    finish_trf_rcv;
                END IF;
                trfrcvup
                    (
                    pre_trf_number,
                    TYPE_TRANSFER,
                    TO_CHAR (pre_receipt_date, jdastdpk.DATE_FORMAT), --log 26953
                    var_trans_user,
                    var_trans_session,
                    'F',
                    'T',
                    in_batch_count,
                    'F',
                 --begin retrofit
                    var_mir_ship_ext_cost, -- O13.01
                    var_mir_rec_ext_cost   -- O13.01
                  --end retrofit
                    );
                -- 31157
                copy_trf_from_work;
-- 377868        SAVEPOINT SAVE_THIS;
        COMMIT WORK;
                clear_trf_work;
                IF dti_rec.trf_number IS NOT NULL THEN
                    copy_trf_to_work;
                END IF;
                -- 31157
--                SAVEPOINT SAVE_THIS;
                arr_rowid.DELETE;
                var_rowid_idx := 0;
                var_manifest_receiving := FALSE;
                var_carton_receiving := FALSE;
                pre_prd_lvl_number := NULL;
                pre_inner_pack_id       := NULL;
                pre_vpc_prd_tech_key    := NULL;
                pre_inner_pk_tech_key   := NULL;
                pre_prd_upc             := NULL;
        END IF;
    END IF;

--    pre_prd_lvl_number := NULL;
--    pre_inner_pack_id       := NULL;
--    pre_vpc_prd_tech_key    := NULL;
--    pre_inner_pk_tech_key   := NULL;
--    pre_prd_upc             := NULL;

END check_for_breaks;
-- ------------------------------------------------------------------------
PROCEDURE check_for_last_break
IS
BEGIN
    IF pre_action_code = '01' THEN
        var_prd_lvl_parent := arr_ship.FIRST;
           WHILE var_prd_lvl_parent IS NOT NULL LOOP
               IF arr_ship(var_prd_lvl_parent).arr_trf_number > 0 THEN
                   trfalwbld (arr_ship(var_prd_lvl_parent).arr_trf_number, 'H', 'F');
            END IF;
            var_prd_lvl_parent := arr_ship.NEXT(var_prd_lvl_parent);
        END LOOP;
        arr_ship.DELETE;
    END IF;

    IF pre_action_code = '03' THEN
        IF pre_prd_lvl_master > 0 THEN
            create_comp;
        END IF;
    END IF;
    IF pre_action_code = '03' THEN
        IF var_manifest_shipping = TRUE THEN
            IF var_mfp_flag = 'T' OR var_mfc_flag = 'T' THEN
                UPDATE /*+ INDEX(trfmfhee trfmfheep1) */
                        trfmfhee
                SET     trf_prd_asn = var_mfp_flag,
                        trf_car_asn = var_mfc_flag
                WHERE   trf_manifest_key = var_trf_manifest_key;
            END IF;
            var_mfp_flag := 'F';
            var_mfc_flag := 'F';
            IF pre_jda_origin = 'F' THEN
                FOR trf in c6 LOOP
                    trfalwbld (trf.trf_number, 'H', 'F');
                END LOOP;
            END IF;
            trfshpupd.drv_trfshpupd
                (
                var_trf_manifest_key,
                TYPE_MANIFEST,
                var_trf_car_id,
                TO_CHAR (pre_date_created, jdastdpk.DATE_FORMAT), --log 26953
                var_trans_user,
                var_trans_session,
                'T',
                100,
                'F',
               --begin retrofit
                 var_mir_ship_ext_cost); -- O13.01 - MLM - 01/14/03
               --end retrofit
            -- 31157 -- {WILDGENJ RETROFIT]
            copy_trf_from_work;
            COMMIT WORK;    -- 377868
            clear_trf_work;
-- 377868            IF dti_rec.trf_number IS NOT NULL THEN
--                copy_trf_to_work;
--            END IF;
            -- 31157
              var_manifest_shipping := FALSE;
            var_carton_shipping := FALSE;
            arr_ship.DELETE;
        ELSE
            IF var_carton_shipping = TRUE THEN
                IF pre_jda_origin = 'F' THEN
                    FOR trf in c7 LOOP
                        trfalwbld (trf.trf_number, 'H', 'F');
                    END LOOP;
                END IF;
                trfshpupd.drv_trfshpupd
                    (
                    var_trf_carton_key,
                    TYPE_CARTON,
                    var_trf_car_id,
                    TO_CHAR (pre_date_created, jdastdpk.DATE_FORMAT), --log 26953
                    var_trans_user,
                    var_trans_session,
                    'T',
                    100,
                    'F',
                  --begin retrofit
                    var_mir_ship_ext_cost); -- O13.01 - MLM - 01/14/03
                  --end retrofit
                -- 31157 -- {WILDGENJ RETROFIT]
                copy_trf_from_work;
                COMMIT WORK;   -- 377868
                clear_trf_work;
-- 377868                IF dti_rec.trf_number IS NOT NULL THEN
--                    copy_trf_to_work;
--                END IF;
                -- 31157
                 var_manifest_shipping := FALSE;
                var_carton_shipping := FALSE;
                arr_ship.DELETE;
            ELSE
                IF pre_jda_origin = 'F' THEN
                    var_prd_lvl_parent := arr_ship.FIRST;
                    WHILE var_prd_lvl_parent IS NOT NULL LOOP
                        IF arr_ship(var_prd_lvl_parent).arr_trf_number > 0 THEN
--                            IF pre_jda_origin = 'F' THEN
                            trfalwbld (arr_ship(var_prd_lvl_parent).arr_trf_number, 'H', 'F');
--                            END IF;
                            trfshpupd.drv_trfshpupd
                            (
                            arr_ship(var_prd_lvl_parent).arr_trf_number,
                            TYPE_TRANSFER,
                            var_trf_car_id,
                            TO_CHAR (pre_date_created, jdastdpk.DATE_FORMAT), --log 26953
                            var_trans_user,
                            var_trans_session,
                            'T',
                            100,
                            'F',
                          --begin retrofit
                             var_mir_ship_ext_cost); -- O13.01 - MLM - 01/14/03
                          --end retrofit
                        -- 31157 -- {WILDGENJ RETROFIT]
                        copy_trf_from_work;
                        COMMIT WORK;        -- 377868
                        clear_trf_work;
-- 377868                        IF dti_rec.trf_number IS NOT NULL THEN
--                            copy_trf_to_work;
--                        END IF;
                        -- 31157
                              END IF;
                         var_prd_lvl_parent := arr_ship.NEXT(var_prd_lvl_parent);
                          END LOOP;
                ELSE
                    IF pre_trf_number > 0 THEN
                        trfshpupd.drv_trfshpupd
                        (
                        pre_trf_number,
                        TYPE_TRANSFER,
                        var_trf_car_id,
                        TO_CHAR (pre_date_created, jdastdpk.DATE_FORMAT), --log 26953
                        var_trans_user,
                        var_trans_session,
                        'T',
                        100,
                        'F',
                      --Begin retrofit -- added for 2004.1 version
                        var_mir_ship_ext_cost);
                      --End retrofit -- added for 2004.1 version
                  -- 31157 -- {WILDGENJ RETROFIT]
                        copy_trf_from_work;
                        COMMIT WORK;  -- 377868
                        clear_trf_work;
--                        IF dti_rec.trf_number IS NOT NULL THEN
--                            copy_trf_to_work;
--                        END IF;
                        -- 31157
                    END IF;
                END IF;
                    var_manifest_shipping := FALSE;
                var_carton_shipping := FALSE;
                arr_ship.DELETE;
            END IF;
        END IF;
    END IF;
    IF pre_action_code = '04' THEN
        IF var_manifest_receiving = TRUE THEN
            IF var_trf_manifest_key IS NOT NULL THEN
                IF var_allow_multi_receipt = 'F' THEN
                    finish_mfp_rcv;
                END IF;
--                dbms_output.put_line('calling receiving'||var_trf_manifest_key);
                trfrcvup
                (
                var_trf_manifest_key,
                TYPE_MANIFEST,
                TO_CHAR (pre_receipt_date, jdastdpk.DATE_FORMAT), --log 26953
                var_trans_user,
                var_trans_session,
                'F',
                'T',
                in_batch_count,
                'F',
              --begin retrofit
                var_mir_ship_ext_cost, --O13.01
                var_mir_rec_ext_cost   --O13.01
              --end retrofit
                );
                -- 31157
                copy_trf_from_work;
                COMMIT WORK;        -- 377868
                clear_trf_work;
-- 377868                IF dti_rec.trf_number IS NOT NULL THEN
--                    copy_trf_to_work;
--                END IF;
                -- 31157
                  var_manifest_receiving := FALSE;
                var_carton_receiving := FALSE;
            END IF;
        ELSE
            IF var_carton_receiving = TRUE THEN
                IF var_trf_carton_key IS NOT NULL THEN
                    IF var_allow_multi_receipt = 'F' THEN
                        finish_ctd_rcv;
                    END IF;
                    trfrcvup
                    (
                    var_trf_carton_key,
                    TYPE_CARTON,
                    TO_CHAR (pre_receipt_date, jdastdpk.DATE_FORMAT), --log 26953
                    var_trans_user,
                    var_trans_session,
                    'F',
                    'T',
                    in_batch_count,
                    'F',
                  --begin retrofit
                    var_mir_ship_ext_cost, --O13.01
                    var_mir_rec_ext_cost   --O13.01
                  --end retrofit
                    );
                    -- 31157
                    copy_trf_from_work;
                    COMMIT WORK;  -- 377868
                    clear_trf_work;
-- 377868                   IF dti_rec.trf_number IS NOT NULL THEN
--                        copy_trf_to_work;
--                    END IF;
                    -- 31157
                      var_manifest_receiving := FALSE;
                    var_carton_receiving := FALSE;
                END IF;
            ELSE
                IF pre_trf_number > 0 THEN  -- 23367
                    IF var_allow_multi_receipt = 'F' THEN
                        finish_trf_rcv;
                    END IF;
                    trfrcvup
                        (
                        pre_trf_number,
                        TYPE_TRANSFER,
                        TO_CHAR (pre_receipt_date, jdastdpk.DATE_FORMAT), --log 26953
                        var_trans_user,
                        var_trans_session,
                        'F',
                        'T',
                        in_batch_count,
                        'F',
                     --begin retrofit
                        var_mir_ship_ext_cost, --O13.01
                         var_mir_rec_ext_cost   --O13.01
                     --end retrofit
                        );
                    -- 31157
                    copy_trf_from_work;
                    COMMIT WORK;   -- 377868
                    clear_trf_work;
-- 377868                   IF dti_rec.trf_number IS NOT NULL THEN
--                        copy_trf_to_work;
--                    END IF;
                    -- 31157
                     var_manifest_receiving := FALSE;
                    var_carton_receiving := FALSE;
                END IF;
            END IF;
        END IF;
    END IF;

END check_for_last_break;
-- ------------------------------------------------------------------------
BEGIN --  MAIN PROCESSING

    -- Log 30664 Set the batch flag to True
    trfdtlpkg.gv_batch_flag := 'Y';

-- Generate the session number
    bastkey ('trans_session', 0, var_trans_session);

-- Assign the user name

    var_trans_user         := 'TRFIMP';

    arr_ship.DELETE;
      arr_org.DELETE;

    BEGIN
          SELECT apply_asg_rule,    trf_prd_add_imp, max_nbr_of_lines,
                limit_prd_lvl_id, allow_multi_receipt, apply_shipped
           INTO var_apply_asg_rule, var_prd_add_imp, var_max_nbr_of_lines,
             var_limit_prd_lvl_id, var_allow_multi_receipt, var_apply_shipped
           FROM trfctlee
           WHERE control_key = 'I';
       EXCEPTION
          WHEN NO_DATA_FOUND THEN
            var_apply_asg_rule := 'F';
             var_allow_multi_receipt := 'T';
             var_apply_shipped := 'T';
       END;
-- select the default carrier

    var_default_car_id := NULL;

    SELECT MIN(trf_car_id)
    INTO var_default_car_id
    FROM   trfcaree;

-- Pre-processing: Insert all records into prctmpww and csttmpww if needed
-- 26390
-- only start this loop if the in_action = 'S' or 'R' or 'A'
-- 08/18/10  Pat G set to Z to by pass
--IF in_action IN ('S', 'R', 'A') THEN
IF in_action IN ('Z') THEN
/*
 FOR rec IN c0 LOOP

 --begin retrofit
 			-- Log Id: O13.01
	    var_ship_loc_cost := 0;
	    var_rec_loc_cost := 0;
	    var_mir_ship_ext_cost := 0;
	    var_mir_rec_ext_cost := 0;
--end retrofit
    -- Do Price Lookup for Receiving record using Receipt Date
    IF rec.action_code = ACT_RECV THEN
        var_event_date := NVL(rec.receipt_date, jdastdpk.jda_pmm_current_date);
    ELSE
        var_event_date := NVL(rec.date_created, jdastdpk.jda_pmm_current_date);
    END IF;

    FOR try IN 1..2 LOOP

        BEGIN

            IF try = 1 THEN
                -- Shipping Location
                var_org_lvl_number := rec.from_loc;
            ELSE
                -- Receiving Location
                var_org_lvl_number := rec.to_loc;
            END IF;

            IF var_org_lvl_number IS NULL THEN
                RAISE EXP_NEXT_RECORD;
            END IF;
            IF arr_org.EXISTS(var_org_lvl_number) THEN
                var_org_lvl_child := arr_org(var_org_lvl_number);
            ELSE
                -- Get the record from the table
                BEGIN
                    SELECT
-- /*+ INDEX(ORGMSTEE ORGMSTEEI4)
                        org_lvl_child
                    INTO    arr_org(var_org_lvl_number)
                    FROM    orgmstee
                    WHERE    org_lvl_number = var_org_lvl_number
                    AND    org_lvl_id = 1;

                    var_org_lvl_child := arr_org(var_org_lvl_number);
                   EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    arr_org(var_org_lvl_number) := NULL;
                    var_org_lvl_child := NULL;
                END;
            END IF;

            IF var_org_lvl_child IS NULL THEN
                -- Skip this step
                RAISE EXP_NEXT_RECORD;
            END IF;
            var_curr_code := jdastdpk.get_org_curr(var_org_lvl_child);
            BEGIN
            -- Insert records into csttmpww
                INSERT INTO csttmpww
                (
                session_number, user_id, prd_lvl_child,
                org_lvl_child, cst_date, inner_pk_tech_key, curr_code
                )
                VALUES
                (
                var_trans_session, var_trans_user, rec.prd_lvl_child,
                var_org_lvl_child, var_event_date, rec.inner_pk_tech_key,
                var_curr_code
                );

                -- Insert records into prctmpww
                  INSERT INTO prctmpww
                   (
                session_number, user_id, prd_lvl_child,
                prd_is_mm_group, org_lvl_child, prc_zone_id,
                cap_chain_id, prc_curr_code, parent_type,
                event_date, parent_key
                )
                  VALUES
                   (
                var_trans_session, var_trans_user, rec.prd_lvl_child,
                'F', var_org_lvl_child, 0,
                0, var_curr_code, 'X',
                var_event_date, 0
                );
            EXCEPTION
            WHEN DUP_VAL_ON_INDEX THEN
                -- Ignore
                NULL;
            END;

    -- Insert Set's Components records
            param_prd_child := rec.prd_lvl_child;
            FOR std IN C3 LOOP
                BEGIN
                -- Insert records into csttmpww
                    INSERT INTO csttmpww
                    (
                    session_number, user_id, prd_lvl_child,
                    org_lvl_child, cst_date, inner_pk_tech_key, curr_code
                    )
                    VALUES
                    (
                    var_trans_session, var_trans_user, std.prd_lvl_child,
                    var_org_lvl_child, var_event_date, std.inner_pk_tech_key,
                    var_curr_code
                    );

                    -- Insert records into prctmpww
                      INSERT INTO prctmpww
                          (
                    session_number, user_id, prd_lvl_child,
                    prd_is_mm_group, org_lvl_child, prc_zone_id,
                    cap_chain_id, prc_curr_code, parent_type,
                    event_date, parent_key
                    )
                      VALUES
                       (
                    var_trans_session, var_trans_user, std.prd_lvl_child,
                    'F', var_org_lvl_child, 0,
                    0, var_curr_code, 'X',
                    var_event_date, 0
                    );

                EXCEPTION
                WHEN DUP_VAL_ON_INDEX THEN
                    -- Ignore
                    NULL;
                END;
            END LOOP;
        EXCEPTION
        WHEN EXP_NEXT_RECORD THEN
            -- Ignore
            NULL;
        END;
      END LOOP;
    IF (c0%ROWCOUNT MOD in_batch_count) = 0 THEN
        -- Commit the changed
        COMMIT WORK;
    END IF;
     END LOOP;

  */
 --begin retrofit
 			-- Log Id: O13.01
	    var_ship_loc_cost := 0;
	    var_rec_loc_cost := 0;
	    var_mir_ship_ext_cost := 0;
	    var_mir_rec_ext_cost := 0;
--end retrofit

 -- Log # 30664
-- Used direct SQL instead of c0 cursor loop.
   INSERT  ALL
        INTO CSTTMPWW
          (
            session_number,
            user_id,
            prd_lvl_child,
            org_lvl_child,
            cst_date,
            inner_pk_tech_key,
            curr_code
           )
          VALUES
          (
            var_trans_session, -- session_number
            var_trans_user,  -- User id
            prd_lvl_child,
            org_lvl_child,
            event_date,
            inner_pk_tech_key,
            jdastdpk.get_org_curr(org_lvl_child) --cur
           )

        WITH PRCTMP AS ( -- Start PRCTMP
        SELECT    /*+
            ORDERED
            USE_NL(PRDPCDEE PRDMSTEE)
            INDEX(SDITRFDTI SDITRFDTIP1)
            INDEX(PRDMSTEE PRDMSTEEP1)
            INDEX(PRDPCDEE PRDPCDEEI4)
            */
            DISTINCT
            sditrfdti.from_loc,
            sditrfdti.to_loc,
            prdmstee.prd_lvl_child,
            DECODE(sditrfdti.action_code,ACT_SHIP,TRUNC(sditrfdti.date_created),ACT_RECV,TRUNC(sditrfdti.receipt_date) )  event_date,
            sditrfdti.action_code,
            prdpcdee.inner_pk_tech_key
        FROM    sditrfdti, prdpcdee, prdmstee
        WHERE     sditrfdti.session_number = in_session_number
        AND       sditrfdti.error_code IS NULL
        AND        sditrfdti.download_date_1 IS NULL
        AND     sditrfdti.inner_pack_id IS NOT NULL
        AND     sditrfdti.action_code IN (ACT_SHIP,ACT_RECV)
        AND     sditrfdti.action_code = DECODE(in_action,'S',ACT_SHIP,
               'R',ACT_RECV,sditrfdti.action_code)
        AND     prdpcdee.inner_pack_id = sditrfdti.inner_pack_id
        AND     prdmstee.prd_lvl_child = prdpcdee.prd_lvl_child
        AND     prdmstee.prd_lvl_id < 2
        AND     prdmstee.prd_style_ind = 'F'
        AND sditrfdti.from_loc IS NOT NULL
        AND  sditrfdti.to_loc IS NOT NULL
        UNION
        SELECT  /*+
            ORDERED
            USE_NL(PRDMSTEE PRDPCDEE)
            INDEX(SDITRFDTI SDITRFDTIP1)
            INDEX(PRDMSTEE PRDMSTEEI2)
            INDEX(PRDPCDEE PRDPCDEEI2)
            */
            DISTINCT
            sditrfdti.from_loc,
            sditrfdti.to_loc,
            prdmstee.prd_lvl_child,
            DECODE(sditrfdti.action_code,ACT_SHIP,TRUNC(sditrfdti.date_created),ACT_RECV,TRUNC(sditrfdti.receipt_date))  event_date,
            sditrfdti.action_code,
            prdpcdee.inner_pk_tech_key
        FROM    sditrfdti, prdmstee, prdpcdee
        WHERE   sditrfdti.session_number = in_session_number
        AND     sditrfdti.error_code IS NULL
        AND     sditrfdti.download_date_1 IS NULL
        AND     sditrfdti.inner_pack_id IS  NULL
        AND     sditrfdti.prd_lvl_number IS NOT NULL
        AND     sditrfdti.action_code IN (ACT_SHIP,ACT_RECV)
        AND     sditrfdti.action_code = DECODE(in_action,'S',ACT_SHIP,
               'R',ACT_RECV,sditrfdti.action_code)
        AND     prdmstee.prd_lvl_number = sditrfdti.prd_lvl_number
        AND     prdmstee.prd_lvl_id < 2
        AND     prdmstee.prd_style_ind = 'F'
        AND     prdpcdee.prd_lvl_child = prdmstee.prd_lvl_child
        AND     sditrfdti.from_loc IS NOT NULL
        AND     sditrfdti.to_loc IS NOT NULL
        AND     (prdpcdee.loose_pack_flag = 'T'
         OR (NVL(prdpcdee.loose_pack_flag,'F') <> 'T'
         AND prdpcdee.pack_lvl_parent IS NOT NULL
         AND prdpcdee.inv_units_per_inner = 1     -- 794716
         AND prdpcdee.sll_units_per_inner = 1     -- 794716
          )  )
          ) -- End Prctmp
        SELECT /*+
               ORDRED USE_NL(ORG)
               INDEX(ORG ORGMSTEEI4)
               */

           prd_lvl_child,
           inner_pk_tech_key,
           org_lvl_child,
           event_date
        FROM ( -- begin subqry

            SELECT prd_lvl_child,
                   inner_pk_tech_key ,
                   from_loc org_lvl_number,
                   NVL(event_date, sysdate) event_date
            FROM  PRCTMP
            UNION
            SELECT prd_lvl_child,
                   inner_pk_tech_key ,
                   to_loc org_lvl_number,
                   NVL(event_date, sysdate)event_date
              FROM PRCTMP
             UNION
             SELECT     /*+ ORDERED USE_NL(PRDSTMEE PRDSTDEE, PRDPCDEE)
                        INDEX(PRDSTMEE PRDSTMEEP1)
                        INDEX(PRDSTDEE PRDSTDEEP1)
                    */
                     prdstdee.prd_lvl_child,
                     prdpcdee.inner_pk_tech_key,
                     from_loc org_lvl_number,
                     NVL(event_date, sysdate) event_date
            FROM    PRCTMP , prdstmee, prdstdee, prdpcdee
            WHERE    prdstmee.prd_lvl_child = PRCTMP.prd_lvl_child
            AND        prdstdee.set_prd_lvl_child = prdstmee.prd_lvl_child
            AND        (
                    (prdstmee.set_type IN ('PREPCK','SPREPK')
            AND        (prdstmee.brk_on_ship = 'T' OR prdstmee.brk_on_rcv = 'T'))
            OR      (prdstmee.set_type = 'SHIPR')
                    )
            AND     prdpcdee.prd_lvl_child = prdstdee.prd_lvl_child
            AND     (loose_pack_flag = 'T'
                     OR (NVL(loose_pack_flag,'F') <> 'T'
                          AND pack_lvl_parent IS NOT NULL
                          AND prdpcdee.inv_units_per_inner = 1     -- 794716
                          AND prdpcdee.sll_units_per_inner = 1     -- 794716
                        )
                    )
            UNION
            SELECT     /*+ ORDERED USE_NL(PRDSTMEE PRDSTDEE, PRDPCDEE)
                        INDEX(PRDSTMEE PRDSTMEEP1)
                        INDEX(PRDSTDEE PRDSTDEEP1)
                    */
                     prdstdee.prd_lvl_child,
                     prdpcdee.inner_pk_tech_key,
                     to_loc org_lvl_number,
                     NVL(event_date, sysdate) event_date
            FROM    PRCTMP, prdstmee, prdstdee, prdpcdee
            WHERE    prdstmee.prd_lvl_child = PRCTMP.prd_lvl_child
            AND        prdstdee.set_prd_lvl_child = prdstmee.prd_lvl_child
            AND        (
                    (prdstmee.set_type IN ('PREPCK','SPREPK')
            AND        (prdstmee.brk_on_ship = 'T' OR prdstmee.brk_on_rcv = 'T'))
            OR      (prdstmee.set_type = 'SHIPR')
                    )
            AND     prdpcdee.prd_lvl_child = prdstdee.prd_lvl_child
            AND     (loose_pack_flag = 'T'
                     OR (NVL(loose_pack_flag,'F') <> 'T'
                          AND pack_lvl_parent IS NOT NULL
                          AND prdpcdee.inv_units_per_inner = 1     -- 794716
                          AND prdpcdee.sll_units_per_inner = 1     -- 794716
                        )
                    )
          -- End subqry
           )  qry, orgmstee org
        WHERE org.org_lvl_number = qry.org_lvl_number
        AND  org.org_lvl_id = 1 ;

        INSERT INTO PRCTMPWW
              (
                  session_number,
                  user_id,
                  prd_lvl_child,
                  prd_is_mm_group,
                  org_lvl_child,
                  prc_zone_id,
                  cap_chain_id,
                  prc_curr_code,
                  parent_type,
                  event_date,
                  parent_key
               )
        SELECT    DISTINCT
                  session_number,
                  user_id,
                  prd_lvl_child,
                  'F' prd_is_mm_group,
                  org_lvl_child,
                  0,
                  0,
                  curr_code,
                  'X' ,
                    cst_date,
                  0
        FROM CSTTMPWW
        WHERE session_number = var_trans_session;

        COMMIT;
       -- return;
-- Do cost and price lookup
-- ------------------------------------------------------------------------
 cstlookup (var_trans_session, var_trans_user, in_batch_count, 'T');
 prclookup (var_trans_session, 0, in_batch_count, 'T', 'F');
-- ------------------------------------------------------------------------
END IF;   -- 26390

    pre_trf_number := NULL;
       pre_carton_number := NULL;
       pre_manifest_number := NULL;
       pre_jda_origin := NULL;
       pre_action_code := NULL;
    pre_from_loc := NULL;
    pre_to_loc := NULL;
    pre_pmg_po_number := NULL;
    pre_prd_lvl_number := NULL;
    pre_trf_reason_code := NULL;
    pre_trf_source_id := NULL;
    var_any_trfpik_row := FALSE;
       var_mfc_flag         := 'F';
       var_mfp_flag         := 'F';
      var_trf_manifest_key    := NULL;
       var_trf_carton_key    := NULL;
       var_trf_number        := NULL;
    var_carton_shipping     := FALSE;
    var_manifest_shipping     := FALSE;
    var_carton_receiving     := FALSE;
    var_manifest_receiving     := FALSE;
       var_pik_sequence        := 0;
    pre_inner_pack_id       := NULL;
    pre_vpc_prd_tech_key    := NULL;
    pre_inner_pk_tech_key   := NULL;
    pre_prd_upc             := NULL;
    var_inner_pk_tech_key   := 0;
    pre_prd_lvl_master         := 0;
    pre_trf_set_ind         := NULL;
    pre_set_trf_number         := 0;
    pre_tot_quantity         := 0;
    pre_trf_manifest_key     := 0;
    pre_trf_carton_key         := 0;
    pre_trf_in_manifest     := 0;
    pre_trf_in_carton         := 0;
    pre_trf_in_transfer     := 0;
    var_rejected             := FALSE;  -- 23367
    pre_orig_trf_number     := NULL; -- 30664
--    var_exception_occured   := FALSE;      -- 31282

 --   dbms_output.put_line(' session_number :' ||in_session_number);
    FOR dti IN C1 LOOP
      BEGIN

          var_error_code := 0;
-- 23181
--          var_prd_lvl_master := 0;
          var_tdrc_tech_key := NULL;

        dti_rec := dti;


        --- Log 30664 pre-image/post image of transfers to work
        IF c1%ROWCOUNT = 1
        AND dti_rec.trf_number IS NOT NULL THEN
              copy_trf_to_work;
        END IF;
        ------------
-- 377868       IF c1%ROWCOUNT = 1 THEN
--            SAVEPOINT SAVE_THIS;
--        END IF;

        IF dti_rec.action_code = '03' THEN
            IF NVL(dti_rec.trf_source_id,0) = 0 THEN
                dti_rec.trf_source_id := 7;
            END IF;
        END IF;
        IF dti_rec.action_code = '01' THEN
            dti_rec.jda_origin := 'F';
        END IF;

        IF pre_action_code IS NOT NULL THEN
            IF pre_action_code IN ('01', '03', '04') THEN
-- 372950
              IF var_rejected <> TRUE THEN
                IF pre_action_code <> dti_rec.action_code
                   OR pre_jda_origin <> dti_rec.jda_origin
                      OR pre_from_loc <> dti_rec.from_loc
                      OR pre_to_loc <> dti_rec.to_loc
                      OR pre_manifest_number <> dti_rec.mnfst_number
                      OR pre_carton_number <> dti_rec.carton_number
                      OR pre_trf_number <> NVL(dti_rec.trf_number,0)
                   OR NVL(pre_pmg_po_number,0) <> NVL(dti_rec.pmg_po_number,0)
                   OR rtrim(pre_trf_reason_code) <> rtrim(dti_rec.trf_reason_code)  --25276
                   OR rtrim(pre_trf_source_id) <> rtrim(dti_rec.trf_source_id) THEN  -- 25843
                    check_for_breaks;
                END IF;
              END IF;
            ELSE
                IF pre_action_code IN ('02','05') THEN
                    IF pre_action_code <> dti_rec.action_code THEN
                        IF var_any_trfpik_row = TRUE THEN
                            trfpikexp
                            (
                                 var_trans_session,
                                 var_trans_user,
                                 var_trans_session,
                                 UPPER (MY_PROC_NAME),
                                 'T',                            -- 26390
                                 0
                                  );
                            var_any_trfpik_row := FALSE;
                            -- 31157
                            copy_trf_from_work;

-- 377868        SAVEPOINT SAVE_THIS;
                            COMMIT WORK;
                            arr_rowid.DELETE;
                            var_rowid_idx := 0;
--377868
                            clear_trf_work;

                            IF dti_rec.trf_number IS NOT NULL THEN
                                copy_trf_to_work;
                            END IF;
                            -- 31157

                            DELETE     /*+ INDEX(TRFPIKWW TRFPIKWWP1) */
                                FROM trfpikww
                            WHERE     session_number = var_trans_session;

                            -- Reset Save Point and Initialize Array
--    377868                        SAVEPOINT SAVE_THIS;
--                            arr_rowid.DELETE;
--                            var_rowid_idx := 0;
                           END IF;
                    END IF;
                END IF;
            END IF;

            IF pre_action_code <> dti_rec.action_code THEN
                pre_prd_lvl_number      := NULL;
                pre_trf_number          := NULL;
                   pre_carton_number       := NULL;
                   pre_manifest_number     := NULL;
                   pre_jda_origin          := NULL;
                pre_from_loc            := NULL;
                pre_to_loc              := NULL;
                pre_pmg_po_number       := NULL;
                pre_trf_reason_code     := NULL;
                pre_trf_source_id       := NULL;
                pre_inner_pack_id       := NULL;
                pre_vpc_prd_tech_key    := NULL;
                pre_inner_pk_tech_key   := NULL;
                pre_prd_upc             := NULL;
            END IF;
        END IF;
   --- Log 30664 pre-image/post image of transfers to work.

--        IF (var_exception_occured = TRUE     -- 31282
        IF (pre_action_code <> dti_rec.action_code
            OR pre_from_loc <> dti_rec.from_loc
            OR pre_to_loc <> dti_rec.to_loc
            OR NVL(pre_orig_trf_number,0) <> NVL(dti_rec.trf_number,0)) THEN

           -- copy transfers from the work tables
-- 31157             copy_trf_from_work;
-- 31205            clear_trf_work;
              -- Copy the next transfer header and its details
--            var_exception_occured := FALSE;         -- 31282
            IF dti_rec.trf_number IS NOT NULL THEN
                copy_trf_to_work;
            END IF;
        END IF;

       -- End Log 30664
        var_rowid_idx := var_rowid_idx + 1;
        arr_rowid(var_rowid_idx) := dti_rec.ROWID;
        pre_orig_trf_number := dti_rec.trf_number; -- 30664
--begin retrofit
     -- Log Id: O13.01
	    IF dti_rec.quantity > 0 THEN
		   var_ship_loc_cost := (dti_rec.mir_ship_ext_cost)/(dti_rec.quantity);
		   var_rec_loc_cost := (dti_rec.mir_rec_ext_cost)/(dti_rec.quantity);
	    END IF;

	    IF dti_rec.mir_ship_ext_cost > 0 THEN
		   var_mir_ship_ext_cost := dti_rec.mir_ship_ext_cost;
	    END IF;

	    IF dti_rec.mir_rec_ext_cost > 0 THEN
		   var_mir_rec_ext_cost := dti_rec.mir_rec_ext_cost;
	    END IF;
     -- End Log 013.01
        IF dti_rec.action_code = '00' THEN
               validate_00;
         END IF;

        IF dti_rec.action_code = '01' THEN
            validate_01;
        END IF;

         IF dti_rec.action_code = '02' THEN
               validate_02;
         END IF;

        IF dti_rec.action_code = '03' AND
           (dti_rec.jda_origin IS NULL OR dti_rec.jda_origin NOT IN ('F','T')) THEN
            var_error_code := 5;
            RAISE EXP_VALIDATION_FAILED;
        END IF;

           IF dti_rec.action_code = '03' AND dti_rec.jda_origin = 'F' THEN
                  validate_03_for_false;
           END IF;

          IF dti_rec.action_code = '03' AND dti_rec.jda_origin = 'T' THEN
                 validate_03_for_true;
           END IF;

           IF dti_rec.action_code = '04' THEN
               validate_04;
           END IF;

           IF dti_rec.action_code = '05' THEN
               validate_05;
          END IF;

           IF dti_rec.action_code = '09' THEN
               validate_09;
           END IF;
-- 23367
        IF var_rejected = TRUE THEN
            IF var_rej_action_code NOT IN ('03', '04') THEN
                var_rejected := FALSE;
            END IF;
        END IF;
        IF var_rejected = TRUE THEN
            IF var_rej_action_code = dti_rec.action_code
--    372950            AND var_rej_action_code = '03'
--                AND var_rej_jda_origin =  --Log 718226
--                    dti_rec.jda_origin    --Log 718226
                AND NVL(var_rej_from_loc,0) =
                    NVL(dti_rec.from_loc,0)
                AND NVL(var_rej_to_loc,0) =
                    NVL(dti_rec.to_loc,0) THEN
                IF var_rej_manifest_number IS NOT NULL THEN
                    IF dti_rec.mnfst_number IS NOT NULL THEN
                        IF var_rej_manifest_number = dti_rec.mnfst_number THEN
                            RAISE EXP_VALIDATION_FAILED;
                        ELSE
                            var_rejected := FALSE;
                        END IF;
                    ELSE
                        var_rejected := FALSE;
                    END IF;
                ELSE
                    IF var_rej_carton_number IS NOT NULL THEN
                        IF dti_rec.carton_number IS NOT NULL THEN
                            IF var_rej_carton_number = dti_rec.carton_number THEN
                                RAISE EXP_VALIDATION_FAILED;
                            ELSE
                                var_rejected := FALSE;
                            END IF;
                        ELSE
                            var_rejected := FALSE;
                        END IF;
                    ELSE
                        IF var_rej_trf_number IS NOT NULL THEN
                            IF dti_rec.trf_number IS NOT NULL THEN
                                IF var_rej_trf_number = dti_rec.trf_number THEN
                                    RAISE EXP_VALIDATION_FAILED;
                                ELSE
                                    var_rejected := FALSE;
                                END IF;
                            ELSE
                                var_rejected := FALSE;
                            END IF;
                        END IF;
                    END IF;
                END IF;
            ELSE
                var_rejected := FALSE;
            END IF;
        END IF;
-- 23367
--  pat g 08/05/09

/*
   		BEGIN
           	INSERT INTO trfaudee
                        (session_number, tech_key, trf_number,
                         carrier_name, mnfst_number,
                         carton_number, prd_lvl_number,
                         jda_origin, trf_type_code,
                         trf_reason_code, from_loc, to_loc,
                         quantity, action_code, receipt_date,
                         REFERENCE, trf_track_num,
                         trf_carton_wgt, date_created,
                         no_processed, error_code,
                         download_date_1, download_date_2, notes,
                         prd_mst_number, prd_upc, requested_by,
                         expt_receipt_date, cross_dock_loc,
                         pmg_po_number, inner_pack_id, trf_qty_flag,
                         trf_weight, trf_weight_uom,
                         --begin retrofit
                         mir_ship_loc_cost, mir_rec_loc_cost) -- 013.01
                         --end retrofit
                 VALUES (dti_rec.session_number, dti_rec.tech_key, dti_rec.trf_number,
                         dti_rec.carrier_name, dti_rec.mnfst_number,
                         dti_rec.carton_number, dti_rec.prd_lvl_number,
                         dti_rec.jda_origin, dti_rec.trf_type_code,
                         dti_rec.trf_reason_code, dti_rec.from_loc, dti_rec.to_loc,
                         dti_rec.quantity, dti_rec.action_code, dti_rec.receipt_date,
                         dti_rec.REFERENCE, dti_rec.trf_track_num,
                         dti_rec.trf_carton_wgt, dti_rec.date_created,
                         dti_rec.no_processed, dti_rec.error_code,
                         dti_rec.download_date_1, SYSDATE, dti_rec.notes,
                         dti_rec.prd_mst_number, dti_rec.prd_upc, dti_rec.requested_by,
                         dti_rec.expt_receipt_date, dti_rec.cross_dock_loc,
                         dti_rec.pmg_po_number, dti_rec.inner_pack_id,
                         dti_rec.trf_qty_flag, dti_rec.trf_weight,
                         dti_rec.trf_weight_uom,
                         --begin retrofit
                         var_ship_loc_cost, var_rec_loc_cost);
                         --end retrofit

		EXCEPTION
            	WHEN DUP_VAL_ON_INDEX THEN
				NULL;
		END;
   -- */
        pre_action_code         := dti_rec.action_code;
        pre_jda_origin          := dti_rec.jda_origin;
        pre_from_loc            := dti_rec.from_loc;
        pre_to_loc              := dti_rec.to_loc;
        pre_manifest_number     := dti_rec.mnfst_number;
        pre_carton_number       := dti_rec.carton_number;
        pre_trf_number          := var_trf_number;
        pre_prd_lvl_number      := dti_rec.prd_lvl_number;
        pre_pmg_po_number       := dti_rec.pmg_po_number;
        pre_inner_pack_id       := dti.inner_pack_id;
        pre_vpc_prd_tech_key    := var_vpc_prd_tech_key;
        pre_inner_pk_tech_key   := var_inner_pk_tech_key;
        pre_prd_upc             := var_prd_upc;
        pre_trf_source_id       := dti_rec.trf_source_id;
        pre_date_created        := dti_rec.date_created;
        pre_receipt_date        := dti_rec.receipt_date;

-- 373129 save it for the last break check

        last_action_code         := dti_rec.action_code;
        last_jda_origin          := dti_rec.jda_origin;
        last_from_loc            := dti_rec.from_loc;
        last_to_loc              := dti_rec.to_loc;
        last_manifest_number     := dti_rec.mnfst_number;
        last_carton_number       := dti_rec.carton_number;
        last_trf_number          := var_trf_number;

        -- Purge record from sditrfdti
        DELETE  /*+ ROWID(sditrfdti) */
              FROM     sditrfdti
        WHERE     ROWID = dti_rec.ROWID;

        EXCEPTION
            WHEN EXP_VALIDATION_FAILED THEN

            IF dti_rec.action_code NOT IN ('01', '02') THEN -- 28081
-- 377868                ROLLBACK TO SAVE_THIS;
                ROLLBACK WORK;
-- 377868  clear all work table and recreate them
                clear_trf_work;
                IF dti_rec.trf_number IS NOT NULL THEN
                    copy_trf_to_work;
                END IF;
-- 377868

                FORALL idx IN 1..var_rowid_idx
                       UPDATE     /*+ ROWID(sditrfdti) */
                               sditrfdti
                          SET     download_date_1 = SYSDATE,
                               error_code = 0 -- 23367
                       WHERE     ROWID = arr_rowid(idx);
               END IF;

            UPDATE /*+ ROWID(sditrfdti) */
                sditrfdti
                SET download_date_1 = SYSDATE,
                error_code = var_error_code
                WHERE ROWID = dti_rec.ROWID;

-- 23367
            IF dti_rec.action_code NOT IN ('01', '02') THEN        -- 28081
                var_rejected := TRUE;
                var_rej_action_code := dti_rec.action_code;
                var_rej_jda_origin := dti_rec.jda_origin;
                var_rej_trf_number := dti_rec.trf_number;
                var_rej_manifest_number := dti_rec.mnfst_number;
                var_rej_carton_number := dti_rec.carton_number;
                var_rej_from_loc := dti_rec.from_loc;
                var_rej_to_loc := dti_rec.to_loc;
                pre_manifest_number := dti_rec.mnfst_number;
                pre_carton_number := dti_rec.carton_number;
                pre_trf_number := var_trf_number;
-- 23367
                pre_prd_lvl_master := 0;
                pre_trf_set_ind := NULL;
                pre_prd_lvl_number := 0;
                pre_set_trf_number := 0;
                pre_tot_quantity := 0;
                pre_trf_manifest_key := 0;
                pre_trf_carton_key := 0;
                pre_trf_in_manifest := 0;
                pre_trf_in_carton := 0;
                pre_trf_in_transfer := 0;
                var_rowid_idx := 0;
                pre_trf_number := 0;
-- 26716
                pre_from_loc := 0;
                pre_to_loc := 0;
                pre_pmg_po_number :=0;
                pre_inner_pack_id := 0;
                pre_vpc_prd_tech_key := NULL;
                pre_prd_upc := NULL;
                 pre_trf_source_id := NULL;
-- 26716
                arr_rowid.DELETE;
                arr_ship.DELETE;
-- 377868        SAVEPOINT SAVE_THIS;
        COMMIT WORK;
            END IF;
--        clear_trf_work;                 -- 31282
--        var_exception_occured := TRUE;   -- 31282
           END;

    END LOOP;
-- 373129 start  check if the last reject is the same as the last good record
    IF var_rejected = TRUE THEN
        IF var_rej_action_code = last_action_code
--            AND var_rej_jda_origin =  --Log 718226
--                last_jda_origin       --Log 718226
            AND NVL(var_rej_from_loc,0) =
                NVL(last_from_loc,0)
            AND NVL(var_rej_to_loc,0) =
                NVL(last_to_loc,0) THEN
            IF var_rej_manifest_number IS NOT NULL THEN
                IF last_manifest_number IS NOT NULL THEN
                    IF var_rej_manifest_number = last_manifest_number THEN
                        NULL;
                    ELSE
                        var_rejected := FALSE;
                    END IF;
                ELSE
                    var_rejected := FALSE;
                END IF;
            ELSE
                IF var_rej_carton_number IS NOT NULL THEN
                    IF last_carton_number IS NOT NULL THEN
                        IF var_rej_carton_number = last_carton_number THEN
                            NULL;
                        ELSE
                            var_rejected := FALSE;
                        END IF;
                    ELSE
                        var_rejected := FALSE;
                    END IF;
                ELSE
                     IF var_rej_trf_number IS NOT NULL THEN
                        IF last_trf_number IS NOT NULL THEN
                            IF var_rej_trf_number = last_trf_number THEN
                                NULL;
                            ELSE
                                var_rejected := FALSE;
                            END IF;
                        ELSE
                            var_rejected := FALSE;
                        END IF;
                    END IF;
                END IF;
            END IF;
        ELSE
            var_rejected := FALSE;
           END IF;
       END IF;
-- 373129 end

    IF pre_action_code IS NOT NULL THEN
-- 372950
        IF var_rejected <> TRUE THEN
          IF pre_action_code IN ('01', '03', '04') THEN
            check_for_last_break;
          END IF;
        END IF;
    END IF;

    -- Process the pick EXCEPTION records IF any
    IF var_any_trfpik_row = TRUE THEN
        -- Call TRFPIKEXP stored procedure
        trfpikexp
            (
                 var_trans_session,
                 var_trans_user,
                 var_trans_session,
                 UPPER (MY_PROC_NAME),
                 'T',                            -- 26390
                 0
              );
       END IF;

     --- Log 30664 pre-image/post image of transfers to work
     -- copy transfers from the work tables

      dti_rec.trf_number := NULL;               -- 31316

      copy_trf_from_work;
      clear_trf_work;

       COMMIT WORK;

    -- Call INVTRNPRC (Inventory Transaction processing) only if the feed number
    -- is not specified. If it is specified, then these transactions would be
    -- processed later using upload

    IF in_trans_feed = 0 THEN
        var_count := 0;
        BEGIN
                 SELECT     /*+ FIRST_ROWS INDEX(INVTRNEE INVTRNEEP1) */
                        1
                   INTO     var_count
                   FROM     invtrnee
                  WHERE     trans_session = var_trans_session
            AND     ROWNUM = 1;

                 invtrnprc (var_trans_session, 'T');
          EXCEPTION
                 WHEN NO_DATA_FOUND THEN
                NULL;
          END;
       ELSE
    -- Update the feed number of the header record
        UPDATE /*+ INDEX(INVTRHEE INVTRHEEP1) */
                invtrhee
             SET trans_feed = in_trans_feed
           WHERE trans_session = var_trans_session;
       END IF;

    -- Delete all the records in prctmpww
    -- Ashok -  Added hints
    DELETE     /*+ INDEX(PRCTMPWW PRCTMPWWP1) */
    FROM     prctmpww
    WHERE     session_number = var_trans_session;


    -- Delete all the records in csttmpww
       DELETE    /*+ INDEX(CSTTMPWW CSTTMPWWP1) */
    FROM     csttmpww
    WHERE     session_number = var_trans_session;


    -- Delete all records FROM trfpikww
    DELETE     /*+ INDEX(TRFPIKWW TRFPIKWWP1) */
    FROM     trfpikww
    WHERE     session_number = var_trans_session;

       COMMIT WORK;

EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK WORK;     -- 377868
    clear_trf_work;    -- 377868
    errhandle (MY_PROC_NAME);
    IF SQLCODE IN (ERR_SNAPSHOT_TOO_OLD, ERR_DEADLOCK_DETECTED) THEN
        trfdtlim
            (
                in_session_number,
                in_action,
                in_trans_feed,
                in_batch_count
                 );
             RETURN;
      END IF;

      RAISE;

END;
