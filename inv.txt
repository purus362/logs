create or replace PACKAGE PKG_CONNECT_SEARCH_ORDERS
IS
  /*****************************************************************************************************************************
  *
  * Program Name              : PKG_CONNECT_SEARCH_ORDERS
  *
  * Need to change owner type in dynamic query to fetch the partition name
  *
  *
  * Author                    : TCS
  * Creation Date             : 05-01-2015
  * Description               : This script provides search result for Multi order search
  *
  * Calling program           : APP LAYER (JAVA)
  *
  * Called program            : PKG_CONNECT_SEARCH_ORDERS
  *
  *
  * Input parameters          : Ordertype,lastname,postcode,emailid,trackingid,clientid,Order Number
  *
  * Output parameters         : OBJECTS OF order details
  *
  * Modifications : a history of changes to the program
  * <DD-MM-YYYY>   <Modifier Name>    		<Description>  						<Version Id>
  *  02-12-2015		    TCS			Tune PR_CONNECT_SINGLE_SEARCH_HIST Proc 		1.1
  *  07-12-2015      TCS                 For email ID Size     						1.2
  ****************************************************************************************************************************/

  --need to incorporate order expected date into the return object

     PROCEDURE PR_CONNECT_MULTI_SEARCH(
      	  P_ORDER_TYPE CONNECT_CUSTOMER_TRANS.ORDER_TYPE%TYPE,
      P_LAST_NAME CONNECT_CUSTOMER_TRANS.CUSTOMER_SURNAME%TYPE,
      P_FIRST_NAME CONNECT_CUSTOMER_TRANS.CUSTOMER_FIRST_NAME%TYPE,
      P_EMAILID CONNECT_CUSTOMER_TRANS.CUSTOMER_EMAILID%TYPE,
      P_TRACKING_ID CONNECT_PARCEL_STATE.PARCEL_NUMBER%TYPE,
      P_CLIENT_ID CONNECT_PARCEL_STATE.CLIENT_ID%TYPE,
      P_USER_ID VARCHAR2,
      P_STRT_DT VARCHAR2,
      P_END_DT VARCHAR2,
      RESPONSE_CODE OUT VARCHAR2,
      RESPONSE_DESC OUT VARCHAR2,
      P_MULTI_SEARCH OUT OBJ_MULTI_ARRAY_TAB);


PROCEDURE PR_CONNECT_SINGLE_SEARCH
(
      P_ORDER_ID  IN CONNECT_CUSTOMER_TRANS.ORDER_NUMBER%TYPE,
      P_CLIENT_ID IN CONNECT_PARCEL_STATE.CLIENT_ID%TYPE,
      P_STORE_ID  IN CONNECT_PARCEL_STATE.FINAL_DESTINATION_ID%TYPE,
      P_EPOD_FLAG IN  VARCHAR2,
      P_SEARCH_DETAILS OUT OBJ_ORDER_DET_TBL,
      RESPONSE_CODE OUT VARCHAR2,
      RESPONSE_DESC OUT VARCHAR2
);

END PKG_CONNECT_SEARCH_ORDERS;


create or replace PACKAGE BODY  PKG_CONNECT_SEARCH_ORDERS
IS
--07-05-2015
PROCEDURE PR_MULTI_SEARCH_EMAIL
(
    ORDER_TYPE          VARCHAR2,
    CLIENT_ID           VARCHAR2,
    EMAIL_ID            VARCHAR2,
    V_RESPONSE_CODE OUT VARCHAR2,
    V_RESPONSE_DESC OUT VARCHAR2,
    V_FINAL_OBJ     OUT OBJ_MULTI_ARRAY_TAB
)

IS

  V_ORDER_TYPE_LOWER   VARCHAR2(1000):=LOWER(ORDER_TYPE);
  V_CLIENT_ID_LOWER    VARCHAR2(1000):=LOWER(CLIENT_ID);
  V_EMAIL_ID_LOWER     VARCHAR2(1000):=LOWER(EMAIL_ID);

  V_VAR2               VARCHAR2(4000);
  V_VAR3               VARCHAR2(4000);
  V_VAR7               VARCHAR2(4000);
  V_VAR8               VARCHAR2(4000);
  V_VAR9               VARCHAR2(4000);
  V_VAR11              VARCHAR2(4000);
  V_VAR12              VARCHAR2(4000);
  V_VAR16              VARCHAR2(4000);
  V_VAR20              VARCHAR2(4000);
  V_VAR21              VARCHAR2(4000);
  V_VAR24              VARCHAR2(32767);
  V_VAR25              VARCHAR2(32767);
  V_VAR30              VARCHAR2(32767);
  V_VAR40              VARCHAR2(32767);
  V_VAR50              VARCHAR2(32767);
  V_VAR60              VARCHAR2(32767);
  V_VAR70              VARCHAR2(32767);
  V_MSG                VARCHAR2(32767);
  V_OPERATION          VARCHAR2(32767);
  V_COUNT1             NUMBER         :=0;
  V_VAR1               VARCHAR2(1000) :='HITTING TRANSACTION TABLE';
  V_INVALID_PARAM_CODE VARCHAR2(100)  :='412';
  V_INVALID_PARAM_DESC VARCHAR2(1000) :='INVALID PARAMETERS';
  V_PART_NAME          VARCHAR2(1000);
  BIZ_EXP              EXCEPTION;

  V_OBJECT_SEARCH OBJ_MULTI_SEARCH_TBL;
  V_NESTED_OBJ ORDR_LIST_TBL;
  V_PARTITION_LIST OBJ_PARTITION_LIST_TBL;

BEGIN

/*THIS PROCEDURES HITS THE TRANSACTION TABLE WITH THE EMAIL IDS AND FETCHES THE
CORRESPONDING RESULTS.IF NO DATA FOUND THEN HIT THE HISTORY RECORDS AND RETURN
THE RESPONSE CODE 000*/

 V_OPERATION:='INITIALISING THE OBJECTS';

 V_OBJECT_SEARCH  :=OBJ_MULTI_SEARCH_TBL();
 V_FINAL_OBJ      :=OBJ_MULTI_ARRAY_TAB();
 V_NESTED_OBJ     :=ORDR_LIST_TBL();
 V_PARTITION_LIST :=OBJ_PARTITION_LIST_TBL();

/* SETTING UP THE EXPRESSIONS FOR THE DYNAMIC QUERY */

 V_VAR2:=q'[ AND LOWER(B.CLIENT_ID)=']'||V_CLIENT_ID_LOWER||q'[']';

 V_VAR3:=q'[ AND LOWER(B.CUSTOMER_EMAILID) =']'||V_EMAIL_ID_LOWER||q'[']';

 V_VAR40:=q'[ AND LOWER(B.ORDER_TYPE)=']'||V_ORDER_TYPE_LOWER||q'[']';

V_OPERATION:='SELECT OBJ_MULTI_SEARCH';

 V_VAR8:=q'[ SELECT OBJ_MULTI_SEARCH
                  (
                    ORDER_NUMBER,
                    ORDER_TYPE,
                    CLIENT_ID,
                    CLIENT_NAME,
                    CUSTOMER_SURNAME,
                    CUSTOMER_FIRST_NAME,
                    CUSTOMER_EMAILID,
                    ORDER_CREATED_DATE
                  ) FROM ( ]';

V_OPERATION:='SELECT CONNECT_CUSTOMER_TRANS BY MAIL ID';

 V_VAR50:=q'[ SELECT B.ORDER_NUMBER,
                    B.ORDER_TYPE,
                    B.CLIENT_ID,
                    B.CLIENT_NAME,
                    B.CUSTOMER_SURNAME,
                    B.CUSTOMER_FIRST_NAME,
                    B.CUSTOMER_EMAILID,
                    B.ORDER_CREATED_DATE
               FROM CONNECT_CUSTOMER_TRANS B
              WHERE LOWER(B.CUSTOMER_EMAILID) =']'||V_EMAIL_ID_LOWER||q'[']';

/*HANDLING THE OPTIONAL ORDER TYPE FOR TRANS QUERY*/

  IF V_ORDER_TYPE_LOWER IS NOT NULL THEN
    V_VAR30             :=V_VAR50||V_VAR40;
  ELSE
    V_VAR30:=V_VAR50;
  END IF;

 V_VAR11:=  '  CONNECT_CUSTOMER_TRANS_AUD ';

 V_VAR60:=  q'[ B WHERE LOWER(B.CUSTOMER_EMAILID) =']'||V_EMAIL_ID_LOWER||q'[']';

/*HANDLING THE OPTIONAL ORDER TYPE FOR HISTORY QUERY*/

  IF V_ORDER_TYPE_LOWER IS NOT NULL THEN
    V_VAR12             :=V_VAR60||V_VAR40;
  ELSE
    V_VAR12:=V_VAR60;
  END IF;

 V_VAR16:= 'PARTITION ';

V_OPERATION:='CONSTRUCT DYNAMIC QUERY V_VAR20';

 V_VAR20:='SELECT
                 ORDER_NUMBER,
                 ORDER_TYPE,
                 CLIENT_ID,
                 CLIENT_NAME,
                 CUSTOMER_SURNAME,
                 CUSTOMER_FIRST_NAME,
                 CUSTOMER_EMAILID,
                 ORDER_CREATED_DATE
            FROM
            (
                  SELECT
                         ORDER_NUMBER,
                         ORDER_TYPE,
                         CLIENT_ID,
                         CLIENT_NAME,
                         CUSTOMER_SURNAME,
                         CUSTOMER_FIRST_NAME,
                         CUSTOMER_EMAILID,
                         ORDER_CREATED_DATE,
                         ROW_NUMBER() OVER (PARTITION BY ORDER_NUMBER,CLIENT_ID ORDER BY END_DATE DESC NULLS LAST) RNK FROM
                       (
                          SELECT
                                 B.ORDER_NUMBER,
                                 B.ORDER_TYPE,
                                 B.CLIENT_ID,
                                 B.CLIENT_NAME,
                                 B.CUSTOMER_SURNAME,
                                 B.CUSTOMER_FIRST_NAME,
                                 B.CUSTOMER_EMAILID,
                                 B.ORDER_CREATED_DATE,
                                 B.END_DATE,
                                 ROW_NUMBER() OVER (PARTITION BY B.ORDER_NUMBER,B.CLIENT_ID ORDER BY B.END_DATE DESC NULLS LAST) RN
                      FROM ';

 V_VAR21:=' WHERE RN=1 ) WHERE RNK=1 ';

/* SETTING UP THE EMAIL ID FILTER FOR THE DYNAMIC QUERY */

  IF V_EMAIL_ID_LOWER    IS NOT NULL THEN
    IF V_CLIENT_ID_LOWER IS NOT NULL THEN
      V_VAR7             :=V_VAR2;
    END IF;
  ELSE
    V_RESPONSE_CODE:=V_INVALID_PARAM_CODE;
    V_RESPONSE_DESC:=V_INVALID_PARAM_DESC;
    RAISE BIZ_EXP;
  END IF;

 V_VAR9:=V_VAR8||V_VAR30||V_VAR7||')';

 V_OPERATION:='SETTING UP THE OBJECT FOR TRANSACTION DATA';

/*ORDER LIST IS FETCHED FROM THE TRANSACTION TABLE WITH QUERY V_VAR9 INTO
V_OBJECT_SEARCH ELSE MOVE TO THE HISTORY TABLE */


 EXECUTE IMMEDIATE V_VAR9 BULK COLLECT INTO V_OBJECT_SEARCH;

 FOR I IN (SELECT DISTINCT CUSTOMER_FIRST_NAME,CUSTOMER_SURNAME FROM  TABLE(V_OBJECT_SEARCH) ORDER BY  CUSTOMER_FIRST_NAME,CUSTOMER_SURNAME DESC ) LOOP

 V_COUNT1:=V_COUNT1+1;

 V_OPERATION:='SETTING THE RETURN OBJECT FROM TRANS TABLE';


    SELECT ORDR_LIST(ORDER_NUMBER,ORDER_TYPE,DLV_DATE,CLIENT_ID,CLIENT_NAME)
    BULK COLLECT INTO V_NESTED_OBJ
    FROM
      (
      SELECT DISTINCT ORDER_NUMBER,
             ORDER_TYPE,
             --TO_CHAR(TO_DATE(ORDER_CREATED_DATE,'DD-MM-YYYY'),'YYYY-MM-DD HH:MI:SS am') AS DLV_DATE,
             TO_CHAR(ORDER_CREATED_DATE, 'YYYY-MM-DD HH24:MI:SS') AS DLV_DATE,
             CLIENT_ID,
             CLIENT_NAME
        FROM TABLE(V_OBJECT_SEARCH)
       WHERE LOWER(CUSTOMER_FIRST_NAME||' '||CUSTOMER_SURNAME)=LOWER(I.CUSTOMER_FIRST_NAME||' '||I.CUSTOMER_SURNAME)
        );
 V_FINAL_OBJ.EXTEND;

  V_OPERATION:='SETTING THE V_FINAL_OBJ';

 V_FINAL_OBJ(V_COUNT1):=OBJ_MULTI_ARRAY(I.CUSTOMER_FIRST_NAME||' '||I.CUSTOMER_SURNAME,V_NESTED_OBJ);

END LOOP;

/* HITTING THE HISTORY TABLE */

IF V_FINAL_OBJ.COUNT =0 THEN

 V_VAR1 :='FETCHING THE PARTITION NAMES';
 V_OPERATION:='SELECT OBJ_PARTITION_LIST';

    SELECT OBJ_PARTITION_LIST(PARTITION_NAME)
    BULK COLLECT INTO V_PARTITION_LIST
    FROM
      (SELECT PARTITION_NAME
         FROM
            (SELECT PARTITION_NAME,
                    TO_DATE ( TRIM ( ''''
               FROM REGEXP_SUBSTR ( EXTRACTVALUE ( DBMS_XMLGEN. GETXMLTYPE ( 'SELECT HIGH_VALUE FROM ALL_TAB_PARTITIONS
                                                                               WHERE TABLE_NAME='''
                                                                               || TABLE_NAME
                                                                               || ''' AND TABLE_OWNER = '''
                                                                               || TABLE_OWNER
                                                                               || ''' AND PARTITION_NAME = '''
                                                                               || PARTITION_NAME
                                                                               || ''''), '//text()'), '''.*?''')) ,'SYYYY-MM-DD HH24:MI:SS') HIGH_VALUE_IN_DATE_FORMAT
               FROM ALL_TAB_PARTITIONS
              WHERE TABLE_NAME = 'CONNECT_CUSTOMER_TRANS_AUD'
                AND TABLE_OWNER  = (SELECT USER FROM DUAL)
            ) A
      );

 FOR I IN (SELECT PARTITION_NAME FROM TABLE(V_PARTITION_LIST)) LOOP

 /* SETTING UP THE HISTORY QUERY */

 V_VAR24:=V_VAR24||V_VAR20||V_VAR11||V_VAR16||'('||I.PARTITION_NAME||')  '||V_VAR12||V_VAR7||' ) '||V_VAR21||' UNION ALL ';

 END LOOP;

 V_VAR25:=V_VAR8||SUBSTR(V_VAR24,1,LENGTH(V_VAR24)-11)||')';

 V_OPERATION:='EXECUTING THE HISTORY QUERY ';

 EXECUTE IMMEDIATE V_VAR25 BULK COLLECT INTO V_OBJECT_SEARCH;

 V_COUNT1:=0;

 FOR I IN (SELECT DISTINCT CUSTOMER_FIRST_NAME,CUSTOMER_SURNAME FROM  TABLE(V_OBJECT_SEARCH) ORDER BY  CUSTOMER_FIRST_NAME,CUSTOMER_SURNAME DESC ) LOOP

 V_COUNT1:=V_COUNT1+1;

  V_OPERATION:='BULK COLLECT HISTORY RECORDS INTO OBJECTS ';

    SELECT ORDR_LIST(ORDER_NUMBER,ORDER_TYPE,DLV_DATE,CLIENT_ID,CLIENT_NAME)
    BULK COLLECT INTO V_NESTED_OBJ
    FROM
      (
      SELECT DISTINCT ORDER_NUMBER,
             ORDER_TYPE,
             TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS') AS DLV_DATE,
             CLIENT_ID,
             CLIENT_NAME
        FROM TABLE(V_OBJECT_SEARCH)
       WHERE LOWER(CUSTOMER_FIRST_NAME||' '||CUSTOMER_SURNAME)=LOWER(I.CUSTOMER_FIRST_NAME||' '||I.CUSTOMER_SURNAME)
        );

 V_FINAL_OBJ.EXTEND;

 V_FINAL_OBJ(V_COUNT1):=OBJ_MULTI_ARRAY(I.CUSTOMER_FIRST_NAME||' '||I.CUSTOMER_SURNAME,V_NESTED_OBJ);

END LOOP;

END IF;

V_OPERATION:='SETTING UP THE RETURN RESPONSE';

IF V_FINAL_OBJ.COUNT=0 THEN
  V_RESPONSE_CODE  :='204';
  V_RESPONSE_DESC  :='NO DATA FOUND';
ELSE
  V_RESPONSE_CODE:='000';
  V_RESPONSE_DESC:='DATA FOUND';
END IF;

EXCEPTION

WHEN BIZ_EXP THEN

INSERT
INTO CONNECT_LOG
  (
    PROCEDURE_NAME,
    TABLE_NAME,
    OPERATION_NAME,
    MESSAGE,
    OPERATION_DATE,
    RESPONSE_CODE
  )
  VALUES
  (
    'PR_MULTI_SEARCH_EMAIL',
    'CONNECT_CUSTOMER_TRANS',
    V_OPERATION,
    'INVALID PARAMETERS',
    SYSDATE,
    '412'
  );

COMMIT;

WHEN OTHERS THEN

V_MSG:=SQLCODE||' - '||SQLERRM || '; Email ID : ' || EMAIL_ID; -- Added on 25th Aug EMAIL_ID
V_RESPONSE_CODE:='633';

INSERT INTO CONNECT_LOG
  (
    PROCEDURE_NAME,
    TABLE_NAME,
    OPERATION_NAME,
    MESSAGE,
    OPERATION_DATE,
    RESPONSE_CODE
  )
  VALUES
  (
    'PR_MULTI_SEARCH_EMAIL',
    'CONNECT_CUSTOMER_TRANS',
    V_OPERATION,
    V_MSG,
    SYSDATE,
    '633'
  );

COMMIT;

END PR_MULTI_SEARCH_EMAIL;

PROCEDURE PR_MULTI_SEARCH_TRACKING
(
    ORDER_TYPE  VARCHAR2,
    CLIENT_ID   VARCHAR2,
    TRACKING_ID VARCHAR2,
    V_RESPONSE_CODE OUT VARCHAR2,
    V_RESPONSE_DESC OUT VARCHAR2,
    V_FINAL_OBJ OUT OBJ_MULTI_ARRAY_TAB
)

IS

  V_ORDER_TYPE_LOWER   VARCHAR2(1000):=LOWER(ORDER_TYPE);
  V_CLIENT_ID_LOWER    VARCHAR2(1000):=LOWER(CLIENT_ID);
  V_TRACKING_ID_LOWER  VARCHAR2(1000):=LOWER(TRACKING_ID);

  V_VAR2               VARCHAR2(4000);
  V_VAR3               VARCHAR2(4000);
  V_VAR4               VARCHAR2(4000);
  V_VAR5               VARCHAR2(4000);
  V_VAR6               VARCHAR2(4000);
  V_VAR7               VARCHAR2(4000);
  V_VAR8               VARCHAR2(4000);
  V_VAR9               VARCHAR2(4000);
  V_VAR11              VARCHAR2(4000);
  V_VAR12              VARCHAR2(4000);
  V_VAR16              VARCHAR2(4000);
  V_VAR20              VARCHAR2(4000);
  V_VAR21              VARCHAR2(4000);
  V_VAR24              VARCHAR2(32767);
  V_VAR25              VARCHAR2(32767);
  V_VAR30              VARCHAR2(32767);
  V_VAR40              VARCHAR2(32767);
  V_VAR50              VARCHAR2(32767);
  V_VAR60              VARCHAR2(32767);
  V_VAR70              VARCHAR2(32767);
  V_OPERATION          VARCHAR2(1000);
  V_COUNT1             NUMBER         :=0;
  V_MSG                VARCHAR2(32767);
  V_VAR1               VARCHAR2(1000) :='HITTING TRANSACTION TABLE';
  V_INVALID_PARAM_CODE VARCHAR2(100)  :='412';
  V_INVALID_PARAM_DESC VARCHAR2(1000) :='INVALID PARAMETERS';

  V_OBJECT_SEARCH OBJ_MULTI_SEARCH_TRCK_TBL;
  V_NESTED_OBJ ORDR_LIST_TBL;
  V_PARTITION_LIST OBJ_PARTITION_LIST_TBL;
  V_PART_NAME VARCHAR2(1000);
  BIZ_EXP     EXCEPTION;

BEGIN

 /* THIS PROCEDURE SEARCHES THE ORDER LIST FROM THE TRANSACTION TABLE BASED ON
 PARCEL NUMBER AND RETURNS IN OBJECT. IF RECORDS ARE NOT FOUND IN TRANSACTION TABLE
 THEN RECORDS ARE SEARCHED IN THE HISTORY TABLE. IF NO RECORDS ARE FOUND THEN RETURN
 204 ELSE 000 ON SUCCESSFUL DATA RETRIEVAL. AN INTERNAL DB ERROR WILL GENERATE
 AN ERROR CODE OF 633.*/

  V_OPERATION:='INITIALIZING THE OBJECTS';

  V_OBJECT_SEARCH  :=OBJ_MULTI_SEARCH_TRCK_TBL();
  V_FINAL_OBJ      :=OBJ_MULTI_ARRAY_TAB();
  V_NESTED_OBJ     :=ORDR_LIST_TBL();
  V_PARTITION_LIST :=OBJ_PARTITION_LIST_TBL();

  V_OPERATION:='SETTING UP THE EXPERSSIONS FOR THE DYNAMIC QUERY';

  V_VAR2           :=q'[ AND LOWER(B.CLIENT_ID)=']'||V_CLIENT_ID_LOWER||q'[']';
  V_VAR4           :=q'[ AND LOWER(A.PARCEL_NUMBER)=']'||V_TRACKING_ID_LOWER||q'[']';
  V_VAR40          :=q'[ AND LOWER(B.ORDER_TYPE)=']'||V_ORDER_TYPE_LOWER||q'[']';
  V_VAR8           :=q'[ SELECT OBJ_MULTI_SEARCH_TRACK
                               (
                                PARCEL_NUMBER,
                                ORDER_NUMBER,
                                FINAL_DESTINATION_ID,
                                ORDER_TYPE,
                                CLIENT_ID,
                                CLIENT_NAME,
                                CUSTOMER_SURNAME,
                                CUSTOMER_FIRST_NAME,
                                CUSTOMER_EMAILID,
                                ORDER_CREATED_DATE
                               )
                           FROM ( ]';

  V_VAR50:=q'[ SELECT A.PARCEL_NUMBER,
                      B.ORDER_NUMBER,
                      A.FINAL_DESTINATION_ID,
                      B.ORDER_TYPE,
                      B.CLIENT_ID,
                      B.CLIENT_NAME,
                      B.CUSTOMER_SURNAME,
                      B.CUSTOMER_FIRST_NAME,
                      B.CUSTOMER_EMAILID,
                      B.ORDER_CREATED_DATE
                 FROM CONNECT_PARCEL_STATE A,
                      CONNECT_CUSTOMER_TRANS B
                WHERE A.ORDER_NUMBER=B.ORDER_NUMBER
                  AND A.CLIENT_ID=B.CLIENT_ID ]';

 /* HANDLING THE OPTIONAL ORDER TYPE FOR TRANSACTION QUERY*/

  IF V_ORDER_TYPE_LOWER IS NOT NULL THEN
    V_VAR30:=V_VAR50||V_VAR40;
  ELSE
    V_VAR30:=V_VAR50;
  END IF;

  V_VAR11:= ' A ,CONNECT_CUSTOMER_TRANS_AUD ';

  V_VAR60:= q'[ B WHERE A.ORDER_NUMBER=B.ORDER_NUMBER AND A.CLIENT_ID=B.CLIENT_ID ]';

  /* HANDLING THE OPTIONAL ORDER TYPE FOR HISTORY QUERY*/

  IF V_ORDER_TYPE_LOWER IS NOT NULL THEN
    V_VAR12:=V_VAR60||V_VAR40;
  ELSE
    V_VAR12:=V_VAR60;
  END IF;

  /*FINAL QUERY TO FETCH THE ORDER INFORMATION INTO THE RETURN OBJECTS */

  V_OPERATION:='CONSTRUCT QUERY V_VAR20';

  V_VAR20:=  'SELECT PARCEL_NUMBER,
                     ORDER_NUMBER,
                     FINAL_DESTINATION_ID,
                     ORDER_TYPE,
                     CLIENT_ID,
                     CLIENT_NAME,
                     CUSTOMER_SURNAME,
                     CUSTOMER_FIRST_NAME,
                     CUSTOMER_EMAILID,
                     ORDER_CREATED_DATE
                FROM
                      (
                        SELECT A.PARCEL_NUMBER,
                               B.ORDER_NUMBER,
                               A.FINAL_DESTINATION_ID,
                               B.ORDER_TYPE,
                               B.CLIENT_ID,
                               B.CLIENT_NAME,
                               B.CUSTOMER_SURNAME,
                               B.CUSTOMER_FIRST_NAME,
                               B.CUSTOMER_EMAILID,
                               B.ORDER_CREATED_DATE,
                               A.END_DATE,
                               ROW_NUMBER() OVER (PARTITION BY B.ORDER_NUMBER,B.CLIENT_ID ORDER BY B.END_DATE DESC NULLS LAST) RN
                          FROM CONNECT_PARCEL_STATE_AUD ';

  V_VAR21:=' WHERE RN=1 )';

  /* SETTING UP THE FILTER CLAUSE FOR TRACKING ID  */

  IF V_TRACKING_ID_LOWER IS NOT NULL THEN
     IF V_CLIENT_ID_LOWER IS NULL THEN
        V_VAR7:=V_VAR4;
     ELSE
        V_VAR7:=V_VAR2||V_VAR4;
     END IF;
  ELSE
      V_RESPONSE_CODE:=V_INVALID_PARAM_CODE;
      V_RESPONSE_DESC:=V_INVALID_PARAM_DESC;

      V_OPERATION:='RAISE BIZ_EXP';

      RAISE BIZ_EXP;

  END IF;

 /*SETTING UP THE TRANSACTION QUERY TO FETCH THE ORDER INFORMATION USING TRACKID*/

  V_VAR9:=V_VAR8||V_VAR30||V_VAR7||')';

  V_OPERATION:='EXECUTING THE TRANS QUERY';

  EXECUTE IMMEDIATE V_VAR9 BULK COLLECT INTO V_OBJECT_SEARCH;

  FOR I IN (SELECT DISTINCT CUSTOMER_FIRST_NAME,
                           CUSTOMER_SURNAME
             FROM TABLE(V_OBJECT_SEARCH)
            ORDER BY CUSTOMER_FIRST_NAME,CUSTOMER_SURNAME DESC) LOOP

    V_COUNT1:=V_COUNT1+1;

    V_OPERATION:='BULK COLLECT TRANSACTION TABLE INFO INTO RETURN OBJECT';

    SELECT ORDR_LIST(ORDER_NUMBER,ORDER_TYPE,DLV_DATE,CLIENT_ID,CLIENT_NAME) BULK COLLECT
      INTO V_NESTED_OBJ
      FROM
         (
         SELECT DISTINCT ORDER_NUMBER,
                         ORDER_TYPE,
                         TO_CHAR(ORDER_CREATED_DATE, 'YYYY-MM-DD HH:MI:SS AM') AS DLV_DATE,
                         CLIENT_ID,
                         CLIENT_NAME
           FROM TABLE(V_OBJECT_SEARCH)
          WHERE LOWER(CUSTOMER_FIRST_NAME||' '||CUSTOMER_SURNAME)=LOWER(I.CUSTOMER_FIRST_NAME||' '||I.CUSTOMER_SURNAME)
          );

    V_FINAL_OBJ.EXTEND;
    V_FINAL_OBJ(V_COUNT1):=OBJ_MULTI_ARRAY(I.CUSTOMER_FIRST_NAME||' '||I.CUSTOMER_SURNAME,V_NESTED_OBJ);

  END LOOP;

  /*FETCHING RECORDS FROM THE HISTORY TABLE*/

 IF V_FINAL_OBJ.COUNT =0 THEN

          V_VAR24:=V_VAR24||V_VAR20||V_VAR11||V_VAR12||V_VAR7||' ) '||V_VAR21;
          V_VAR25:=V_VAR8||V_VAR24;

    EXECUTE IMMEDIATE V_VAR25 BULK COLLECT INTO V_OBJECT_SEARCH;

    V_COUNT1:=0;

    FOR I IN
          (
    SELECT DISTINCT CUSTOMER_FIRST_NAME,
                     CUSTOMER_SURNAME
       FROM TABLE(V_OBJECT_SEARCH)
      ORDER BY CUSTOMER_FIRST_NAME,CUSTOMER_SURNAME DESC
          ) LOOP

      V_COUNT1:=V_COUNT1+1;

      V_OPERATION:='BULK COLLECT HISTORY TABLE INFO INTO RETURN OBJECT';

      SELECT ORDR_LIST(ORDER_NUMBER,ORDER_TYPE,DLV_DATE,CLIENT_ID,CLIENT_NAME) BULK COLLECT
      INTO V_NESTED_OBJ
      FROM
        ( SELECT DISTINCT ORDER_NUMBER,
                          ORDER_TYPE,
                          TO_CHAR(ORDER_CREATED_DATE,'YYYY-MM-DD HH24:MI:SS') AS DLV_DATE,
                          CLIENT_ID,
                          CLIENT_NAME
            FROM TABLE(V_OBJECT_SEARCH)
           WHERE LOWER(CUSTOMER_FIRST_NAME||' '||CUSTOMER_SURNAME)=LOWER(I.CUSTOMER_FIRST_NAME||' '||I.CUSTOMER_SURNAME)
        );

      V_FINAL_OBJ.EXTEND;
      V_FINAL_OBJ(V_COUNT1):=OBJ_MULTI_ARRAY(I.CUSTOMER_FIRST_NAME||' '||I.CUSTOMER_SURNAME,V_NESTED_OBJ);

    END LOOP;

  END IF;

  /* SETTING UP THE RESPONSE CODE */

  IF V_FINAL_OBJ.COUNT=0 THEN
    V_RESPONSE_CODE  :='204';
    V_RESPONSE_DESC  :='NO DATA FOUND';
  ELSE
    V_RESPONSE_CODE:='000';
    V_RESPONSE_DESC:='DATA FOUND';
  END IF;

EXCEPTION

WHEN BIZ_EXP THEN

  INSERT INTO CONNECT_LOG
    (
      PROCEDURE_NAME,
      TABLE_NAME,
      OPERATION_NAME,
      MESSAGE,
      OPERATION_DATE,
      RESPONSE_CODE
    )
    VALUES
    (
      'PR_MULTI_SEARCH_TRACKING',
      'CONNECT_CUSTOMER_TRANS',
      V_OPERATION,
      'INVALID PARAMETERS',
      SYSDATE,
      '412'
    );
  COMMIT;

WHEN OTHERS THEN

V_MSG:=SQLCODE||' - '||SQLERRM || '; Tracking ID : ' || TRACKING_ID; -- Added on 25th Aug TRACKING_ID
V_RESPONSE_CODE:='633';

  INSERT
  INTO CONNECT_LOG
    (
      PROCEDURE_NAME,
      TABLE_NAME,
      OPERATION_NAME,
      MESSAGE,
      OPERATION_DATE,
      RESPONSE_CODE
    )
    VALUES
    (
      'PR_MULTI_SEARCH_TRACKING',
      'CONNECT_CUSTOMER_TRANS',
      V_OPERATION,
      V_MSG,
      SYSDATE,
      '633'
    );
  COMMIT;

END PR_MULTI_SEARCH_TRACKING;

PROCEDURE PR_NAME_MULTI_SEARCH
(
  P_ORDER_TYPE         VARCHAR2,
  P_CLIENT_ID          VARCHAR2,
  P_STRT_DT            VARCHAR2,
  P_END_DT             VARCHAR2,
  P_LAST_NAME          VARCHAR2,
  P_FIRST_NAME         VARCHAR2,
  V_RESPONSE_CODE  OUT VARCHAR2,
  V_RESPONSE_DESC  OUT VARCHAR2,
  P_MULTI_SEARCH   OUT OBJ_MULTI_ARRAY_TAB
)

IS

V_TRANS_TBL         VARCHAR2(4000):='CONNECT_CUSTOMER_TRANS';
V_HIST_TBL          VARCHAR2(4000):='CONNECT_CUSTOMER_TRANS_AUD';
V_CQL3              VARCHAR2(4000);
V_CQL4              VARCHAR2(4000);
V_CQL5              VARCHAR2(4000);
V_CQL6              VARCHAR2(4000);
V_CQL7              VARCHAR2(4000);
V_CQL9              VARCHAR2(32767);
V_CQL10             VARCHAR2(32767);
V_CQL12             VARCHAR2(32767);
V_CQL14             VARCHAR2(32767);
V_CQL16             VARCHAR2(32767);
V_CQL17             VARCHAR2(32767);
V_CQL30             VARCHAR2(32767);
V_CQL40             VARCHAR2(32767);
V_CQL50             VARCHAR2(32767);
V_MSG               VARCHAR2(32767);
V_OPERATION         VARCHAR2(32767);
V_STRT_PART         VARCHAR2(4000);
V_END_PART          VARCHAR2(4000);
V_COUNT             NUMBER:=0;
V_PART_NAME         VARCHAR2(4000);
NO_DATA_HIST        EXCEPTION;
DATA_FOUND_IN_TRANS EXCEPTION;
P_RESULTSET  ORDR_LIST_TBL;

BEGIN

/*THE PROCEDURE BUILDS THE QUERY DYNAMICALLY FOR FETCHING THE ORDER NUMBER LISTS
FROM CUSTOMER TABLE. THE PROCEDURE CHECKS THE TRANSACTION TABLE THEN MOVES TO
THE HISTORY TABLE TO CHECK THE ORDER INFORMATION. THE BELOW VARIABLES LISTS THE
EXPRESSSIONS USED TO DYNAMICALLY BUILD THE QUERY FOR BOTH TRANSACTION + HISTORY
TABLES.*/

 P_RESULTSET := ORDR_LIST_TBL();

 V_OPERATION:='SETTING UP THE QUERY EXPRESSIONS';

 V_CQL3:= q'[ SELECT /*+ PARALLEL(]'||V_TRANS_TBL||q'[,4) */ ORDER_NUMBER,
                     ORDER_TYPE,
                     ORDER_DATE,
                     CLIENT_ID,
                     CLIENT_NAME
                FROM
                    (
                      SELECT ORDER_NUMBER,
                             ORDER_TYPE,
                             TO_CHAR(ORDER_CREATED_DATE,'YYYY-MM-DD HH24:MI:SS') ORDER_DATE,
                             CUSTOMER_FIRST_NAME
                             ||' '
                             ||CUSTOMER_SURNAME AS C_NAME,
                             CLIENT_ID,
                             CLIENT_NAME ]';

  V_CQL17:= q'[ SELECT /*+ PARALLEL(]'||V_HIST_TBL||q'[,4) */ ORDER_NUMBER,
                       ORDER_TYPE,
                       ORDER_DATE,
                       CLIENT_ID,
                       CLIENT_NAME,
                       END_DATE
                  FROM
                      (
                        SELECT ORDER_NUMBER,
                               ORDER_TYPE,
                               TO_CHAR(ORDER_CREATED_DATE,'YYYY-MM-DD HH24:MI:SS') ORDER_DATE,
                               CUSTOMER_FIRST_NAME
                               ||' '
                               ||CUSTOMER_SURNAME AS C_NAME,
                               CLIENT_ID,
                               CLIENT_NAME ]';

  V_CQL4:= q'[ FROM ]'||V_TRANS_TBL;

  V_CQL30:=q'[ AND LOWER(ORDER_TYPE)=	LOWER(]'||CHR(39)|| P_ORDER_TYPE ||CHR(39)||')';

  V_CQL40:=q'[ AND lower(CLIENT_ID) =	lower(]'||CHR(39)||P_CLIENT_ID ||CHR(39)||')';

  V_CQL50:=q'[ AND TRUNC(ORDER_CREATED_DATE) BETWEEN 	TO_DATE(]'||CHR(39)||P_STRT_DT||CHR(39)||q'[,'DD-MM-YYYY')
               AND TO_DATE(]'||CHR(39)||P_END_DT||CHR(39)||q'[,'DD-MM-YYYY'))]';

  V_CQL5:= q'[ WHERE lower(CUSTOMER_SURNAME) =	lower(]'||CHR(39)||P_LAST_NAME ||CHR(39)|| q'[)
                 AND lower(CUSTOMER_FIRST_NAME)=	lower(]'||CHR(39)||P_FIRST_NAME ||CHR(39)||')';

  V_OPERATION:='BUILDING THE CONDITIONAL WHERE CLAUSE';

  IF P_ORDER_TYPE    IS NOT NULL AND P_CLIENT_ID IS NULL THEN
    V_CQL5           :=V_CQL5||V_CQL30||V_CQL50;
  ELSIF P_ORDER_TYPE IS NULL AND P_CLIENT_ID IS NOT NULL THEN
    V_CQL5           :=V_CQL5||V_CQL40||V_CQL50;
  ELSIF P_ORDER_TYPE IS NOT NULL AND P_CLIENT_ID IS NOT NULL THEN
    V_CQL5           :=V_CQL5||V_CQL30||V_CQL40||V_CQL50;
  ELSIF P_ORDER_TYPE IS NULL AND P_CLIENT_ID IS NULL THEN
    V_CQL5           :=V_CQL5||V_CQL50;
  END IF;

  V_OPERATION:='SETTING UP THE WINDOW AND PARTITION EXPRESSION';

  V_CQL6:= q'[,END_DATE,ROW_NUMBER () OVER (PARTITION BY ORDER_NUMBER,ORDER_TYPE,CLIENT_ID order by END_DATE DESC NULLS LAST) RN ]';

  V_CQL7:=q'[ FROM ]'||V_HIST_TBL;

  V_CQL9:= q'[ WHERE RN=1]';

  V_CQL16:='SELECT ORDR_LIST(ORDER_NUMBER,ORDER_TYPE,ORDER_DATE,CLIENT_ID,CLIENT_NAME) from (';

  V_CQL10:=V_CQL3||V_CQL4||V_CQL5;

  V_CQL14:=V_CQL10;

  P_RESULTSET    :=ORDR_LIST_TBL();

  V_OPERATION:='ALWAYS HITTING THE TRANSACTION TABLE ';

  /* THE ORDER LISTS ARE FETCHED FROM THE QUERY SET UP IN V_CQL14 AND PUT INTO
  OBJECT P_RESULTSET. IF THE OBJECT IS EMPTY THEN MOVED TO HISTORY TABLE ELSE
  RASIE DATA_FOUND_IN_TRANS WITH RESPOSE CODE 000. */

  EXECUTE IMMEDIATE V_CQL16||V_CQL14||')' BULK COLLECT INTO P_RESULTSET;

  IF P_RESULTSET.COUNT=0 THEN

     V_OPERATION:='FETCHING PARTITION IN THE HISTORY TABLE';

          FOR I IN (SELECT PARTITION_NAME FROM
           (
          SELECT PARTITION_NAME,
                 TO_DATE (
                      TRIM (
                         '''' FROM REGEXP_SUBSTR (
                                        EXTRACTVALUE (
                                  DBMS_XMLGEN.GETXMLTYPE (
                                                    'SELECT HIGH_VALUE FROM ALL_TAB_PARTITIONS WHERE TABLE_NAME='''|| TABLE_NAME
                                                                                          || ''' AND TABLE_OWNER = '''|| TABLE_OWNER
                                                                                          || ''' AND PARTITION_NAME = '''|| PARTITION_NAME||
                                                      ''''),
                                           '//text()'),
                                          '''.*?''')
                           ),'SYYYY-MM-DD HH24:MI:SS'
                          )
                  HIGH_VALUE_IN_DATE_FORMAT
          FROM ALL_TAB_PARTITIONS
          WHERE TABLE_NAME = V_HIST_TBL
           AND TABLE_OWNER =(SELECT USER FROM DUAL)
          ) A
          WHERE A.HIGH_VALUE_IN_DATE_FORMAT BETWEEN ADD_MONTHS(TRUNC(TO_DATE( P_STRT_DT,'DD-MM-YYYY'),'MM'),1)
            AND ADD_MONTHS(TRUNC(TO_DATE( P_END_DT,'DD-MM-YYYY'),'MM'),1)) LOOP

          V_PART_NAME:=I.PARTITION_NAME;

          V_COUNT:=V_COUNT+1;

          V_CQL12:=V_CQL12||V_CQL17||V_CQL6||V_CQL7||q'[ PARTITION (]'||V_PART_NAME||q'[)]'||V_CQL5||V_CQL9||' UNION ALL ';

          END LOOP;

 IF V_PART_NAME IS NULL THEN

     V_OPERATION:='RAISED NO_DATA_HIST';
     RAISE NO_DATA_HIST;

 END IF;

 V_CQL12:=SUBSTR(V_CQL12,1,LENGTH(V_CQL12)-11);

 V_CQL12:='SELECT ORDER_NUMBER,
                  ORDER_TYPE,
                  ORDER_DATE,
                  CLIENT_ID,
                  CLIENT_NAME FROM (SELECT ORDER_NUMBER,
                  ORDER_TYPE,
                  ORDER_DATE,
                  CLIENT_ID,
                  CLIENT_NAME,
                  ROW_NUMBER () OVER (PARTITION BY ORDER_NUMBER,ORDER_TYPE,CLIENT_ID order by END_DATE DESC NULLS LAST) RN
            FROM (' ||V_CQL12||') ) WHERE RN=1';

 V_CQL14:=V_CQL12;

 V_OPERATION:='EXECUTING THE HISTORY TABLE';

 P_RESULTSET    :=ORDR_LIST_TBL();

  /* THE ORDER LISTS ARE FETCHED FROM THE QUERY SET UP IN V_CQL14 AND PUT INTO
  OBJECT P_RESULTSET FOR HISTORY RECORDS. IF THE OBJECT IS EMPTY THEN RASIE
  NO_DATA_HIST WITH RESPOSE CODE 204 ELSE RETURN 000. */


 EXECUTE IMMEDIATE V_CQL16||V_CQL14||')' BULK COLLECT INTO P_RESULTSET;

  IF P_RESULTSET.COUNT=0 THEN
     V_OPERATION:='RAISED NO_DATA_HIST';
     RAISE NO_DATA_HIST;
  ELSE
    V_RESPONSE_CODE:='000';
    V_RESPONSE_DESC:='DATA FOUND';
  END IF;

ELSE

V_OPERATION:='RAISED DATA_FOUND_IN_TRANS';

RAISE DATA_FOUND_IN_TRANS;

END IF;

  P_MULTI_SEARCH :=OBJ_MULTI_ARRAY_TAB();

  P_MULTI_SEARCH.EXTEND;

  P_MULTI_SEARCH(1):=OBJ_MULTI_ARRAY(P_FIRST_NAME||CHR(32)||P_LAST_NAME,P_RESULTSET);

EXCEPTION

/* DATA FOUND IN TRANSACTION TABLE*/

WHEN DATA_FOUND_IN_TRANS THEN

  P_MULTI_SEARCH :=OBJ_MULTI_ARRAY_TAB();

  P_MULTI_SEARCH.EXTEND;

  P_MULTI_SEARCH(1):=OBJ_MULTI_ARRAY(P_FIRST_NAME||CHR(32)||P_LAST_NAME,P_RESULTSET);

  V_RESPONSE_CODE:='000';
  V_RESPONSE_DESC:='DATA FOUND';

/* NO DATA FOUND IN HISTORY TABLE */

WHEN NO_DATA_HIST THEN

 P_MULTI_SEARCH :=OBJ_MULTI_ARRAY_TAB();

 V_RESPONSE_CODE:='204';
 V_RESPONSE_DESC:='NO DATA FOUND';

INSERT INTO CONNECT_LOG
  (
    PROCEDURE_NAME,
    TABLE_NAME,
    OPERATION_NAME,
    MESSAGE,
    OPERATION_DATE,
    RESPONSE_CODE
  )
  VALUES
  (
    'PR_NAME_MULTI_SEARCH',
    'CONNECT_CUSTOMER_TRANS',
    'NAME MULTI SEARCH',
    'V_OPERATION',
    SYSDATE,
    '204'
  );

/* DB INTERNAL ERROR */

WHEN OTHERS THEN

 V_MSG:=SQLCODE||' - '||SQLERRM;

 P_MULTI_SEARCH :=OBJ_MULTI_ARRAY_TAB();

 V_RESPONSE_CODE:='633';
 V_RESPONSE_DESC:='INTERNAL ERROR';

INSERT INTO CONNECT_LOG
  (
    PROCEDURE_NAME,
    TABLE_NAME,
    OPERATION_NAME,
    MESSAGE,
    OPERATION_DATE,
    RESPONSE_CODE
  )
  VALUES
  (
    'PR_NAME_MULTI_SEARCH',
    'CONNECT_CUSTOMER_TRANS',
    V_OPERATION,
    V_MSG,
    SYSDATE,
    '633'
  );

COMMIT;

END PR_NAME_MULTI_SEARCH;


 PROCEDURE PR_CONNECT_MULTI_SEARCH
   (
	  P_ORDER_TYPE CONNECT_CUSTOMER_TRANS.ORDER_TYPE%TYPE,
      P_LAST_NAME CONNECT_CUSTOMER_TRANS.CUSTOMER_SURNAME%TYPE,
      P_FIRST_NAME CONNECT_CUSTOMER_TRANS.CUSTOMER_FIRST_NAME%TYPE,
      P_EMAILID CONNECT_CUSTOMER_TRANS.CUSTOMER_EMAILID%TYPE,
      P_TRACKING_ID CONNECT_PARCEL_STATE.PARCEL_NUMBER%TYPE,
      P_CLIENT_ID CONNECT_PARCEL_STATE.CLIENT_ID%TYPE,
      P_USER_ID VARCHAR2,
      P_STRT_DT VARCHAR2,
      P_END_DT VARCHAR2,
      RESPONSE_CODE OUT VARCHAR2,
      RESPONSE_DESC OUT VARCHAR2,
      P_MULTI_SEARCH OUT OBJ_MULTI_ARRAY_TAB
	)

IS

V_MSG  VARCHAR2(32767);

BEGIN

P_MULTI_SEARCH:=OBJ_MULTI_ARRAY_TAB();

IF P_FIRST_NAME IS NOT NULL THEN
  PKG_CONNECT_SEARCH_ORDERS.PR_NAME_MULTI_SEARCH(P_ORDER_TYPE,P_CLIENT_ID,P_STRT_DT,P_END_DT,P_LAST_NAME,P_FIRST_NAME,RESPONSE_CODE,RESPONSE_DESC,P_MULTI_SEARCH);
ELSIF P_TRACKING_ID IS NOT NULL THEN
  PKG_CONNECT_SEARCH_ORDERS.PR_MULTI_SEARCH_TRACKING(P_ORDER_TYPE,P_CLIENT_ID,P_TRACKING_ID,RESPONSE_CODE,RESPONSE_DESC,P_MULTI_SEARCH);
ELSIF P_EMAILID IS NOT NULL THEN
  PKG_CONNECT_SEARCH_ORDERS.PR_MULTI_SEARCH_EMAIL(P_ORDER_TYPE,P_CLIENT_ID,P_EMAILID,RESPONSE_CODE,RESPONSE_DESC,P_MULTI_SEARCH);
ELSE
  RESPONSE_CODE:='412';
  RESPONSE_DESC:='INVALID PARAMERTRS';
END IF;

EXCEPTION

WHEN OTHERS THEN

V_MSG:=SQLCODE||' - '||SQLERRM;

INSERT INTO CONNECT_LOG
  (
    PROCEDURE_NAME,
    TABLE_NAME,
    OPERATION_NAME,
    MESSAGE,
    OPERATION_DATE,
    RESPONSE_CODE
  )
  VALUES
  (
    'PR_CONNECT_MULTI_SEARCH_CR',
    'CONNECT_CUSTOMER_TRANS',
    'MAIN CALLING PROCEDURE',
    V_MSG,
    SYSDATE,
    '633'
  );

COMMIT;

END PR_CONNECT_MULTI_SEARCH;

     -------------------------HISTORY SEARCH-----------------------------------

 PROCEDURE PR_CONNECT_SINGLE_SEARCH_HIST
(
      P_ORDER_ID  IN CONNECT_CUSTOMER_TRANS.ORDER_NUMBER%TYPE,
      P_CLIENT_ID IN CONNECT_PARCEL_STATE.CLIENT_ID%TYPE,
      P_STORE_ID  IN CONNECT_PARCEL_STATE.FINAL_DESTINATION_ID%TYPE,
      P_EPOD_FLAG IN  VARCHAR2,
      P_SEARCH_DETAILS OUT OBJ_ORDER_DET_TBL,
      RESPONSE_CODE OUT VARCHAR2,
      RESPONSE_DESC OUT VARCHAR2
)
IS

V_EPOD_DETAILS          OBJ_EPOD_SRCHDET_TBL    :=OBJ_EPOD_SRCHDET_TBL()   ;
V_PARCEL_DETAILS        OBJ_PARCEL_SRCHDET_TBL  :=OBJ_PARCEL_SRCHDET_TBL() ;
V_VERIFY_DETAILS        OBJ_PARCEL_VERIFY_TBL   :=OBJ_PARCEL_VERIFY_TBL()  ;
V_EPOD_PRCL_DTLS        OBJ_SIGNATURE_DET_TBL   :=OBJ_SIGNATURE_DET_TBL()  ;


V_SIGN   CLOB:=NULL;
V_COUNT1 NUMBER:=0;
V_COUNT2 NUMBER:=0;
V_COUNT3 NUMBER:=0;
V_COUNT4 NUMBER:=0;
COLLECT_DATE VARCHAR2(30);

V_PARCEL_NUMBER      CONNECT_PARCEL_STATE.PARCEL_NUMBER%TYPE;
V_PARCEL_DESCRIPTION CONNECT_PARCEL_STATE.PARCEL_DESCRIPTION%TYPE;
V_SLOT               CONNECT_CONTAINER_TRANS.CONTAINER_NUMBER%TYPE;
V_STATUS_CODE        CONNECT_STATUS_MASTER.STATUS_ID%TYPE;
V_STATUS_NAME        CONNECT_STATUS_MASTER.STATUS_NAME%TYPE;
V_ZONE_NAME          CONNECT_MASTER_CONTAINER.MASTER_LABEL%TYPE;
V_EPOD               CONNECT_PARCEL_COLLECT.CUSTOMER_SIGN%TYPE;
V_COLLECT_DATE       CONNECT_PARCEL_COLLECT.CREATED_BY%TYPE;
V_FACILITY_NAME      CONNECT_PARCEL_STATE.FACILITY_NAME%TYPE;
V_FACILITY_NAME1      CONNECT_PARCEL_STATE.FACILITY_NAME%TYPE;
v_email 	CONNECT_CUSTOMER_TRANS.CUSTOMER_EMAILID%TYPE; --varchar2(100); -- 07122015 For email ID Size
v_card varchar2(100);

V_ORDER_NUMBER       CONNECT_PARCEL_STATE.ORDER_NUMBER%TYPE;
V_POST_CODE          CONNECT_CUSTOMER_TRANS.CUSTOMER_POSTCODE%TYPE;
V_ORDER_TYPE         CONNECT_CUSTOMER_TRANS.ORDER_TYPE%TYPE;
V_EXPECTED_DATETIME  VARCHAR2(100);
V_DESTINATION_ID     CONNECT_PARCEL_STATE.FINAL_DESTINATION_ID%TYPE;
V_STATUS             CONNECT_STATUS_MASTER.STATUS_NAME%TYPE:='Collected';
V_OPERATION_NAME     CONNECT_LOG.OPERATION_NAME%TYPE;
V_TABLE_NAME         CONNECT_LOG.TABLE_NAME%TYPE;

V_SIGN_COUNT         NUMBER;
V_CUSTOMER_NAME      VARCHAR2(120);
V_ADDRESS		         VARCHAR2(120);
V_CHECK              NUMBER;
V_TAB_NAME           VARCHAR2(500);
V_MSG                VARCHAR2(4000);
V_DESTINATION        VARCHAR2(4000);
V_FLAG               VARCHAR2(1);

V_FILTER             VARCHAR2(30)  :='Slot';
V_DEBUG_MSG1         VARCHAR2(4000):='Fetching the parcel details for the EPOD';
V_DEBUG_MSG2         VARCHAR2(4000):='Creating the EPOD details';
V_DEBUG_MSG3         VARCHAR2(4000):='Loop2';
V_DEBUG_MSG4         VARCHAR2(4000):='Fetching the service type for all the parcels';
V_DEBUG_MSG5         VARCHAR2(4000):='Fetching all the parcel details';
V_DEBUG_MSG6         VARCHAR2(4000):='Creating the total parcel details';
V_DEBUG_MSG7         VARCHAR2(4000):='Fetching the total order details';
V_DEBUG_MSG8         VARCHAR2(4000):='Creating the Order details';
V_DEBUG_MSG9         VARCHAR2(4000):='Loop1';
V_DEBUG_MSG10        VARCHAR2(4000):='Insert Signature';
V_DEBUG_MSG11        VARCHAR2(4000):='Loop3';
V_DEBUG_MSG12        VARCHAR2(4000):='CONNECT_PARCEL_COLLECT,CONNECT_PARCEL_STATE';
V_DEBUG_MSG13        VARCHAR2(4000):='CONNECT_PARCEL_COLLECT_,CONNECT_PARCEL_STATE,CONNECT_PARCEL_LATEST_TRANS';
V_DEBUG_MSG14        VARCHAR2(4000):='CONNECT_CUSTOMER_TRANS,CONNECT_PARCEL_STATE';
V_DEBUG_MSG15        VARCHAR2(4000):='OBJ OBJ_EPOD_SRCHDET';
V_DEBUG_MSG16        VARCHAR2(4000):='CONNECT_PARCEL_STATE';
V_DEBUG_MSG17        VARCHAR2(4000):='OBJ OBJ_PARCEL_VERIFY';
V_DEBUG_MSG18        VARCHAR2(4000):='CONNECT_PARCEL_STATE,CONNECT_LOC_PKG_TRANS,CONNECT_PARCEL_LATEST_TRANS,CONNECT_STATUS_MASTER,CONNECT_CONTAINER_TRANS';
V_DEBUG_MSG19        VARCHAR2(4000):='OBJ OBJ_PARCEL_SRCHDET';
V_DEBUG_MSG20        VARCHAR2(4000):='OBJ OBJ_ORDER_DET';
V_DEBUG_MSG21        VARCHAR2(4000):='Failure';
V_DEBUG_MSG22        VARCHAR2(4000):='CONNECT_PARCEL_STATE,CONNECT_LOC_PKG_TRANS,CONNECT_PARCEL_LATEST_TRANS,CONNECT_STATUS_MASTER';
V_RESPONSE           VARCHAR2(4000):='Success';
V_ORDER_CHECK        VARCHAR2(100);
V_CLIENT_ID          VARCHAR2(100);
EXP_BUSINESS_LOGIC   EXCEPTION;

BEGIN

P_SEARCH_DETAILS:=OBJ_ORDER_DET_TBL();

IF P_STORE_ID IS NOT NULL THEN --to implement without STORE_ID Search 14/09/2015

	IF P_CLIENT_ID IS NOT NULL THEN

	V_OPERATION_NAME:='SELECT FROM HIST TABLE 1';
	/*
	SELECT DISTINCT FINAL_DESTINATION_ID,FACILITY_NAME
	INTO V_ORDER_CHECK,V_FACILITY_NAME1 FROM (
	SELECT  FINAL_DESTINATION_ID,FACILITY_NAME,ROW_NUMBER () OVER (PARTITION BY PARCEL_NUMBER ORDER BY END_DATE DESC NULLS LAST) RN
	FROM CONNECT_PARCEL_STATE_AUD
	WHERE lower(ORDER_NUMBER)      =lower(P_ORDER_ID)
	AND lower(CLIENT_ID)           =lower(P_CLIENT_ID)) WHERE RN=1;
	*/
	SELECT DISTINCT A.FINAL_DESTINATION_ID,B.FACILITY_NAME
	INTO V_ORDER_CHECK,V_FACILITY_NAME1 FROM
	(
		SELECT  FINAL_DESTINATION_ID,ROW_NUMBER () OVER (PARTITION BY PARCEL_NUMBER ORDER BY END_DATE DESC NULLS LAST) RN
		FROM CONNECT_PARCEL_STATE_AUD
		WHERE lower(ORDER_NUMBER) = lower(P_ORDER_ID)
		AND lower(CLIENT_ID) = lower(P_CLIENT_ID) --- cHANGE TO ADD FACILITY TYPE
	  AND (FINAL_DESTINATION_TYPE != 'Sort Centre Warehouse' OR FINAL_DESTINATION_TYPE IS NULL)
	) A,
	CONNECT_FACILITY B
	WHERE A.FINAL_DESTINATION_ID = B.FACILITY_ID
	AND RN=1;

	IF V_ORDER_CHECK <> P_STORE_ID THEN
	RAISE EXP_BUSINESS_LOGIC;

	ELSE


		   V_OPERATION_NAME:='Auditing Action';
		   V_TAB_NAME:='CONNECT_USER_AUDIT';

	 -- Auditing Search Action

	INSERT INTO CONNECT_USER_AUDIT
				(
				  USER_ID,
				  PACKAGE_NUMBER,
				  STORE_NUMBER,
				  ACTION_TYPE,
				  MESSAGE,
				  AUDIT_CREATE_DATE,
				  PACKAGE_TYPE)
		 VALUES (
				  'N/A',
				  P_ORDER_ID,
				  'N/A',
				  'Search Single Order',
				  'Searched details for order number : '||P_ORDER_ID||'and client id : '||P_CLIENT_ID,
				  SYSDATE,
				  'Order');

	 -- Validating Signature Information

		   V_OPERATION_NAME:='Validating Signature';
		   V_TAB_NAME:='CONNECT_PARCEL_COLLECT';

	--fetching all the parcel details for the order

	V_OPERATION_NAME:='FETCHING PARCEL LIST 1';

	FOR N IN (SELECT DISTINCT PARCEL_NUMBER
				FROM (
						SELECT  PARCEL_NUMBER ,ROW_NUMBER () OVER (PARTITION BY PARCEL_NUMBER ORDER BY END_DATE DESC NULLS LAST) RN
						FROM CONNECT_PARCEL_STATE_AUD
						WHERE lower(ORDER_NUMBER)      =lower(P_ORDER_ID)
						AND lower(CLIENT_ID)           =lower(P_CLIENT_ID)
			  AND LOWER(FINAL_DESTINATION_ID) = LOWER(P_STORE_ID)
			  ) WHERE RN=1 --- cHANGE FOR FACILITY TYPE
			  ) LOOP

			  --  V_COUNT1:=V_COUNT1+1;

	V_OPERATION_NAME:=V_DEBUG_MSG4;
	V_TAB_NAME:=V_DEBUG_MSG17;

				 --fetching the parcel service details for all the parcels in the order

							SELECT OBJ_PARCEL_VERIFY(SERVICES) BULK COLLECT
							  INTO V_VERIFY_DETAILS
							  FROM
								(SELECT SERVICES
								FROM
								  (SELECT SERVICE_TYPE,
									CASE
									  WHEN SERVICE_NAME='Y'
									  THEN SERVICE_TYPE
									  ELSE SERVICE_NAME
									END AS SERVICES
								  FROM CONNECT_PARCEL_SRVCE_TRANS_AUD
								  WHERE SERVICE_NAME <> 'N'
								  AND PARCEL_NUMBER   =N.PARCEL_NUMBER
								  )
								);

									   BEGIN

											   V_OPERATION_NAME:=V_DEBUG_MSG5;
											   V_TAB_NAME:=V_DEBUG_MSG18;

											  --fetching the details of all the parcels in the order

	--
												V_SIGN:=NULL;
												IF P_EPOD_FLAG = 'TRUE'  THEN

																IF V_SIGN_COUNT > 0 THEN

								  V_OPERATION_NAME:='SELECT CUSTOMER_SIGN';

																  SELECT CUSTOMER_SIGN
																	INTO V_SIGN
																	FROM CONNECT_PARCEL_COLLECT_AUD
																	WHERE PARCEL_NUMBER =N.PARCEL_NUMBER;

																END IF;

												END IF;


												V_OPERATION_NAME:='FETCHING PARCEL DETAILS 1';

													 SELECT TEMPA.PARCEL_NUMBER,
															TEMPA.PARCEL_DESCRIPTION,
															TEMPA.STATUS_ID,
															TEMPA.USER_STATUS,
															TEMPA.SLOT_ID,
															TO_CHAR(TEMPA.PARCEL_COLLECT_DATE,'YYYY-MM-DD HH24:MI:SS')
													INTO V_PARCEL_NUMBER,
														  V_PARCEL_DESCRIPTION,
														  V_STATUS_CODE,
														  V_STATUS_NAME,
														  V_SLOT,
														  COLLECT_DATE
													FROM
													  ( SELECT DISTINCT A.PARCEL_NUMBER,
														A.PARCEL_DESCRIPTION,
														C.STATUS_ID,
														D.USER_STATUS,
														CASE
														  WHEN B.SLOT_ID    IS NULL
														  AND D.STATUS_NAME <> 'Collected'
														  THEN (
															CASE
															  WHEN A.DO_ASN_NUMBER IS NULL
															  THEN A.CONTAINER_NUMBER
															  ELSE E.MASTER_LABEL
															END)
														  ELSE B.SLOT_ID
														END AS SLOT_ID,
														A.CONTAINER_NUMBER,
														E.MASTER_LABEL,
														A.DO_ASN_NUMBER,
														F.PARCEL_COLLECT_DATE
													  FROM
														(SELECT PARCEL_NUMBER,
														  CONTAINER_NUMBER,
														  DO_ASN_NUMBER,
														  PARCEL_DESCRIPTION
														FROM
														  (SELECT PARCEL_NUMBER,
															CONTAINER_NUMBER,
															DO_ASN_NUMBER,
															PARCEL_DESCRIPTION,
															END_DATE,
															ROW_NUMBER () OVER ( PARTITION BY PARCEL_NUMBER ORDER BY END_DATE DESC NULLS LAST) RN
														  FROM CONNECT_PARCEL_STATE_AUD  WHERE PARCEL_NUMBER=N.PARCEL_NUMBER
														  )
														WHERE RN=1
														) A,
														(SELECT PARCEL_NUMBER,
														  SLOT_ID
														FROM
														  (SELECT PARCEL_NUMBER,
															SLOT_ID,
															END_DATE,
															ROW_NUMBER () OVER ( PARTITION BY PARCEL_NUMBER ORDER BY END_DATE DESC NULLS LAST) RN
														  FROM CONNECT_LOC_PKG_TRANS_AUD  WHERE PARCEL_NUMBER=N.PARCEL_NUMBER
														  )
														WHERE RN=1
														) B,
														(SELECT PARCEL_NUMBER,
														  STATUS_ID
														FROM
														  (SELECT PARCEL_NUMBER,
															STATUS_ID,
															END_DATE,
															ROW_NUMBER () OVER ( PARTITION BY PARCEL_NUMBER ORDER BY END_DATE DESC NULLS LAST) RN
														  FROM CONNECT_PARCEL_LTST_TRANS_AUD  WHERE PARCEL_NUMBER=N.PARCEL_NUMBER
														  )
														WHERE RN=1
														) C,
														CONNECT_STATUS_MASTER D,
														(SELECT CONTAINER_NUMBER,
														  MASTER_LABEL
														FROM
														  (SELECT CONTAINER_NUMBER,
															MASTER_LABEL,
															END_DATE,
															ROW_NUMBER () OVER ( PARTITION BY CONTAINER_NUMBER ORDER BY END_DATE DESC NULLS LAST) RN
														  FROM CONNECT_CONTAINER_TRANS_AUD  --WHERE PARCEL_NUMBER=N.PARCEL_NUMBER
														  )
														WHERE RN=1
														) E,
														(SELECT PARCEL_NUMBER,
														  PARCEL_COLLECT_DATE
														FROM
														  (SELECT PARCEL_NUMBER,
															PARCEL_COLLECT_DATE,
															END_DATE,
															ROW_NUMBER () OVER ( PARTITION BY PARCEL_NUMBER ORDER BY END_DATE DESC NULLS LAST) RN
														  FROM CONNECT_PARCEL_COLLECT_AUD WHERE PARCEL_NUMBER=N.PARCEL_NUMBER
														  )
														WHERE RN=1
														) F
													  WHERE A.PARCEL_NUMBER    =B.PARCEL_NUMBER(+)
													  AND A.PARCEL_NUMBER      =C.PARCEL_NUMBER
													  AND C.STATUS_ID          =D.STATUS_ID
													  AND E.CONTAINER_NUMBER(+)=A.CONTAINER_NUMBER
													  AND F.PARCEL_NUMBER(+)   =A.PARCEL_NUMBER
													  ) TEMPA
													WHERE TEMPA.PARCEL_NUMBER =N.PARCEL_NUMBER;

	--
																IF  V_STATUS_NAME IN ('In Transit')  THEN
																	V_SLOT:=null;
																END IF;
	--

														   V_FLAG:='S';

									  EXCEPTION

												  WHEN OTHERS THEN
												  V_MSG:=SQLCODE||' - '||SQLERRM|| '; Order number : '||P_ORDER_ID; -- Added order ID on 13-Aug-2015
												  V_FLAG:='F';
												  INSERT INTO CONNECT_LOG
															  (
																PROCEDURE_NAME,
																TABLE_NAME,
																OPERATION_NAME,
																MESSAGE,
																OPERATION_DATE,
																RESPONSE_CODE
															  )
															  VALUES
															  (
																'PR_CONNECT_SEARCH_HIST',
																V_DEBUG_MSG22,
																V_OPERATION_NAME||' : '||N.PARCEL_NUMBER,
																V_MSG,
																SYSDATE,
																'N/A'
															  );

								  END ;


						  V_OPERATION_NAME:=V_DEBUG_MSG6;
						  V_TAB_NAME:=V_DEBUG_MSG19;

						  IF V_FLAG = 'S' THEN

								V_PARCEL_DETAILS.EXTEND;

								V_COUNT1:=V_COUNT1+1;


								V_PARCEL_DETAILS(V_COUNT1):=OBJ_PARCEL_SRCHDET(V_PARCEL_NUMBER,
																		  V_PARCEL_DESCRIPTION,
																		  V_SLOT,
																		  V_STATUS_CODE,
																		  V_STATUS_NAME,
																		  V_SIGN,
																		  COLLECT_DATE,
																		  V_VERIFY_DETAILS);

						  END IF;

	END LOOP;

	  V_OPERATION_NAME:=V_DEBUG_MSG7;
	  V_TAB_NAME:=V_DEBUG_MSG14;

	  --fetching the ORDER DETAILS

	  V_OPERATION_NAME:='FETCHING ORDER DETAILS';

	SELECT
	 DISTINCT A.ORDER_NUMBER,
	  A.CUSTOMER_FIRST_NAME
	  ||' '
	  ||A.CUSTOMER_SURNAME AS CUSTOMER_NAME,
	  A.CUSTOMER_POSTCODE,
	  A.CUSTOMER_ADDRESS1
	  ||' '
	  ||A.CUSTOMER_ADDRESS2 AS CUSTOMER_ADDRESS,
	  A.ORDER_TYPE,
	  TO_CHAR(A.ORDER_CREATED_DATE,'YYYY-MM-DD HH24:MI:SS') AS EXPECTED_DATE,
	  B.FINAL_DESTINATION_ID                                 AS DESTINATION,
	  A.CUSTOMER_EMAILID,
	  A.CUSTOMER_CARD,
	  B.FACILITY_NAME,
	  A.CLIENT_ID
	INTO
	  V_ORDER_NUMBER,
	  V_CUSTOMER_NAME,
	  V_POST_CODE,
	  V_ADDRESS,
	  V_ORDER_TYPE,
	  V_EXPECTED_DATETIME,
	  V_DESTINATION_ID,
	  V_EMAIL,
	  V_CARD,
	  V_FACILITY_NAME,
	  V_CLIENT_ID
	FROM CONNECT_CUSTOMER_TRANS_AUD A,
	  ( SELECT X.PARCEL_NUMBER,
			   X.CONTAINER_NUMBER,
			   Y.FACILITY_NAME,
			   X.FINAL_DESTINATION_ID,
			   X.ORDER_NUMBER,
			   X.CLIENT_ID
			FROM
			  ( SELECT
				PARCEL_NUMBER,
				CONTAINER_NUMBER,
				FACILITY_NAME,
				FINAL_DESTINATION_ID,
				ORDER_NUMBER,
				CLIENT_ID,
				END_DATE,
				ROW_NUMBER () OVER ( PARTITION BY PARCEL_NUMBER ORDER BY END_DATE DESC NULLS LAST) RN
				FROM CONNECT_PARCEL_STATE_AUD WHERE  lower(ORDER_NUMBER)=lower(P_ORDER_ID)
											   AND  lower(CLIENT_ID)   =lower(P_CLIENT_ID)
			  ) X,
			  CONNECT_FACILITY Y
			WHERE X.FINAL_DESTINATION_ID = Y.FACILITY_ID
			AND RN=1
	  ) B
	WHERE A.ORDER_NUMBER     =B.ORDER_NUMBER
	AND A.CLIENT_ID          =B.CLIENT_ID
	AND lower(A.ORDER_NUMBER)=lower(P_ORDER_ID)
	AND lower(A.CLIENT_ID)   =lower(P_CLIENT_ID);

	V_OPERATION_NAME:=V_DEBUG_MSG8;
	V_TAB_NAME:=V_DEBUG_MSG20;

	V_COUNT3:=V_COUNT3+1;

	--P_SEARCH_DETAILS:=OBJ_ORDER_DET_TBL();
	P_SEARCH_DETAILS.extend;

	P_SEARCH_DETAILS(1):=OBJ_ORDER_DET(V_ORDER_NUMBER,V_CUSTOMER_NAME,V_POST_CODE,V_ADDRESS,V_EMAIL,V_CARD,V_ORDER_TYPE,V_EXPECTED_DATETIME,V_DESTINATION_ID,V_FACILITY_NAME,NULL,V_CLIENT_ID,V_PARCEL_DETAILS);

	 -- RESPONSE_DESC:='Records found.';
	 -- RESPONSE_CODE:='000';

	COMMIT;

	END IF;

	ELSIF P_CLIENT_ID  IS NULL THEN


	V_OPERATION_NAME:='FETCHING CLIENT LIST 2';

	/*  Start of script modified by SR on 02-12-2015 for tuning Single Hist Search to hit function based index created upon CONNECT_CUSTOMER_TRANS_AUD and CONNECT_PARCEL_STATE_AUD  */

	/*	-- Commented Previous version script before modification on 02-12-2015
	  FOR M IN (
					SELECT DISTINCT A.CLIENT_ID
					  FROM (SELECT ORDER_NUMBER, CLIENT_ID FROM (SELECT ORDER_NUMBER, CLIENT_ID , ROW_NUMBER() OVER(PARTITION BY ORDER_NUMBER, CLIENT_ID
							ORDER BY END_DATE DESC NULLS LAST) RN FROM CONNECT_CUSTOMER_TRANS_AUD)
							WHERE RN=1) A,
					 (SELECT
							PARCEL_NUMBER,
							ORDER_NUMBER,
							CLIENT_ID FROM (SELECT						PARCEL_NUMBER,
							ORDER_NUMBER,
							CLIENT_ID,
							ROW_NUMBER () OVER ( PARTITION BY PARCEL_NUMBER ORDER BY END_DATE DESC NULLS LAST) RN
							FROM CONNECT_PARCEL_STATE_AUD)WHERE RN=1) B
				  WHERE A.ORDER_NUMBER=B.ORDER_NUMBER
				   AND A.CLIENT_ID=B.CLIENT_ID
				   AND LOWER(A.ORDER_NUMBER)=LOWER(P_ORDER_ID)
			-- AND B.FINAL_DESTINATION_TYPE != 'Sort Centre Warehouse'
				) LOOP
	*/

		  FOR M IN (
					SELECT DISTINCT A.CLIENT_ID
					  FROM ( SELECT ORDER_NUMBER, CLIENT_ID
							 FROM (
									SELECT ORDER_NUMBER, CLIENT_ID , ROW_NUMBER() OVER(PARTITION BY ORDER_NUMBER, CLIENT_ID ORDER BY END_DATE DESC NULLS LAST) RN
									FROM CONNECT_CUSTOMER_TRANS_AUD
									WHERE LOWER( ORDER_NUMBER ) = LOWER( P_ORDER_ID )
								   )
							 WHERE RN=1 ) A,
						   ( SELECT PARCEL_NUMBER, ORDER_NUMBER, CLIENT_ID
							 FROM (
									SELECT PARCEL_NUMBER, ORDER_NUMBER, CLIENT_ID, ROW_NUMBER () OVER ( PARTITION BY PARCEL_NUMBER ORDER BY END_DATE DESC NULLS LAST) RN
									FROM CONNECT_PARCEL_STATE_AUD
									WHERE LOWER( ORDER_NUMBER ) = LOWER( P_ORDER_ID )
								   )
							 WHERE RN=1 ) B
					WHERE A.ORDER_NUMBER = B.ORDER_NUMBER
					AND A.CLIENT_ID = B.CLIENT_ID
				 	-- AND B.FINAL_DESTINATION_TYPE != 'Sort Centre Warehouse'
				) LOOP

	/*  End of script modified by SR on 02-12-2015 for tuning Single Hist Search to hit function based index created upon CONNECT_CUSTOMER_TRANS_AUD and CONNECT_PARCEL_STATE_AUD  */

		BEGIN

	  IF P_STORE_ID IS NOT NULL THEN

	  V_OPERATION_NAME:='FETCHING  FROM HIST TABLE 2';

	SELECT DISTINCT A.FINAL_DESTINATION_ID,B.FACILITY_NAME
	INTO V_ORDER_CHECK,V_FACILITY_NAME1 FROM
	(
		SELECT  FINAL_DESTINATION_ID,ROW_NUMBER () OVER (PARTITION BY PARCEL_NUMBER ORDER BY END_DATE DESC NULLS LAST) RN
		FROM CONNECT_PARCEL_STATE_AUD
		WHERE LOWER(ORDER_NUMBER) = LOWER(P_ORDER_ID)
		AND LOWER(CLIENT_ID) = LOWER(P_CLIENT_ID)
	  AND (FINAL_DESTINATION_TYPE != 'Sort Centre Warehouse' OR FINAL_DESTINATION_TYPE IS NULL)

	) A,
	CONNECT_FACILITY B
	WHERE A.FINAL_DESTINATION_ID = B.FACILITY_ID
	AND RN=1;

		 IF V_ORDER_CHECK <> P_STORE_ID THEN
		   RAISE EXP_BUSINESS_LOGIC;
		   END IF;

	  END IF;

		V_COUNT4:=V_COUNT4+1;
	  V_COUNT1:=0;
	  V_PARCEL_DETAILS     :=OBJ_PARCEL_SRCHDET_TBL() ;

	  V_OPERATION_NAME:='FETCHING PARCEL LIST 2 IN LOOP';

					FOR K IN (SELECT DISTINCT PARCEL_NUMBER
						FROM (
						SELECT  PARCEL_NUMBER ,ROW_NUMBER () OVER (PARTITION BY PARCEL_NUMBER ORDER BY END_DATE DESC NULLS LAST) RN
						FROM CONNECT_PARCEL_STATE_AUD
						WHERE lower(ORDER_NUMBER)      =lower(P_ORDER_ID)
						AND lower(CLIENT_ID)           =lower(M.CLIENT_ID)
			   AND LOWER(FINAL_DESTINATION_ID) = LOWER(P_STORE_ID)
			   ) WHERE RN=1
							  ) LOOP --

								V_OPERATION_NAME:=V_DEBUG_MSG4;
								V_TAB_NAME:=V_DEBUG_MSG17;



								  SELECT OBJ_PARCEL_VERIFY(SERVICES) BULK COLLECT
							  INTO V_VERIFY_DETAILS
							  FROM
								(SELECT SERVICES
								FROM
								  (SELECT SERVICE_TYPE,
									CASE
									  WHEN SERVICE_NAME='Y'
									  THEN SERVICE_TYPE
									  ELSE SERVICE_NAME
									END AS SERVICES
								  FROM CONNECT_PARCEL_SRVCE_TRANS_AUD
								  WHERE SERVICE_NAME <> 'N'
								  AND PARCEL_NUMBER   =K.PARCEL_NUMBER
								  )
								);

									   --Serv attributes count

										BEGIN

											   V_OPERATION_NAME:=V_DEBUG_MSG5;
											   V_TAB_NAME:=V_DEBUG_MSG18;

											   --fetching the details of all the parcels in the order
												V_SIGN:=NULL;
                                            IF P_EPOD_FLAG = 'TRUE'  THEN


                                                    IF V_SIGN_COUNT > 0 THEN

                                                      SELECT CUSTOMER_SIGN
														INTO V_SIGN
														FROM CONNECT_PARCEL_COLLECT_AUD
													   WHERE PARCEL_NUMBER =K.PARCEL_NUMBER;

                                                    END IF;

											 END IF;

												V_OPERATION_NAME:='FETCHING PARCEL DETAILS 2 IN LOOP';

                                                  SELECT TEMPA.PARCEL_NUMBER,
														TEMPA.PARCEL_DESCRIPTION,
														TEMPA.STATUS_ID,
														TEMPA.USER_STATUS,
														TEMPA.SLOT_ID,
														TO_CHAR(TEMPA.PARCEL_COLLECT_DATE,'YYYY-MM-DD HH24:MI:SS')
												INTO V_PARCEL_NUMBER,
													  V_PARCEL_DESCRIPTION,
													  V_STATUS_CODE,
													  V_STATUS_NAME,
													  V_SLOT,
													  COLLECT_DATE
												FROM
												  ( SELECT DISTINCT A.PARCEL_NUMBER,
													A.PARCEL_DESCRIPTION,
													C.STATUS_ID,
													D.USER_STATUS,
													CASE
													  WHEN B.SLOT_ID    IS NULL
													  AND D.STATUS_NAME <> 'Collected'
													  THEN (
														CASE
														  WHEN A.DO_ASN_NUMBER IS NULL
														  THEN A.CONTAINER_NUMBER
														  ELSE E.MASTER_LABEL
														END)
													  ELSE B.SLOT_ID
													END AS SLOT_ID,
													A.CONTAINER_NUMBER,
													E.MASTER_LABEL,
													A.DO_ASN_NUMBER,
													F.PARCEL_COLLECT_DATE
												  FROM
													(SELECT PARCEL_NUMBER,
													  CONTAINER_NUMBER,
													  DO_ASN_NUMBER,
													  PARCEL_DESCRIPTION
													FROM
													  (SELECT PARCEL_NUMBER,
														CONTAINER_NUMBER,
														DO_ASN_NUMBER,
														PARCEL_DESCRIPTION,
														END_DATE,
														ROW_NUMBER () OVER ( PARTITION BY PARCEL_NUMBER ORDER BY END_DATE DESC NULLS LAST) RN
													  FROM CONNECT_PARCEL_STATE_AUD  WHERE PARCEL_NUMBER=K.PARCEL_NUMBER
													  )
													WHERE RN=1
													) A,
													(SELECT PARCEL_NUMBER,
													  SLOT_ID
													FROM
													  (SELECT PARCEL_NUMBER,
														SLOT_ID,
														END_DATE,
														ROW_NUMBER () OVER ( PARTITION BY PARCEL_NUMBER ORDER BY END_DATE DESC NULLS LAST) RN
													  FROM CONNECT_LOC_PKG_TRANS_AUD  WHERE PARCEL_NUMBER=K.PARCEL_NUMBER
													  )
													WHERE RN=1
													) B,
													(SELECT PARCEL_NUMBER,
													  STATUS_ID
													FROM
													  (SELECT PARCEL_NUMBER,
														STATUS_ID,
														END_DATE,
														ROW_NUMBER () OVER ( PARTITION BY PARCEL_NUMBER ORDER BY END_DATE DESC NULLS LAST) RN
													  FROM CONNECT_PARCEL_LTST_TRANS_AUD  WHERE PARCEL_NUMBER=K.PARCEL_NUMBER
													  )
													WHERE RN=1
													) C,
													CONNECT_STATUS_MASTER D,
													(SELECT CONTAINER_NUMBER,
													  MASTER_LABEL
													FROM
													  (SELECT CONTAINER_NUMBER,
														MASTER_LABEL,
														END_DATE,
														ROW_NUMBER () OVER ( PARTITION BY CONTAINER_NUMBER ORDER BY END_DATE DESC NULLS LAST) RN
													  FROM CONNECT_CONTAINER_TRANS_AUD  --WHERE PARCEL_NUMBER=N.PARCEL_NUMBER
													  )
													WHERE RN=1
													) E,
													(SELECT PARCEL_NUMBER,
													  PARCEL_COLLECT_DATE
													FROM
													  (SELECT PARCEL_NUMBER,
														PARCEL_COLLECT_DATE,
														END_DATE,
														ROW_NUMBER () OVER ( PARTITION BY PARCEL_NUMBER ORDER BY END_DATE DESC NULLS LAST) RN
													  FROM CONNECT_PARCEL_COLLECT_AUD WHERE PARCEL_NUMBER=K.PARCEL_NUMBER
													  )
													WHERE RN=1
													) F
												  WHERE A.PARCEL_NUMBER    =B.PARCEL_NUMBER(+)
												  AND A.PARCEL_NUMBER      =C.PARCEL_NUMBER
												  AND C.STATUS_ID          =D.STATUS_ID
												  AND E.CONTAINER_NUMBER(+)=A.CONTAINER_NUMBER
												  AND F.PARCEL_NUMBER(+)   =A.PARCEL_NUMBER
												  ) TEMPA
												WHERE TEMPA.PARCEL_NUMBER =K.PARCEL_NUMBER;

--
                                                            IF  V_STATUS_NAME IN ('In Transit')  THEN
                                                                V_SLOT:=null;
                                                            END IF;
--

															V_FLAG:='S';


									EXCEPTION

                                              WHEN OTHERS THEN
                                              V_MSG:=SQLCODE||' - '||SQLERRM|| '; Order number : '||P_ORDER_ID; -- Added order ID on 13-Aug-2015
                                              V_FLAG:='F';
                                              INSERT INTO CONNECT_LOG
                                                          (
                                                            PROCEDURE_NAME,
                                                            TABLE_NAME,
                                                            OPERATION_NAME,
                                                            MESSAGE,
                                                            OPERATION_DATE,
                                                            RESPONSE_CODE
                                                          )
                                                          VALUES
                                                          (
                                                            'PR_CONNECT_SEARCH_HIST',
                                                            V_DEBUG_MSG22,
                                                            V_OPERATION_NAME||' : '||K.PARCEL_NUMBER,
                                                            V_MSG,
                                                            SYSDATE,
                                                            'N/A'
                                                          );

									END ;

											V_OPERATION_NAME:=V_DEBUG_MSG6;
											V_TAB_NAME:=V_DEBUG_MSG19;

					IF V_FLAG = 'S' THEN

                            V_PARCEL_DETAILS.EXTEND;

                            V_COUNT1:=V_COUNT1+1;


                            V_PARCEL_DETAILS(V_COUNT1):=OBJ_PARCEL_SRCHDET(V_PARCEL_NUMBER,
                                                                      V_PARCEL_DESCRIPTION,
                                                                      V_SLOT,
                                                                      V_STATUS_CODE,
                                                                      V_STATUS_NAME,
                                                                      V_SIGN,
                                                                      COLLECT_DATE,
                                                                      V_VERIFY_DETAILS);


					END IF;

				END LOOP;--

		V_OPERATION_NAME:=V_DEBUG_MSG7;
		V_TAB_NAME:=V_DEBUG_MSG14;
		V_OPERATION_NAME:='FETCHING ORDER DETAILS';


SELECT
 DISTINCT A.ORDER_NUMBER,
  A.CUSTOMER_FIRST_NAME
  ||' '
  ||A.CUSTOMER_SURNAME AS CUSTOMER_NAME,
  A.CUSTOMER_POSTCODE,
  A.CUSTOMER_ADDRESS1
  ||' '
  ||A.CUSTOMER_ADDRESS2 AS CUSTOMER_ADDRESS,
  A.ORDER_TYPE,
  TO_CHAR(A.ORDER_CREATED_DATE,'YYYY-MM-DD HH24:MI:SS') AS EXPECTED_DATE,
  B.FINAL_DESTINATION_ID                                 AS DESTINATION,
  A.CUSTOMER_EMAILID,
  A.CUSTOMER_CARD,
  B.FACILITY_NAME,
  A.CLIENT_ID
INTO
  V_ORDER_NUMBER,
  V_CUSTOMER_NAME,
  V_POST_CODE,
  V_ADDRESS,
  V_ORDER_TYPE,
  V_EXPECTED_DATETIME,
  V_DESTINATION_ID,
  V_EMAIL,
  V_CARD,
  V_FACILITY_NAME,
  V_CLIENT_ID
FROM CONNECT_CUSTOMER_TRANS_AUD A,
  ( SELECT X.PARCEL_NUMBER,
		   X.CONTAINER_NUMBER,
		   Y.FACILITY_NAME,
		   X.FINAL_DESTINATION_ID,
		   X.ORDER_NUMBER,
		   X.CLIENT_ID
        FROM
          ( SELECT
            PARCEL_NUMBER,
            CONTAINER_NUMBER,
            FACILITY_NAME,
            FINAL_DESTINATION_ID,
            ORDER_NUMBER,
            CLIENT_ID,
            END_DATE,
            ROW_NUMBER () OVER ( PARTITION BY PARCEL_NUMBER ORDER BY END_DATE DESC NULLS LAST ) RN
            FROM CONNECT_PARCEL_STATE_AUD WHERE  lower(ORDER_NUMBER)=lower(P_ORDER_ID)
                                           AND  lower(CLIENT_ID)   =lower(M.CLIENT_ID)
          ) X,
		  CONNECT_FACILITY Y
		WHERE X.FINAL_DESTINATION_ID = Y.FACILITY_ID
		AND RN=1
  ) B
WHERE A.ORDER_NUMBER     =B.ORDER_NUMBER
AND A.CLIENT_ID          =B.CLIENT_ID
AND lower(A.ORDER_NUMBER)=lower(P_ORDER_ID)
AND lower(A.CLIENT_ID)   =lower(M.CLIENT_ID);


		V_OPERATION_NAME:=V_DEBUG_MSG8;
		V_TAB_NAME:=V_DEBUG_MSG20;

		V_COUNT3:=V_COUNT3+1;



      P_SEARCH_DETAILS.extend;
	  P_SEARCH_DETAILS(V_COUNT4):=OBJ_ORDER_DET(V_ORDER_NUMBER,V_CUSTOMER_NAME,V_POST_CODE,V_ADDRESS,V_EMAIL,V_CARD,V_ORDER_TYPE,V_EXPECTED_DATETIME,V_DESTINATION_ID,V_FACILITY_NAME,NULL,V_CLIENT_ID,V_PARCEL_DETAILS);




EXCEPTION

   WHEN EXP_BUSINESS_LOGIC THEN

	  RESPONSE_CODE:='204';

	  V_MSG:='Different Store ID'|| '; Order number : '||P_ORDER_ID; -- Added order ID on 13-Aug-2015

			ROLLBACK;

			INSERT INTO CONNECT_LOG
			(
				PROCEDURE_NAME,
				TABLE_NAME,
				OPERATION_NAME,
				MESSAGE,
				OPERATION_DATE,
				RESPONSE_CODE
			)
			VALUES
			(
				'PR_CONNECT_SEARCH_HIST',
				V_TAB_NAME,
				V_OPERATION_NAME,
				V_MSG,
				SYSDATE,
				RESPONSE_CODE
			);

	  WHEN NO_DATA_FOUND THEN



	  RESPONSE_CODE:='204';

	  V_MSG:=SQLCODE||' - '||SQLERRM|| '; Order number : '||P_ORDER_ID; -- Added order ID on 13-Aug-2015

			ROLLBACK;

			INSERT INTO CONNECT_LOG
			(
				PROCEDURE_NAME,
				TABLE_NAME,
				OPERATION_NAME,
				MESSAGE,
				OPERATION_DATE,
				RESPONSE_CODE
			)
			VALUES
			(
				'PR_CONNECT_SEARCH_HIST',
				V_TAB_NAME,
				V_OPERATION_NAME,
				V_MSG,
				SYSDATE,
				RESPONSE_CODE
			);

END   ;

END LOOP;


END IF;  --NO CLIENT ID

IF P_SEARCH_DETAILS.COUNT = 0 THEN

	RESPONSE_CODE:='204';
	RESPONSE_DESC:='No data found';

ELSE

	RESPONSE_DESC:='Records found.';
	RESPONSE_CODE:='000';

END IF;

ELSE -- to implement without STORE_ID Search 14/09/2015

	IF P_CLIENT_ID IS NOT NULL THEN

			V_OPERATION_NAME:='SELECT FROM HIST TABLE 1';

			SELECT DISTINCT A.FINAL_DESTINATION_ID,B.FACILITY_NAME
			INTO V_ORDER_CHECK,V_FACILITY_NAME1 FROM
				(
					SELECT  FINAL_DESTINATION_ID,ROW_NUMBER () OVER (PARTITION BY PARCEL_NUMBER ORDER BY END_DATE DESC NULLS LAST) RN
					FROM CONNECT_PARCEL_STATE_AUD
					WHERE LOWER(ORDER_NUMBER) = LOWER(P_ORDER_ID)
					AND LOWER(CLIENT_ID) = LOWER(P_CLIENT_ID) --- cHANGE TO ADD FACILITY TYPE
					AND ( FINAL_DESTINATION_TYPE != 'Sort Centre Warehouse' OR FINAL_DESTINATION_TYPE IS NULL )
				) A,
				CONNECT_FACILITY B
			WHERE A.FINAL_DESTINATION_ID = B.FACILITY_ID
			AND RN=1;

			/*  Commented to implement without STORE_ID Search 14/09/2015
			IF V_ORDER_CHECK <> P_STORE_ID THEN
				RAISE EXP_BUSINESS_LOGIC;

			ELSE */

					V_OPERATION_NAME:='Auditing Action';
					V_TAB_NAME:='CONNECT_USER_AUDIT';

					-- Auditing Search Action
					INSERT INTO CONNECT_USER_AUDIT
						(
						  USER_ID,
						  PACKAGE_NUMBER,
						  STORE_NUMBER,
						  ACTION_TYPE,
						  MESSAGE,
						  AUDIT_CREATE_DATE,
						  PACKAGE_TYPE )
					VALUES (
							'N/A',
							P_ORDER_ID,
							'N/A',
							'Search Single Order',
							'Searched details for order number : '||P_ORDER_ID||'and client id : '||P_CLIENT_ID,
							SYSDATE,
							'Order' );

					-- Validating Signature Information
					V_OPERATION_NAME:='Validating Signature';
					V_TAB_NAME:='CONNECT_PARCEL_COLLECT';

					-- fetching all the parcel details for the order
					V_OPERATION_NAME:='FETCHING PARCEL LIST 1';

							FOR N IN (SELECT DISTINCT PARCEL_NUMBER
								FROM (
										SELECT  PARCEL_NUMBER ,ROW_NUMBER () OVER (PARTITION BY PARCEL_NUMBER ORDER BY END_DATE DESC NULLS LAST) RN
										FROM CONNECT_PARCEL_STATE_AUD
										WHERE lower(ORDER_NUMBER)      =lower(P_ORDER_ID)
										AND lower(CLIENT_ID)           =lower(P_CLIENT_ID)
									--	AND LOWER(FINAL_DESTINATION_ID) = LOWER(P_STORE_ID )  /* Commented to implement without STORE_ID Search 14/09/2015 */
									) WHERE RN=1 --- cHANGE FOR FACILITY TYPE
								) LOOP

									V_OPERATION_NAME:=V_DEBUG_MSG4;
									V_TAB_NAME:=V_DEBUG_MSG17;

								 -- fetching the parcel service details for all the parcels in the order

									SELECT OBJ_PARCEL_VERIFY(SERVICES) BULK COLLECT
									INTO V_VERIFY_DETAILS
									FROM
										(SELECT SERVICES
												FROM
												  (SELECT SERVICE_TYPE,
													CASE
													  WHEN SERVICE_NAME='Y'
													  THEN SERVICE_TYPE
													  ELSE SERVICE_NAME
													END AS SERVICES
												  FROM CONNECT_PARCEL_SRVCE_TRANS_AUD
												  WHERE SERVICE_NAME <> 'N'
												  AND PARCEL_NUMBER   =N.PARCEL_NUMBER
												  )
										);

									BEGIN

										V_OPERATION_NAME:=V_DEBUG_MSG5;
										V_TAB_NAME:=V_DEBUG_MSG18;

										 --fetching the details of all the parcels in the order

										V_SIGN:=NULL;
										IF P_EPOD_FLAG = 'TRUE'  THEN

											IF V_SIGN_COUNT > 0 THEN

												V_OPERATION_NAME:='SELECT CUSTOMER_SIGN';

												SELECT CUSTOMER_SIGN
												INTO V_SIGN
												FROM CONNECT_PARCEL_COLLECT_AUD
												WHERE PARCEL_NUMBER =N.PARCEL_NUMBER;

											END IF;

										END IF;


										V_OPERATION_NAME:='FETCHING PARCEL DETAILS 1';

										SELECT 	TEMPA.PARCEL_NUMBER,
												TEMPA.PARCEL_DESCRIPTION,
												TEMPA.STATUS_ID,
												TEMPA.USER_STATUS,
												TEMPA.SLOT_ID,
												TO_CHAR(TEMPA.PARCEL_COLLECT_DATE,'YYYY-MM-DD HH24:MI:SS')
										INTO V_PARCEL_NUMBER,
												V_PARCEL_DESCRIPTION,
												V_STATUS_CODE,
												V_STATUS_NAME,
												V_SLOT,
												COLLECT_DATE
										FROM (
												SELECT DISTINCT A.PARCEL_NUMBER,
																A.PARCEL_DESCRIPTION,
																C.STATUS_ID,
																D.USER_STATUS,
																CASE
																	WHEN B.SLOT_ID IS NULL AND D.STATUS_NAME <> 'Collected'
																		THEN (
																				CASE
																					WHEN A.DO_ASN_NUMBER IS NULL
																						THEN A.CONTAINER_NUMBER
																					ELSE E.MASTER_LABEL
																				END
																			 )
																ELSE B.SLOT_ID
																END AS SLOT_ID,
																		A.CONTAINER_NUMBER,
																		E.MASTER_LABEL,
																		A.DO_ASN_NUMBER,
																		F.PARCEL_COLLECT_DATE
																		FROM
																		(SELECT PARCEL_NUMBER,
																		  CONTAINER_NUMBER,
																		  DO_ASN_NUMBER,
																		  PARCEL_DESCRIPTION
																		FROM
																		  (SELECT PARCEL_NUMBER,
																			CONTAINER_NUMBER,
																			DO_ASN_NUMBER,
																			PARCEL_DESCRIPTION,
																			END_DATE,
																			ROW_NUMBER () OVER ( PARTITION BY PARCEL_NUMBER ORDER BY END_DATE DESC NULLS LAST) RN
																		  FROM CONNECT_PARCEL_STATE_AUD  WHERE PARCEL_NUMBER=N.PARCEL_NUMBER
																		  )
																		WHERE RN=1
																		) A,
																		(SELECT PARCEL_NUMBER,
																		  SLOT_ID
																		FROM
																		  (SELECT PARCEL_NUMBER,
																			SLOT_ID,
																			END_DATE,
																			ROW_NUMBER () OVER ( PARTITION BY PARCEL_NUMBER ORDER BY END_DATE DESC NULLS LAST) RN
																		  FROM CONNECT_LOC_PKG_TRANS_AUD  WHERE PARCEL_NUMBER=N.PARCEL_NUMBER
																		  )
																		WHERE RN=1
																		) B,
																		(SELECT PARCEL_NUMBER,
																		  STATUS_ID
																		FROM
																		  (SELECT PARCEL_NUMBER,
																			STATUS_ID,
																			END_DATE,
																			ROW_NUMBER () OVER ( PARTITION BY PARCEL_NUMBER ORDER BY END_DATE DESC NULLS LAST) RN
																		  FROM CONNECT_PARCEL_LTST_TRANS_AUD  WHERE PARCEL_NUMBER=N.PARCEL_NUMBER
																		  )
																		WHERE RN=1
																		) C,
																		CONNECT_STATUS_MASTER D,
																		(SELECT CONTAINER_NUMBER,
																		  MASTER_LABEL
																		FROM
																		  (SELECT CONTAINER_NUMBER,
																			MASTER_LABEL,
																			END_DATE,
																			ROW_NUMBER () OVER ( PARTITION BY CONTAINER_NUMBER ORDER BY END_DATE DESC NULLS LAST) RN
																		  FROM CONNECT_CONTAINER_TRANS_AUD  --WHERE PARCEL_NUMBER=N.PARCEL_NUMBER
																		  )
																		WHERE RN=1
																		) E,
																		(SELECT PARCEL_NUMBER,
																		  PARCEL_COLLECT_DATE
																		FROM
																		  (SELECT PARCEL_NUMBER,
																			PARCEL_COLLECT_DATE,
																			END_DATE,
																			ROW_NUMBER () OVER ( PARTITION BY PARCEL_NUMBER ORDER BY END_DATE DESC NULLS LAST) RN
																		  FROM CONNECT_PARCEL_COLLECT_AUD WHERE PARCEL_NUMBER=N.PARCEL_NUMBER
																		  )
																		WHERE RN=1
																		) F
																	  WHERE A.PARCEL_NUMBER    =B.PARCEL_NUMBER(+)
																	  AND A.PARCEL_NUMBER      =C.PARCEL_NUMBER
																	  AND C.STATUS_ID          =D.STATUS_ID
																	  AND E.CONTAINER_NUMBER(+)=A.CONTAINER_NUMBER
																	  AND F.PARCEL_NUMBER(+)   =A.PARCEL_NUMBER
																	  ) TEMPA
										WHERE TEMPA.PARCEL_NUMBER =N.PARCEL_NUMBER;

					--
										IF  V_STATUS_NAME IN ('In Transit')  THEN
											V_SLOT:=null;
										END IF;
					--

										V_FLAG:='S';

									EXCEPTION

										 WHEN OTHERS THEN
										 V_MSG:=SQLCODE||' - '||SQLERRM|| '; Order number : '||P_ORDER_ID; -- Added order ID on 13-Aug-2015
										  V_FLAG:='F';
										  INSERT INTO CONNECT_LOG
													  (
														PROCEDURE_NAME,
														TABLE_NAME,
														OPERATION_NAME,
														MESSAGE,
														OPERATION_DATE,
														RESPONSE_CODE
													  )
													  VALUES
													  (
														'PR_CONNECT_SEARCH_HIST',
														V_DEBUG_MSG22,
														V_OPERATION_NAME||' : '||N.PARCEL_NUMBER,
														V_MSG,
														SYSDATE,
														'N/A'
													  );

									END ;


									V_OPERATION_NAME:=V_DEBUG_MSG6;
									V_TAB_NAME:=V_DEBUG_MSG19;

									IF V_FLAG = 'S' THEN

												V_PARCEL_DETAILS.EXTEND;
												V_COUNT1:=V_COUNT1+1;


												V_PARCEL_DETAILS(V_COUNT1):=OBJ_PARCEL_SRCHDET(V_PARCEL_NUMBER,
																						  V_PARCEL_DESCRIPTION,
																						  V_SLOT,
																						  V_STATUS_CODE,
																						  V_STATUS_NAME,
																						  V_SIGN,
																						  COLLECT_DATE,
																						  V_VERIFY_DETAILS);

									END IF;

							END LOOP;

					V_OPERATION_NAME:=V_DEBUG_MSG7;
					V_TAB_NAME:=V_DEBUG_MSG14;

					--fetching the ORDER DETAILS

					V_OPERATION_NAME:='FETCHING ORDER DETAILS';

					SELECT
					 DISTINCT A.ORDER_NUMBER,
					  A.CUSTOMER_FIRST_NAME
					  ||' '
					  ||A.CUSTOMER_SURNAME AS CUSTOMER_NAME,
					  A.CUSTOMER_POSTCODE,
					  A.CUSTOMER_ADDRESS1
					  ||' '
					  ||A.CUSTOMER_ADDRESS2 AS CUSTOMER_ADDRESS,
					  A.ORDER_TYPE,
					  TO_CHAR(A.ORDER_CREATED_DATE,'YYYY-MM-DD HH24:MI:SS') AS EXPECTED_DATE,
					  B.FINAL_DESTINATION_ID                                 AS DESTINATION,
					  A.CUSTOMER_EMAILID,
					  A.CUSTOMER_CARD,
					  B.FACILITY_NAME,
					  A.CLIENT_ID
					INTO
					  V_ORDER_NUMBER,
					  V_CUSTOMER_NAME,
					  V_POST_CODE,
					  V_ADDRESS,
					  V_ORDER_TYPE,
					  V_EXPECTED_DATETIME,
					  V_DESTINATION_ID,
					  V_EMAIL,
					  V_CARD,
					  V_FACILITY_NAME,
					  V_CLIENT_ID
					FROM CONNECT_CUSTOMER_TRANS_AUD A,
					  ( SELECT X.PARCEL_NUMBER,
							   X.CONTAINER_NUMBER,
							   Y.FACILITY_NAME,
							   X.FINAL_DESTINATION_ID,
							   X.ORDER_NUMBER,
							   X.CLIENT_ID
							FROM
							  ( SELECT
								PARCEL_NUMBER,
								CONTAINER_NUMBER,
								FACILITY_NAME,
								FINAL_DESTINATION_ID,
								ORDER_NUMBER,
								CLIENT_ID,
								END_DATE,
								ROW_NUMBER () OVER ( PARTITION BY PARCEL_NUMBER ORDER BY END_DATE DESC NULLS LAST) RN
								FROM CONNECT_PARCEL_STATE_AUD WHERE  lower(ORDER_NUMBER)=lower(P_ORDER_ID)
															   AND  lower(CLIENT_ID)   =lower(P_CLIENT_ID)
							  ) X,
							  CONNECT_FACILITY Y
							WHERE X.FINAL_DESTINATION_ID = Y.FACILITY_ID
							AND RN=1
					  ) B
					WHERE A.ORDER_NUMBER     =B.ORDER_NUMBER
					AND A.CLIENT_ID          =B.CLIENT_ID
					AND lower(A.ORDER_NUMBER)=lower(P_ORDER_ID)
					AND lower(A.CLIENT_ID)   =lower(P_CLIENT_ID);

					V_OPERATION_NAME:=V_DEBUG_MSG8;
					V_TAB_NAME:=V_DEBUG_MSG20;

					V_COUNT3:=V_COUNT3+1;

					--P_SEARCH_DETAILS:=OBJ_ORDER_DET_TBL();
					P_SEARCH_DETAILS.extend;

					P_SEARCH_DETAILS(1):=OBJ_ORDER_DET(V_ORDER_NUMBER,V_CUSTOMER_NAME,V_POST_CODE,V_ADDRESS,V_EMAIL,V_CARD,V_ORDER_TYPE,V_EXPECTED_DATETIME,V_DESTINATION_ID,V_FACILITY_NAME,NULL,V_CLIENT_ID,V_PARCEL_DETAILS);

					 -- RESPONSE_DESC:='Records found.';
					 -- RESPONSE_CODE:='000';

					COMMIT;

		ELSIF P_CLIENT_ID  IS NULL THEN

			V_OPERATION_NAME:='FETCHING CLIENT LIST 2';

			/*  Start of script modified by SR on 02-12-2015 for tuning Single Hist Search to hit function based index created upon CONNECT_CUSTOMER_TRANS_AUD and CONNECT_PARCEL_STATE_AUD  */
			/*	-- Commented Previous version script before modification on 02-12-2015
			FOR M IN (
							SELECT DISTINCT A.CLIENT_ID
							  FROM (SELECT ORDER_NUMBER, CLIENT_ID FROM (SELECT ORDER_NUMBER, CLIENT_ID , ROW_NUMBER() OVER(PARTITION BY ORDER_NUMBER, CLIENT_ID
									ORDER BY END_DATE DESC NULLS LAST) RN FROM	  CONNECT_CUSTOMER_TRANS_AUD)
									WHERE RN=1) A,
							 (SELECT
									PARCEL_NUMBER,
									ORDER_NUMBER,
									CLIENT_ID FROM (SELECT						PARCEL_NUMBER,
									ORDER_NUMBER,
									CLIENT_ID,
									ROW_NUMBER () OVER ( PARTITION BY PARCEL_NUMBER ORDER BY END_DATE DESC NULLS LAST) RN
									FROM CONNECT_PARCEL_STATE_AUD)WHERE RN=1) B
						  WHERE A.ORDER_NUMBER=B.ORDER_NUMBER
						   AND A.CLIENT_ID=B.CLIENT_ID
						   AND LOWER(A.ORDER_NUMBER)=LOWER(P_ORDER_ID)
						-- AND B.FINAL_DESTINATION_TYPE != 'Sort Centre Warehouse'
					) LOOP
			*/

			FOR M IN (
					SELECT DISTINCT A.CLIENT_ID
					  FROM ( SELECT ORDER_NUMBER, CLIENT_ID
							 FROM (
									SELECT ORDER_NUMBER, CLIENT_ID , ROW_NUMBER() OVER(PARTITION BY ORDER_NUMBER, CLIENT_ID ORDER BY END_DATE DESC NULLS LAST) RN
									FROM CONNECT_CUSTOMER_TRANS_AUD
									WHERE LOWER( ORDER_NUMBER ) = LOWER( P_ORDER_ID )
								   )
							 WHERE RN=1 ) A,
						   ( SELECT PARCEL_NUMBER, ORDER_NUMBER, CLIENT_ID
							 FROM (
									SELECT PARCEL_NUMBER, ORDER_NUMBER, CLIENT_ID, ROW_NUMBER () OVER ( PARTITION BY PARCEL_NUMBER ORDER BY END_DATE DESC NULLS LAST) RN
									FROM CONNECT_PARCEL_STATE_AUD
									WHERE LOWER( ORDER_NUMBER ) = LOWER( P_ORDER_ID )
								   )
							 WHERE RN=1) B
					WHERE A.ORDER_NUMBER = B.ORDER_NUMBER
					AND A.CLIENT_ID = B.CLIENT_ID
				 	-- AND B.FINAL_DESTINATION_TYPE != 'Sort Centre Warehouse'
				) LOOP

/*  End of script modified by SR on 02-12-2015 for tuning Single Hist Search to hit function based index created upon CONNECT_CUSTOMER_TRANS_AUD and CONNECT_PARCEL_STATE_AUD  */

				BEGIN

				/* without STORE_ID Search
				IF P_STORE_ID IS NOT NULL THEN

						V_OPERATION_NAME:='FETCHING FROM HIST TABLE 2';

						SELECT DISTINCT A.FINAL_DESTINATION_ID,B.FACILITY_NAME
						INTO V_ORDER_CHECK,V_FACILITY_NAME1 FROM
						(
							SELECT  FINAL_DESTINATION_ID,ROW_NUMBER () OVER (PARTITION BY PARCEL_NUMBER ORDER BY END_DATE DESC NULLS LAST) RN
							FROM CONNECT_PARCEL_STATE_AUD
							WHERE LOWER(ORDER_NUMBER) = LOWER(P_ORDER_ID)
							AND LOWER(CLIENT_ID) = LOWER(P_CLIENT_ID)
						  AND (FINAL_DESTINATION_TYPE != 'Sort Centre Warehouse' OR FINAL_DESTINATION_TYPE IS NULL)
						) A,
						CONNECT_FACILITY B
						WHERE A.FINAL_DESTINATION_ID = B.FACILITY_ID
						AND RN=1;

							IF V_ORDER_CHECK <> P_STORE_ID THEN
								RAISE EXP_BUSINESS_LOGIC;
							END IF;

					END IF; */

					V_COUNT4 := V_COUNT4+1;
					V_COUNT1 := 0;
					V_PARCEL_DETAILS := OBJ_PARCEL_SRCHDET_TBL() ;

					V_OPERATION_NAME:='FETCHING PARCEL LIST 2 IN LOOP';

					FOR K IN (
						SELECT DISTINCT PARCEL_NUMBER FROM (
															SELECT  PARCEL_NUMBER ,ROW_NUMBER () OVER (PARTITION BY PARCEL_NUMBER ORDER BY END_DATE DESC NULLS LAST) RN
															FROM CONNECT_PARCEL_STATE_AUD
															WHERE lower(ORDER_NUMBER) = lower(P_ORDER_ID)
															AND lower(CLIENT_ID) = lower(M.CLIENT_ID)
														--	AND LOWER(FINAL_DESTINATION_ID) = LOWER(P_STORE_ID ) --without STORE_ID Search
															) WHERE RN=1
					) LOOP

						V_OPERATION_NAME:=V_DEBUG_MSG4;
						V_TAB_NAME:=V_DEBUG_MSG17;

						SELECT OBJ_PARCEL_VERIFY(SERVICES) BULK COLLECT
						INTO V_VERIFY_DETAILS
						FROM
						(SELECT SERVICES
							FROM
						  (SELECT SERVICE_TYPE,
							CASE
							  WHEN SERVICE_NAME='Y'
							  THEN SERVICE_TYPE
							  ELSE SERVICE_NAME
							END AS SERVICES
						  FROM CONNECT_PARCEL_SRVCE_TRANS_AUD
						  WHERE SERVICE_NAME <> 'N'
						  AND PARCEL_NUMBER   =K.PARCEL_NUMBER
						  )
						);

						--Serv attributes count

							BEGIN
								V_OPERATION_NAME:=V_DEBUG_MSG5;
								V_TAB_NAME:=V_DEBUG_MSG18;

								--fetching the details of all the parcels in the order
								V_SIGN:=NULL;

								IF P_EPOD_FLAG = 'TRUE'  THEN

										IF V_SIGN_COUNT > 0 THEN

											  SELECT CUSTOMER_SIGN
												INTO V_SIGN
												FROM CONNECT_PARCEL_COLLECT_AUD
											  WHERE PARCEL_NUMBER =K.PARCEL_NUMBER;

										END IF;

								END IF;

							V_OPERATION_NAME:='FETCHING PARCEL DETAILS 2 IN LOOP';

							SELECT TEMPA.PARCEL_NUMBER,
									TEMPA.PARCEL_DESCRIPTION,
									TEMPA.STATUS_ID,
									TEMPA.USER_STATUS,
									TEMPA.SLOT_ID,
									TO_CHAR(TEMPA.PARCEL_COLLECT_DATE,'YYYY-MM-DD HH24:MI:SS')
							INTO V_PARCEL_NUMBER,
								  V_PARCEL_DESCRIPTION,
								  V_STATUS_CODE,
								  V_STATUS_NAME,
								  V_SLOT,
								  COLLECT_DATE
							FROM
							  ( SELECT DISTINCT A.PARCEL_NUMBER,
								A.PARCEL_DESCRIPTION,
								C.STATUS_ID,
								D.USER_STATUS,
								CASE
								  WHEN B.SLOT_ID    IS NULL
								  AND D.STATUS_NAME <> 'Collected'
								  THEN (
									CASE
									  WHEN A.DO_ASN_NUMBER IS NULL
									  THEN A.CONTAINER_NUMBER
									  ELSE E.MASTER_LABEL
									END)
								  ELSE B.SLOT_ID
								END AS SLOT_ID,
								A.CONTAINER_NUMBER,
								E.MASTER_LABEL,
								A.DO_ASN_NUMBER,
								F.PARCEL_COLLECT_DATE
							  FROM
								(SELECT PARCEL_NUMBER,
								  CONTAINER_NUMBER,
								  DO_ASN_NUMBER,
								  PARCEL_DESCRIPTION
								FROM
								  (SELECT PARCEL_NUMBER,
									CONTAINER_NUMBER,
									DO_ASN_NUMBER,
									PARCEL_DESCRIPTION,
									END_DATE,
									ROW_NUMBER () OVER ( PARTITION BY PARCEL_NUMBER ORDER BY END_DATE DESC NULLS LAST) RN
								  FROM CONNECT_PARCEL_STATE_AUD  WHERE PARCEL_NUMBER=K.PARCEL_NUMBER
								  )
								WHERE RN=1
								) A,
								(SELECT PARCEL_NUMBER,
								  SLOT_ID
								FROM
								  (SELECT PARCEL_NUMBER,
									SLOT_ID,
									END_DATE,
									ROW_NUMBER () OVER ( PARTITION BY PARCEL_NUMBER ORDER BY END_DATE DESC NULLS LAST) RN
								  FROM CONNECT_LOC_PKG_TRANS_AUD  WHERE PARCEL_NUMBER=K.PARCEL_NUMBER
								  )
								WHERE RN=1
								) B,
								(SELECT PARCEL_NUMBER,
								  STATUS_ID
								FROM
								  (SELECT PARCEL_NUMBER,
									STATUS_ID,
									END_DATE,
									ROW_NUMBER () OVER ( PARTITION BY PARCEL_NUMBER ORDER BY END_DATE DESC NULLS LAST) RN
								  FROM CONNECT_PARCEL_LTST_TRANS_AUD  WHERE PARCEL_NUMBER=K.PARCEL_NUMBER
								  )
								WHERE RN=1
								) C,
								CONNECT_STATUS_MASTER D,
								(SELECT CONTAINER_NUMBER,
								  MASTER_LABEL
								FROM
								  (SELECT CONTAINER_NUMBER,
									MASTER_LABEL,
									END_DATE,
									ROW_NUMBER () OVER ( PARTITION BY CONTAINER_NUMBER ORDER BY END_DATE DESC NULLS LAST) RN
								  FROM CONNECT_CONTAINER_TRANS_AUD  --WHERE PARCEL_NUMBER=N.PARCEL_NUMBER
								  )
								WHERE RN=1
								) E,
								(SELECT PARCEL_NUMBER,
								  PARCEL_COLLECT_DATE
								FROM
								  (SELECT PARCEL_NUMBER,
									PARCEL_COLLECT_DATE,
									END_DATE,
									ROW_NUMBER () OVER ( PARTITION BY PARCEL_NUMBER ORDER BY END_DATE DESC NULLS LAST) RN
								  FROM CONNECT_PARCEL_COLLECT_AUD WHERE PARCEL_NUMBER=K.PARCEL_NUMBER
								  )
								WHERE RN=1
								) F
							  WHERE A.PARCEL_NUMBER    =B.PARCEL_NUMBER(+)
							  AND A.PARCEL_NUMBER      =C.PARCEL_NUMBER
							  AND C.STATUS_ID          =D.STATUS_ID
							  AND E.CONTAINER_NUMBER(+)=A.CONTAINER_NUMBER
							  AND F.PARCEL_NUMBER(+)   =A.PARCEL_NUMBER
							  ) TEMPA
							WHERE TEMPA.PARCEL_NUMBER =K.PARCEL_NUMBER;

	--
							IF  V_STATUS_NAME IN ('In Transit')  THEN
								V_SLOT:=null;
							END IF;
	--
							V_FLAG:='S';


							EXCEPTION

								  WHEN OTHERS THEN
								  V_MSG:=SQLCODE||' - '||SQLERRM|| '; Order number : '||P_ORDER_ID; -- Added order ID on 13-Aug-2015
								  V_FLAG:='F';
								  INSERT INTO CONNECT_LOG
											  (
												PROCEDURE_NAME,
												TABLE_NAME,
												OPERATION_NAME,
												MESSAGE,
												OPERATION_DATE,
												RESPONSE_CODE
											  )
											  VALUES
											  (
												'PR_CONNECT_SEARCH_HIST',
												V_DEBUG_MSG22,
												V_OPERATION_NAME||' : '||K.PARCEL_NUMBER,
												V_MSG,
												SYSDATE,
												'N/A'
											  );
							END;

							V_OPERATION_NAME := V_DEBUG_MSG6;
							V_TAB_NAME := V_DEBUG_MSG19;

							IF V_FLAG = 'S' THEN

							V_PARCEL_DETAILS.EXTEND;
							V_COUNT1:=V_COUNT1+1;
							V_PARCEL_DETAILS(V_COUNT1):= OBJ_PARCEL_SRCHDET ( V_PARCEL_NUMBER,
																			   V_PARCEL_DESCRIPTION,
																			   V_SLOT,
																			   V_STATUS_CODE,
																			   V_STATUS_NAME,
																			   V_SIGN,
																			   COLLECT_DATE,
																			   V_VERIFY_DETAILS );

							END IF;
					END LOOP;

				V_OPERATION_NAME:=V_DEBUG_MSG7;
				V_TAB_NAME:=V_DEBUG_MSG14;
				V_OPERATION_NAME:='FETCHING ORDER DETAILS';

				SELECT
				 DISTINCT A.ORDER_NUMBER,
				  A.CUSTOMER_FIRST_NAME
				  ||' '
				  ||A.CUSTOMER_SURNAME AS CUSTOMER_NAME,
				  A.CUSTOMER_POSTCODE,
				  A.CUSTOMER_ADDRESS1
				  ||' '
				  ||A.CUSTOMER_ADDRESS2 AS CUSTOMER_ADDRESS,
				  A.ORDER_TYPE,
				  TO_CHAR(A.ORDER_CREATED_DATE,'YYYY-MM-DD HH24:MI:SS') AS EXPECTED_DATE,
				  B.FINAL_DESTINATION_ID                                 AS DESTINATION,
				  A.CUSTOMER_EMAILID,
				  A.CUSTOMER_CARD,
				  B.FACILITY_NAME,
				  A.CLIENT_ID
				INTO
				  V_ORDER_NUMBER,
				  V_CUSTOMER_NAME,
				  V_POST_CODE,
				  V_ADDRESS,
				  V_ORDER_TYPE,
				  V_EXPECTED_DATETIME,
				  V_DESTINATION_ID,
				  V_EMAIL,
				  V_CARD,
				  V_FACILITY_NAME,
				  V_CLIENT_ID
				FROM CONNECT_CUSTOMER_TRANS_AUD A,
				  ( SELECT X.PARCEL_NUMBER,
						   X.CONTAINER_NUMBER,
						   Y.FACILITY_NAME,
						   X.FINAL_DESTINATION_ID,
						   X.ORDER_NUMBER,
						   X.CLIENT_ID
						FROM
						  ( SELECT
							PARCEL_NUMBER,
							CONTAINER_NUMBER,
							FACILITY_NAME,
							FINAL_DESTINATION_ID,
							ORDER_NUMBER,
							CLIENT_ID,
							END_DATE,
							ROW_NUMBER () OVER ( PARTITION BY PARCEL_NUMBER ORDER BY END_DATE DESC NULLS LAST ) RN
							FROM CONNECT_PARCEL_STATE_AUD WHERE  lower(ORDER_NUMBER)=lower(P_ORDER_ID)
														   AND  lower(CLIENT_ID)   =lower(M.CLIENT_ID)
						  ) X,
						  CONNECT_FACILITY Y
						WHERE X.FINAL_DESTINATION_ID = Y.FACILITY_ID
						AND RN=1
				  ) B
				WHERE A.ORDER_NUMBER     =B.ORDER_NUMBER
				AND A.CLIENT_ID          =B.CLIENT_ID
				AND lower(A.ORDER_NUMBER)=lower(P_ORDER_ID)
				AND lower(A.CLIENT_ID)   =lower(M.CLIENT_ID);

				V_OPERATION_NAME:=V_DEBUG_MSG8;
				V_TAB_NAME:=V_DEBUG_MSG20;
				V_COUNT3:=V_COUNT3+1;

				P_SEARCH_DETAILS.extend;
				P_SEARCH_DETAILS(V_COUNT4):=OBJ_ORDER_DET(V_ORDER_NUMBER,V_CUSTOMER_NAME,V_POST_CODE,V_ADDRESS,V_EMAIL,V_CARD,V_ORDER_TYPE,V_EXPECTED_DATETIME,V_DESTINATION_ID,V_FACILITY_NAME,NULL,V_CLIENT_ID,V_PARCEL_DETAILS);

				EXCEPTION

					/* without STORE_ID Search

					WHEN EXP_BUSINESS_LOGIC THEN
					RESPONSE_CODE:='204';
					V_MSG:='Different Store ID'|| '; Order number : '||P_ORDER_ID; -- Added order ID on 13-Aug-2015

					ROLLBACK;

					INSERT INTO CONNECT_LOG
					(
						PROCEDURE_NAME,
						TABLE_NAME,
						OPERATION_NAME,
						MESSAGE,
						OPERATION_DATE,
						RESPONSE_CODE
					)
					VALUES
					(
						'PR_CONNECT_SEARCH_HIST',
						V_TAB_NAME,
						V_OPERATION_NAME,
						V_MSG,
						SYSDATE,
						RESPONSE_CODE
					);*/

				  WHEN NO_DATA_FOUND THEN

				  RESPONSE_CODE:='204';

				  V_MSG:=SQLCODE||' - '||SQLERRM|| '; Order number : '||P_ORDER_ID; -- Added order ID on 13-Aug-2015

						ROLLBACK;

						INSERT INTO CONNECT_LOG
						(
							PROCEDURE_NAME,
							TABLE_NAME,
							OPERATION_NAME,
							MESSAGE,
							OPERATION_DATE,
							RESPONSE_CODE
						)
						VALUES
						(
							'PR_CONNECT_SEARCH_HIST',
							V_TAB_NAME,
							V_OPERATION_NAME,
							V_MSG,
							SYSDATE,
							RESPONSE_CODE
						);
			END   ;

		END LOOP;


	END IF;  --NO CLIENT ID

	IF P_SEARCH_DETAILS.COUNT = 0 THEN

		RESPONSE_CODE:='204';
		RESPONSE_DESC:='No data found';
	ELSE

		RESPONSE_DESC:='Records found.';
		RESPONSE_CODE:='000';

	END IF;

END IF; --to implement without STORE_ID Search 14/09/2015

EXCEPTION

WHEN no_data_found THEN
P_SEARCH_DETAILS:=OBJ_ORDER_DET_TBL();
RESPONSE_CODE:='204';
RESPONSE_DESC:='No Data Found';

V_MSG:=SQLCODE||' - '||SQLERRM|| '; Order number : '||P_ORDER_ID; -- Added order ID on 13-Aug-2015

ROLLBACK;

INSERT INTO CONNECT_LOG
  (
    PROCEDURE_NAME,
    TABLE_NAME,
    OPERATION_NAME,
    MESSAGE,
    OPERATION_DATE,
    RESPONSE_CODE
  )
  VALUES
  (
    'PR_CONNECT_SEARCH_HIST',
    V_TAB_NAME,
    V_OPERATION_NAME,
    V_MSG,
    SYSDATE,
    RESPONSE_CODE
  );

COMMIT;

WHEN EXP_BUSINESS_LOGIC THEN

P_SEARCH_DETAILS:=OBJ_ORDER_DET_TBL();
RESPONSE_CODE:='608';
RESPONSE_DESC:='Order '||p_order_id||' not for the store '||P_STORE_ID||' ; Correct Store : '||V_FACILITY_NAME1||'('||V_ORDER_CHECK||')';

ROLLBACK;

INSERT INTO CONNECT_LOG
  (
    PROCEDURE_NAME,
    TABLE_NAME,
    OPERATION_NAME,
    MESSAGE,
    OPERATION_DATE,
    RESPONSE_CODE
  )
  VALUES
  (
    'PR_CONNECT_SEARCH_HIST',
    V_TAB_NAME,
    V_OPERATION_NAME,
    RESPONSE_DESC,
    SYSDATE,
    RESPONSE_CODE
  );

COMMIT;

WHEN OTHERS THEN

RESPONSE_CODE:='633';
RESPONSE_DESC:='Internal Error';

V_MSG:=SQLCODE||' - '||SQLERRM|| '; Order number : '||P_ORDER_ID; -- Added order ID on 13-Aug-2015

ROLLBACK;

INSERT INTO CONNECT_LOG
  (
    PROCEDURE_NAME,
    TABLE_NAME,
    OPERATION_NAME,
    MESSAGE,
    OPERATION_DATE,
    RESPONSE_CODE
  )
  VALUES
  (
    'PR_CONNECT_SEARCH_HIST',
    V_TAB_NAME,
    V_OPERATION_NAME,
    V_MSG,
    SYSDATE,
    RESPONSE_CODE
  );

COMMIT;



END PR_CONNECT_SINGLE_SEARCH_HIST;


	 -------------------------HISTORY SEARCH-----------------------------------

PROCEDURE PR_CONNECT_SINGLE_SEARCH
(
      P_ORDER_ID  IN CONNECT_CUSTOMER_TRANS.ORDER_NUMBER%TYPE,
      P_CLIENT_ID IN CONNECT_PARCEL_STATE.CLIENT_ID%TYPE,
      P_STORE_ID  IN CONNECT_PARCEL_STATE.FINAL_DESTINATION_ID%TYPE,
      P_EPOD_FLAG IN  VARCHAR2,
      P_SEARCH_DETAILS OUT OBJ_ORDER_DET_TBL,
      RESPONSE_CODE OUT VARCHAR2,
      RESPONSE_DESC OUT VARCHAR2
)
IS

V_EPOD_DETAILS          OBJ_EPOD_SRCHDET_TBL    :=OBJ_EPOD_SRCHDET_TBL()   ;
V_PARCEL_DETAILS        OBJ_PARCEL_SRCHDET_TBL  :=OBJ_PARCEL_SRCHDET_TBL() ;
V_VERIFY_DETAILS        OBJ_PARCEL_VERIFY_TBL   :=OBJ_PARCEL_VERIFY_TBL()  ;
V_EPOD_PRCL_DTLS        OBJ_SIGNATURE_DET_TBL   :=OBJ_SIGNATURE_DET_TBL()  ;


V_SIGN   CLOB:=NULL;
V_COUNT1 NUMBER:=0;
V_COUNT2 NUMBER:=0;
V_COUNT3 NUMBER:=0;
V_COUNT4 NUMBER:=0;
COLLECT_DATE VARCHAR2(30);

V_PARCEL_NUMBER      CONNECT_PARCEL_STATE.PARCEL_NUMBER%TYPE;
V_PARCEL_DESCRIPTION CONNECT_PARCEL_STATE.PARCEL_DESCRIPTION%TYPE;
V_SLOT               CONNECT_CONTAINER_TRANS.CONTAINER_NUMBER%TYPE;
V_STATUS_CODE        CONNECT_STATUS_MASTER.STATUS_ID%TYPE;
V_STATUS_NAME        CONNECT_STATUS_MASTER.STATUS_NAME%TYPE;
V_ZONE_NAME          CONNECT_MASTER_CONTAINER.MASTER_LABEL%TYPE;
V_EPOD               CONNECT_PARCEL_COLLECT.CUSTOMER_SIGN%TYPE;
V_COLLECT_DATE       CONNECT_PARCEL_COLLECT.CREATED_BY%TYPE;
V_FACILITY_NAME      CONNECT_PARCEL_STATE.FACILITY_NAME%TYPE;
V_FACILITY_NAME1      CONNECT_PARCEL_STATE.FACILITY_NAME%TYPE;
v_email varchar2(100);
v_card varchar2(100);

V_ORDER_NUMBER       CONNECT_PARCEL_STATE.ORDER_NUMBER%TYPE;
V_POST_CODE          CONNECT_CUSTOMER_TRANS.CUSTOMER_POSTCODE%TYPE;
V_ORDER_TYPE         CONNECT_CUSTOMER_TRANS.ORDER_TYPE%TYPE;
V_EXPECTED_DATETIME  VARCHAR2(100);
V_DESTINATION_ID     CONNECT_PARCEL_STATE.FINAL_DESTINATION_ID%TYPE;
V_STATUS             CONNECT_STATUS_MASTER.STATUS_NAME%TYPE:='Collected';
V_OPERATION_NAME     CONNECT_LOG.OPERATION_NAME%TYPE;
V_TABLE_NAME         CONNECT_LOG.TABLE_NAME%TYPE;

V_SIGN_COUNT         NUMBER;
V_CUSTOMER_NAME      VARCHAR2(120);
V_ADDRESS		         VARCHAR2(120);
V_CHECK              NUMBER;
V_TAB_NAME           VARCHAR2(500);
V_MSG                VARCHAR2(4000);
V_DESTINATION        VARCHAR2(4000);
V_FLAG               VARCHAR2(1);

V_FILTER             VARCHAR2(30)  :='Slot';
V_DEBUG_MSG1         VARCHAR2(4000):='Fetching the parcel details for the EPOD';
V_DEBUG_MSG2         VARCHAR2(4000):='Creating the EPOD details';
V_DEBUG_MSG3         VARCHAR2(4000):='Loop2';
V_DEBUG_MSG4         VARCHAR2(4000):='Fetching the service type for all the parcels';
V_DEBUG_MSG5         VARCHAR2(4000):='Fetching all the parcel details';
V_DEBUG_MSG6         VARCHAR2(4000):='Creating the total parcel details';
V_DEBUG_MSG7         VARCHAR2(4000):='Fetching the total order details';
V_DEBUG_MSG8         VARCHAR2(4000):='Creating the Order details';
V_DEBUG_MSG9         VARCHAR2(4000):='Loop1';
V_DEBUG_MSG10        VARCHAR2(4000):='Insert Signature';
V_DEBUG_MSG11        VARCHAR2(4000):='Loop3';
V_DEBUG_MSG12        VARCHAR2(4000):='CONNECT_PARCEL_COLLECT,CONNECT_PARCEL_STATE';
V_DEBUG_MSG13        VARCHAR2(4000):='CONNECT_PARCEL_COLLECT_,CONNECT_PARCEL_STATE,CONNECT_PARCEL_LATEST_TRANS';
V_DEBUG_MSG14        VARCHAR2(4000):='CONNECT_CUSTOMER_TRANS,CONNECT_PARCEL_STATE';
V_DEBUG_MSG15        VARCHAR2(4000):='OBJ OBJ_EPOD_SRCHDET';
V_DEBUG_MSG16        VARCHAR2(4000):='CONNECT_PARCEL_STATE';
V_DEBUG_MSG17        VARCHAR2(4000):='OBJ OBJ_PARCEL_VERIFY';
V_DEBUG_MSG18        VARCHAR2(4000):='CONNECT_PARCEL_STATE,CONNECT_LOC_PKG_TRANS,CONNECT_PARCEL_LATEST_TRANS,CONNECT_STATUS_MASTER,CONNECT_CONTAINER_TRANS';
V_DEBUG_MSG19        VARCHAR2(4000):='OBJ OBJ_PARCEL_SRCHDET';
V_DEBUG_MSG20        VARCHAR2(4000):='OBJ OBJ_ORDER_DET';
V_DEBUG_MSG21        VARCHAR2(4000):='Failure';
V_DEBUG_MSG22        VARCHAR2(4000):='CONNECT_PARCEL_STATE,CONNECT_LOC_PKG_TRANS,CONNECT_PARCEL_LATEST_TRANS,CONNECT_STATUS_MASTER';
V_RESPONSE           VARCHAR2(4000):='Success';
V_ORDER_CHECK        VARCHAR2(100);
V_CLIENT_ID          VARCHAR2(100);
EXP_BUSINESS_LOGIC   EXCEPTION;

BEGIN

P_SEARCH_DETAILS:=OBJ_ORDER_DET_TBL();

--To implement without STORE_ID Search 14/09/2015
IF P_STORE_ID IS NOT NULL THEN

	IF P_CLIENT_ID IS NOT NULL THEN
	/*
	SELECT DISTINCT FINAL_DESTINATION_ID,FACILITY_NAME
	INTO V_ORDER_CHECK,V_FACILITY_NAME1
	FROM CONNECT_PARCEL_STATE
	WHERE lower(ORDER_NUMBER)      =lower(P_ORDER_ID)
	AND lower(CLIENT_ID)           =lower(P_CLIENT_ID);
	*/
  ----DBMS_OUTPUT.PUT_LINE ('1111');
	SELECT DISTINCT A.FINAL_DESTINATION_ID, B.FACILITY_NAME
		INTO V_ORDER_CHECK,V_FACILITY_NAME1
	FROM CONNECT_PARCEL_STATE A, CONNECT_FACILITY B
	WHERE A.FINAL_DESTINATION_ID = B.FACILITY_ID
	AND LOWER(A.ORDER_NUMBER) = LOWER(P_ORDER_ID)
	AND LOWER(A.CLIENT_ID) = LOWER(P_CLIENT_ID)
	AND (A.FINAL_DESTINATION_TYPE != 'Sort Centre Warehouse' OR FINAL_DESTINATION_TYPE IS NULL);

	IF V_ORDER_CHECK <> P_STORE_ID THEN
	RAISE EXP_BUSINESS_LOGIC;

	ELSE


		   V_OPERATION_NAME:='Auditing Action';
		   V_TAB_NAME:='CONNECT_USER_AUDIT';

	 -- Auditing Search Action
--DBMS_OUTPUT.PUT_LINE ('1112');
	INSERT INTO CONNECT_USER_AUDIT
				(
				  USER_ID,
				  PACKAGE_NUMBER,
				  STORE_NUMBER,
				  ACTION_TYPE,
				  MESSAGE,
				  AUDIT_CREATE_DATE,
				  PACKAGE_TYPE)
		 VALUES (
				  'N/A',
				  P_ORDER_ID,
				  'N/A',
				  'Search Single Order',
				  'Searched details for order number : '||P_ORDER_ID||'and client id : '||P_CLIENT_ID,
				  SYSDATE,
				  'Order');

	 -- Validating Signature Information

		   V_OPERATION_NAME:='Validating Signature';
		   V_TAB_NAME:='CONNECT_PARCEL_COLLECT';

	--fetching all the parcel details for the order
--DBMS_OUTPUT.PUT_LINE ('1113');
	FOR K IN (SELECT DISTINCT PARCEL_NUMBER
				FROM CONNECT_PARCEL_STATE
			   WHERE lower(ORDER_NUMBER)=lower(P_ORDER_ID)
				 AND lower(CLIENT_ID)   =lower(P_CLIENT_ID)
				 AND LOWER(FINAL_DESTINATION_ID) = LOWER(P_STORE_ID)
			  ) LOOP

			  --  V_COUNT1:=V_COUNT1+1;
--DBMS_OUTPUT.PUT_LINE ('1114');
	V_OPERATION_NAME:=V_DEBUG_MSG4;
	V_TAB_NAME:=V_DEBUG_MSG17;

				 --fetching the parcel service details for all the parcels in the order

									   SELECT OBJ_PARCEL_VERIFY(SERVICES) BULK COLLECT
									INTO V_VERIFY_DETAILS
									FROM
									  (SELECT SERVICES
									  FROM
										(SELECT SERVICE_TYPE,
										  CASE
											WHEN SERVICE_NAME='Y'
											THEN SERVICE_TYPE
											ELSE SERVICE_NAME
										  END AS SERVICES
										FROM CONNECT_PARCEL_SERVICE_TRANS
										WHERE SERVICE_NAME <> 'N'
										AND PARCEL_NUMBER   =K.PARCEL_NUMBER
										)
									  );


								   --Serv attributes count
--DBMS_OUTPUT.PUT_LINE ('1115');
									   BEGIN

											   V_OPERATION_NAME:=V_DEBUG_MSG5;
											   V_TAB_NAME:=V_DEBUG_MSG18;

											  --fetching the details of all the parcels in the order

	--                                              SELECT DISTINCT PARCEL_NUMBER,
	--                                                              PARCEL_DESCRIPTION,
	--                                                              STATUS_ID,
	--                                                              STATUS_NAME,
	--                                                              SLOT_ID
	--                                                              INTO V_PARCEL_NUMBER,
	--                                                              V_PARCEL_DESCRIPTION,
	--                                                              V_STATUS_CODE,
	--                                                              V_STATUS_NAME,
	--                                                              V_SLOT
	--                                                              FROM (
	--                                                               SELECT DISTINCT A.PARCEL_NUMBER,
	--                                                              A.PARCEL_DESCRIPTION,
	--                                                              C.STATUS_ID,
	--                                                              D.STATUS_NAME,
	--                                                              B.SLOT_ID
	--                                                            FROM CONNECT_PARCEL_STATE A,
	--                                                              CONNECT_LOC_PKG_TRANS B,
	--                                                              CONNECT_PARCEL_LATEST_TRANS C,
	--                                                              CONNECT_STATUS_MASTER D
	--                                                            WHERE A.PARCEL_NUMBER     =B.PARCEL_NUMBER(+)
	--                                                            AND A.PARCEL_NUMBER       =C.PARCEL_NUMBER
	--                                                            AND C.STATUS_ID           =D.STATUS_ID
	--                                                            AND A.PARCEL_NUMBER       =K.PARCEL_NUMBER
	--                                                           );
	--
	--                                                       SELECT A.CUSTOMER_SIGN,
	--                                                              TO_CHAR(A.PARCEL_COLLECT_DATE,'YYYY-MM-DD HH:MI:SS')
	--                                                         INTO V_SIGN,
	--                                                              COLLECT_DATE
	--                                                         FROM CONNECT_PARCEL_COLLECT A
	--                                                        WHERE A.PARCEL_NUMBER=K.PARCEL_NUMBER;
										V_SIGN:=NULL;
										IF P_EPOD_FLAG = 'TRUE'  THEN
--DBMS_OUTPUT.PUT_LINE ('1116');
														SELECT COUNT(1)
														  INTO V_SIGN_COUNT
														  FROM CONNECT_PARCEL_COLLECT
														 WHERE PARCEL_NUMBER =K.PARCEL_NUMBER;
--DBMS_OUTPUT.PUT_LINE ('1117');
														IF V_SIGN_COUNT > 0 THEN
--DBMS_OUTPUT.PUT_LINE ('1118');
														 SELECT CUSTOMER_SIGN
														   INTO V_SIGN
														   FROM CONNECT_PARCEL_COLLECT
														  WHERE PARCEL_NUMBER =K.PARCEL_NUMBER;
--DBMS_OUTPUT.PUT_LINE ('1119');
														END IF;

										END IF;

--DBMS_OUTPUT.PUT_LINE ('1120');
													  SELECT TEMPA.PARCEL_NUMBER,
														TEMPA.PARCEL_DESCRIPTION,
														TEMPA.STATUS_ID,
														TEMPA.USER_STATUS,
														TEMPA.SLOT_ID,
														TO_CHAR(TEMPA.PARCEL_COLLECT_DATE,'YYYY-MM-DD HH24:MI:SS')
													  INTO V_PARCEL_NUMBER,
														V_PARCEL_DESCRIPTION,
														V_STATUS_CODE,
														V_STATUS_NAME,
														V_SLOT,
														COLLECT_DATE
													  FROM
														( SELECT DISTINCT A.PARCEL_NUMBER,
														  A.PARCEL_DESCRIPTION,
														  C.STATUS_ID,
														  D.USER_STATUS,
														  CASE
															WHEN B.SLOT_ID IS NULL  AND D.STATUS_NAME <> 'Collected'
															THEN (
															  CASE
																WHEN A.DO_ASN_NUMBER IS NULL
																THEN A.CONTAINER_NUMBER
																ELSE E.MASTER_LABEL
															  END)
															ELSE B.SLOT_ID
														  END AS SLOT_ID,
														  A.CONTAINER_NUMBER,
														  E.MASTER_LABEL,
														  A.DO_ASN_NUMBER,
														  F.PARCEL_COLLECT_DATE
														FROM CONNECT_PARCEL_STATE A,
														  CONNECT_LOC_PKG_TRANS B,
														  CONNECT_PARCEL_LATEST_TRANS C,
														  CONNECT_STATUS_MASTER D,
														  CONNECT_CONTAINER_TRANS E,
														  CONNECT_PARCEL_COLLECT F
														WHERE A.PARCEL_NUMBER =B.PARCEL_NUMBER(+)
														AND A.PARCEL_NUMBER   =C.PARCEL_NUMBER
														AND C.STATUS_ID       =D.STATUS_ID
														AND E.CONTAINER_NUMBER(+)=A.CONTAINER_NUMBER
														AND F.PARCEL_NUMBER(+)=A.PARCEL_NUMBER
														) TEMPA
													  WHERE TEMPA.PARCEL_NUMBER =K.PARCEL_NUMBER;
--DBMS_OUTPUT.PUT_LINE ('1121');
	--
																IF  V_STATUS_NAME IN ('In Transit')  THEN
																	V_SLOT:=null;
																END IF;
	--
--DBMS_OUTPUT.PUT_LINE ('1122');
														   V_FLAG:='S';



									  EXCEPTION

												  WHEN OTHERS THEN
												  V_MSG:=SQLCODE||' - '||SQLERRM|| '; Order number : '||P_ORDER_ID; -- Added order ID on 13-Aug-2015
												  V_FLAG:='F';
                          --DBMS_OUTPUT.PUT_LINE ('1123');
												  INSERT INTO CONNECT_LOG
															  (
																PROCEDURE_NAME,
																TABLE_NAME,
																OPERATION_NAME,
																MESSAGE,
																OPERATION_DATE,
																RESPONSE_CODE
															  )
															  VALUES
															  (
																'PR_CONNECT_SINGLE_SEARCH',
																V_DEBUG_MSG22,
																V_OPERATION_NAME||' : '||K.PARCEL_NUMBER,
																V_MSG,
																SYSDATE,
																'N/A'
															  );
--DBMS_OUTPUT.PUT_LINE ('1124');
								  END ;


						  V_OPERATION_NAME:=V_DEBUG_MSG6;
						  V_TAB_NAME:=V_DEBUG_MSG19;

						  IF V_FLAG = 'S' THEN

								V_PARCEL_DETAILS.EXTEND;

								V_COUNT1:=V_COUNT1+1;

--DBMS_OUTPUT.PUT_LINE ('1125');
								V_PARCEL_DETAILS(V_COUNT1):=OBJ_PARCEL_SRCHDET(V_PARCEL_NUMBER,
																		  V_PARCEL_DESCRIPTION,
																		  V_SLOT,
																		  V_STATUS_CODE,
																		  V_STATUS_NAME,
																		  V_SIGN,
																		  COLLECT_DATE,
																		  V_VERIFY_DETAILS);

						  END IF;

	END LOOP;

		--fetching the ORDER DETAILS
	  V_TAB_NAME:=V_DEBUG_MSG14;
	  V_OPERATION_NAME:='FETCHING ORDER DETAILS';
--DBMS_OUTPUT.PUT_LINE ('1126');
	SELECT DISTINCT
		  A.ORDER_NUMBER,
		  A.CUSTOMER_FIRST_NAME||' '||A.CUSTOMER_SURNAME AS CUSTOMER_NAME,
		  A.CUSTOMER_POSTCODE,
		  A.CUSTOMER_ADDRESS1||' '||A.CUSTOMER_ADDRESS2 AS CUSTOMER_ADDRESS,
		  A.ORDER_TYPE,
		  TO_CHAR(A.ORDER_CREATED_DATE,'YYYY-MM-DD HH24:MI:SS') AS EXPECTED_DATE,
		  B.FINAL_DESTINATION_ID AS DESTINATION,
		  A.CUSTOMER_EMAILID,
		  A.CUSTOMER_CARD,
		  C.FACILITY_NAME,
		  A.CLIENT_ID
	INTO  V_ORDER_NUMBER,
		  V_CUSTOMER_NAME,
		  V_POST_CODE,
		  V_ADDRESS,
		  V_ORDER_TYPE,
		  V_EXPECTED_DATETIME,
		  V_DESTINATION_ID,
		  V_EMAIL,
		  V_CARD,
		  V_FACILITY_NAME,
		  V_CLIENT_ID
	FROM  CONNECT_CUSTOMER_TRANS A,
		  CONNECT_PARCEL_STATE B,
		  CONNECT_FACILITY C
	WHERE A.ORDER_NUMBER=B.ORDER_NUMBER
	AND A.CLIENT_ID=B.CLIENT_ID
	AND B.FINAL_DESTINATION_ID = C.FACILITY_ID
	AND lower(A.ORDER_NUMBER)=lower(P_ORDER_ID)
	AND lower(A.CLIENT_ID)=lower(P_CLIENT_ID);
--DBMS_OUTPUT.PUT_LINE ('1127');
	V_OPERATION_NAME:=V_DEBUG_MSG8;
	V_TAB_NAME:=V_DEBUG_MSG20;

	V_COUNT3:=V_COUNT3+1;

	--P_SEARCH_DETAILS:=OBJ_ORDER_DET_TBL();
	P_SEARCH_DETAILS.extend;

	P_SEARCH_DETAILS(1):=OBJ_ORDER_DET(V_ORDER_NUMBER,V_CUSTOMER_NAME,V_POST_CODE,V_ADDRESS,V_EMAIL,V_CARD,V_ORDER_TYPE,V_EXPECTED_DATETIME,V_DESTINATION_ID,V_FACILITY_NAME,NULL,V_CLIENT_ID,V_PARCEL_DETAILS);

	 -- RESPONSE_DESC:='Records found.';
	 -- RESPONSE_CODE:='000';
--DBMS_OUTPUT.PUT_LINE ('1128');
	COMMIT;

	END IF;

	ELSIF P_CLIENT_ID  IS NULL THEN


--DBMS_OUTPUT.PUT_LINE ('1129');

	  FOR M IN (
					SELECT DISTINCT A.CLIENT_ID
					  FROM CONNECT_CUSTOMER_TRANS A,
						   CONNECT_PARCEL_STATE B
				  WHERE A.ORDER_NUMBER=B.ORDER_NUMBER
				   AND A.CLIENT_ID=B.CLIENT_ID
				   AND LOWER(A.ORDER_NUMBER)=LOWER(P_ORDER_ID)
				) LOOP

--DBMS_OUTPUT.PUT_LINE ('1130');
		BEGIN

	  IF P_STORE_ID IS NOT NULL THEN
	/*
	  SELECT DISTINCT FINAL_DESTINATION_ID,FACILITY_NAME
		INTO V_ORDER_CHECK,V_FACILITY_NAME1
		FROM CONNECT_PARCEL_STATE
	   WHERE lower(ORDER_NUMBER)      =lower(P_ORDER_ID)
		 AND lower(CLIENT_ID)         =lower(M.CLIENT_ID);
	*/
--DBMS_OUTPUT.PUT_LINE ('1131');
		SELECT DISTINCT A.FINAL_DESTINATION_ID, B.FACILITY_NAME
			INTO V_ORDER_CHECK,V_FACILITY_NAME1
		FROM CONNECT_PARCEL_STATE A, CONNECT_FACILITY B
		WHERE A.FINAL_DESTINATION_ID = B.FACILITY_ID
		  AND LOWER(A.ORDER_NUMBER) = LOWER(P_ORDER_ID)
		AND LOWER(A.CLIENT_ID) = LOWER(M.CLIENT_ID)
		AND (A.FINAL_DESTINATION_TYPE != 'Sort Centre Warehouse' OR FINAL_DESTINATION_TYPE IS NULL);
--DBMS_OUTPUT.PUT_LINE ('1132');
		 IF V_ORDER_CHECK <> P_STORE_ID THEN
		   RAISE EXP_BUSINESS_LOGIC;
		   END IF;
--DBMS_OUTPUT.PUT_LINE ('1133');
	  END IF;

		V_COUNT4:=V_COUNT4+1;
	  V_COUNT1:=0;
	  V_PARCEL_DETAILS     :=OBJ_PARCEL_SRCHDET_TBL() ;
--DBMS_OUTPUT.PUT_LINE ('1134');
					FOR K IN (SELECT DISTINCT PARCEL_NUMBER
								FROM CONNECT_PARCEL_STATE
							   WHERE lower(ORDER_NUMBER)=lower(P_ORDER_ID)
								 AND lower(CLIENT_ID)   =lower(M.CLIENT_ID)
				   AND LOWER(FINAL_DESTINATION_ID) = LOWER(P_STORE_ID)
							  ) LOOP --

								V_OPERATION_NAME:=V_DEBUG_MSG4;
								V_TAB_NAME:=V_DEBUG_MSG17;

--DBMS_OUTPUT.PUT_LINE ('1135');

								  SELECT OBJ_PARCEL_VERIFY(SERVICES) BULK COLLECT
									INTO V_VERIFY_DETAILS
									FROM
									  (SELECT SERVICES
									  FROM
										(SELECT SERVICE_TYPE,
										  CASE
											WHEN SERVICE_NAME='Y'
											THEN SERVICE_TYPE
											ELSE SERVICE_NAME
										  END AS SERVICES
										FROM CONNECT_PARCEL_SERVICE_TRANS
										WHERE SERVICE_NAME <> 'N'
										AND PARCEL_NUMBER   =K.PARCEL_NUMBER
										)
									  );
--DBMS_OUTPUT.PUT_LINE ('1136');
									   --Serv attributes count

										BEGIN

											   V_OPERATION_NAME:=V_DEBUG_MSG5;
											   V_TAB_NAME:=V_DEBUG_MSG18;
--DBMS_OUTPUT.PUT_LINE ('1137');
											   --fetching the details of all the parcels in the order
												V_SIGN:=NULL;
												IF P_EPOD_FLAG = 'TRUE'  THEN
--DBMS_OUTPUT.PUT_LINE ('1138');
														SELECT COUNT(1)
														  INTO V_SIGN_COUNT
														  FROM CONNECT_PARCEL_COLLECT
														 WHERE PARCEL_NUMBER =K.PARCEL_NUMBER;

														IF V_SIGN_COUNT > 0 THEN
--DBMS_OUTPUT.PUT_LINE ('1139');
														 SELECT CUSTOMER_SIGN
														   INTO V_SIGN
														   FROM CONNECT_PARCEL_COLLECT
														  WHERE PARCEL_NUMBER =K.PARCEL_NUMBER;
--DBMS_OUTPUT.PUT_LINE ('1140');
														END IF;

												 END IF;

--DBMS_OUTPUT.PUT_LINE ('1141');
													  SELECT TEMPA.PARCEL_NUMBER,
														TEMPA.PARCEL_DESCRIPTION,
														TEMPA.STATUS_ID,
														TEMPA.USER_STATUS,
														TEMPA.SLOT_ID,
														TO_CHAR(TEMPA.PARCEL_COLLECT_DATE,'YYYY-MM-DD HH24:MI:SS')
													  INTO V_PARCEL_NUMBER,
														V_PARCEL_DESCRIPTION,
														V_STATUS_CODE,
														V_STATUS_NAME,
														V_SLOT,
														COLLECT_DATE
													  FROM
														( SELECT DISTINCT A.PARCEL_NUMBER,
														  A.PARCEL_DESCRIPTION,
														  C.STATUS_ID,
														  D.USER_STATUS,
														  CASE
															WHEN B.SLOT_ID IS NULL  AND D.STATUS_NAME <> 'Collected'
															THEN (
															  CASE
																WHEN A.DO_ASN_NUMBER IS NULL
																THEN A.CONTAINER_NUMBER
																ELSE E.MASTER_LABEL
															  END)
															ELSE B.SLOT_ID
														  END AS SLOT_ID,
														  A.CONTAINER_NUMBER,
														  E.MASTER_LABEL,
														  A.DO_ASN_NUMBER,
														  F.PARCEL_COLLECT_DATE
														FROM CONNECT_PARCEL_STATE A,
														  CONNECT_LOC_PKG_TRANS B,
														  CONNECT_PARCEL_LATEST_TRANS C,
														  CONNECT_STATUS_MASTER D,
														  CONNECT_CONTAINER_TRANS E,
														  CONNECT_PARCEL_COLLECT F
														WHERE A.PARCEL_NUMBER =B.PARCEL_NUMBER(+)
														AND A.PARCEL_NUMBER   =C.PARCEL_NUMBER
														AND C.STATUS_ID       =D.STATUS_ID
														AND E.CONTAINER_NUMBER(+)=A.CONTAINER_NUMBER
														AND F.PARCEL_NUMBER(+)=A.PARCEL_NUMBER
														) TEMPA
													  WHERE TEMPA.PARCEL_NUMBER =K.PARCEL_NUMBER;
--DBMS_OUTPUT.PUT_LINE ('1141');
	--
																IF  V_STATUS_NAME IN ('In Transit')  THEN
																	V_SLOT:=null;
																END IF;
	--
--DBMS_OUTPUT.PUT_LINE ('1142');
																V_FLAG:='S';


										EXCEPTION

												  WHEN OTHERS THEN
												  V_MSG:=SQLCODE||' - '||SQLERRM|| '; Order number : '||P_ORDER_ID; -- Added order ID on 13-Aug-2015
												  V_FLAG:='F';
												  INSERT INTO CONNECT_LOG
															  (
																PROCEDURE_NAME,
																TABLE_NAME,
																OPERATION_NAME,
																MESSAGE,
																OPERATION_DATE,
																RESPONSE_CODE
															  )
															  VALUES
															  (
																'PR_CONNECT_SINGLE_SEARCH',
																V_DEBUG_MSG22,
																V_OPERATION_NAME||' : '||K.PARCEL_NUMBER,
																V_MSG,
																SYSDATE,
																'N/A'
															  );
--DBMS_OUTPUT.PUT_LINE ('1143');
										END ;
--DBMS_OUTPUT.PUT_LINE ('1144');
												V_OPERATION_NAME:=V_DEBUG_MSG6;
												V_TAB_NAME:=V_DEBUG_MSG19;

						IF V_FLAG = 'S' THEN
--DBMS_OUTPUT.PUT_LINE ('1145');
								V_PARCEL_DETAILS.EXTEND;

								V_COUNT1:=V_COUNT1+1;


								V_PARCEL_DETAILS(V_COUNT1):=OBJ_PARCEL_SRCHDET(V_PARCEL_NUMBER,
																		  V_PARCEL_DESCRIPTION,
																		  V_SLOT,
																		  V_STATUS_CODE,
																		  V_STATUS_NAME,
																		  V_SIGN,
																		  COLLECT_DATE,
																		  V_VERIFY_DETAILS);

--DBMS_OUTPUT.PUT_LINE ('1146');
						END IF;

					END LOOP;--

			V_OPERATION_NAME:=V_DEBUG_MSG7;
			V_TAB_NAME:=V_DEBUG_MSG14;
			V_OPERATION_NAME:='FETCHING ORDER DETAILS';

--DBMS_OUTPUT.PUT_LINE ('1147');
	/*

					SELECT DISTINCT
							A.ORDER_NUMBER,
							A.CUSTOMER_FIRST_NAME||' '||A.CUSTOMER_SURNAME AS CUSTOMER_NAME,
							A.CUSTOMER_POSTCODE,
							A.CUSTOMER_ADDRESS1||' '||A.CUSTOMER_ADDRESS2 AS CUSTOMER_ADDRESS,
							A.ORDER_TYPE,
							TO_CHAR(A.ORDER_CREATED_DATE,'YYYY-MM-DD HH24:MI:SS') AS EXPECTED_DATE,
							B.FINAL_DESTINATION_ID AS DESTINATION,
							A.CUSTOMER_EMAILID,
							A.CUSTOMER_CARD,
							NVL(B.FACILITY_NAME,NULL),		ordr desc
							A.CLIENT_ID
					INTO  	V_ORDER_NUMBER,
							V_CUSTOMER_NAME,
							V_POST_CODE,
							V_ADDRESS,
							V_ORDER_TYPE,
							V_EXPECTED_DATETIME,
							V_DESTINATION_ID,
							V_EMAIL,
							V_CARD,
							V_FACILITY_NAME,
							V_CLIENT_ID
					FROM CONNECT_CUSTOMER_TRANS A,
							CONNECT_PARCEL_STATE B
					WHERE 	A.ORDER_NUMBER=B.ORDER_NUMBER
					  AND A.CLIENT_ID=B.CLIENT_ID
					  AND lower(A.ORDER_NUMBER)=lower(P_ORDER_ID)
					  AND lower(A.CLIENT_ID)=lower(M.CLIENT_ID);

	*/

					SELECT DISTINCT
							A.ORDER_NUMBER,
							A.CUSTOMER_FIRST_NAME||' '||A.CUSTOMER_SURNAME AS CUSTOMER_NAME,
							A.CUSTOMER_POSTCODE,
							A.CUSTOMER_ADDRESS1||' '||A.CUSTOMER_ADDRESS2 AS CUSTOMER_ADDRESS,
							A.ORDER_TYPE,
							TO_CHAR(A.ORDER_CREATED_DATE,'YYYY-MM-DD HH24:MI:SS') AS EXPECTED_DATE,
							B.FINAL_DESTINATION_ID AS DESTINATION,
							A.CUSTOMER_EMAILID,
							A.CUSTOMER_CARD,
							B.FACILITY_NAME,
							A.CLIENT_ID
					INTO  	V_ORDER_NUMBER,
							V_CUSTOMER_NAME,
							V_POST_CODE,
							V_ADDRESS,
							V_ORDER_TYPE,
							V_EXPECTED_DATETIME,
							V_DESTINATION_ID,
							V_EMAIL,
							V_CARD,
							V_FACILITY_NAME,
							V_CLIENT_ID
					FROM CONNECT_CUSTOMER_TRANS A,
						( SELECT ORDER_NUMBER, CLIENT_ID, FACILITY_NAME, FINAL_DESTINATION_ID FROM
							(
								SELECT ORDER_NUMBER, CLIENT_ID, FACILITY_NAME, FINAL_DESTINATION_ID,
								ROW_NUMBER () OVER ( PARTITION BY ORDER_NUMBER, CLIENT_ID ORDER BY FACILITY_NAME DESC NULLS LAST ) RN
								FROM CONNECT_PARCEL_STATE WHERE lower(ORDER_NUMBER)=lower(P_ORDER_ID) AND lower(CLIENT_ID) = lower(M.CLIENT_ID)
							)
					WHERE RN = 1 ) B
					WHERE 	A.ORDER_NUMBER=B.ORDER_NUMBER
					  AND A.CLIENT_ID=B.CLIENT_ID
					  AND lower(A.ORDER_NUMBER)=lower(P_ORDER_ID)
					  AND lower(A.CLIENT_ID)=lower(M.CLIENT_ID);
--DBMS_OUTPUT.PUT_LINE ('1147');
			V_OPERATION_NAME:=V_DEBUG_MSG8;
			V_TAB_NAME:=V_DEBUG_MSG20;

			V_COUNT3:=V_COUNT3+1;



		  P_SEARCH_DETAILS.extend;
			P_SEARCH_DETAILS(V_COUNT4):=OBJ_ORDER_DET(V_ORDER_NUMBER,V_CUSTOMER_NAME,V_POST_CODE,V_ADDRESS,V_EMAIL,V_CARD,V_ORDER_TYPE,V_EXPECTED_DATETIME,V_DESTINATION_ID,V_FACILITY_NAME,NULL,V_CLIENT_ID,V_PARCEL_DETAILS);

--DBMS_OUTPUT.PUT_LINE ('1148');


	EXCEPTION

	   WHEN EXP_BUSINESS_LOGIC THEN

		  RESPONSE_CODE:='204';
--DBMS_OUTPUT.PUT_LINE ('1149');
		  V_MSG:='Different Store ID';

				ROLLBACK;

				INSERT INTO CONNECT_LOG
				(
					PROCEDURE_NAME,
					TABLE_NAME,
					OPERATION_NAME,
					MESSAGE,
					OPERATION_DATE,
					RESPONSE_CODE
				)
				VALUES
				(
					'PR_CONNECT_SINGLE_SEARCH',
					V_TAB_NAME,
					V_OPERATION_NAME,
					V_MSG,
					SYSDATE,
					RESPONSE_CODE
				);

		  WHEN NO_DATA_FOUND THEN

--DBMS_OUTPUT.PUT_LINE ('1150');

		  RESPONSE_CODE:='204';

		  V_MSG:=SQLCODE||' - '||SQLERRM|| '; Order number : '||P_ORDER_ID; -- Added order ID on 13-Aug-2015

				ROLLBACK;

				INSERT INTO CONNECT_LOG
				(
					PROCEDURE_NAME,
					TABLE_NAME,
					OPERATION_NAME,
					MESSAGE,
					OPERATION_DATE,
					RESPONSE_CODE
				)
				VALUES
				(
					'PR_CONNECT_SINGLE_SEARCH',
					V_TAB_NAME,
					V_OPERATION_NAME,
					V_MSG,
					SYSDATE,
					RESPONSE_CODE
				);

	END   ;
--DBMS_OUTPUT.PUT_LINE ('1151');
	END LOOP;


	END IF;  --NO CLIENT ID

	IF P_SEARCH_DETAILS.COUNT = 0 THEN
--DBMS_OUTPUT.PUT_LINE ('1152');
		RESPONSE_CODE:='204';
		RESPONSE_DESC:='No data found';

	ELSE
--DBMS_OUTPUT.PUT_LINE ('1153');
		RESPONSE_DESC:='Records found.';
		RESPONSE_CODE:='000';

	END IF;
ELSE  --To implement without STORE_ID Search 14/09/2015
--DBMS_OUTPUT.PUT_LINE ('1154');
	IF P_CLIENT_ID IS NOT NULL THEN

			SELECT DISTINCT A.FINAL_DESTINATION_ID, B.FACILITY_NAME
				INTO V_ORDER_CHECK,V_FACILITY_NAME1
			FROM CONNECT_PARCEL_STATE A, CONNECT_FACILITY B
			WHERE A.FINAL_DESTINATION_ID = B.FACILITY_ID
			AND LOWER(A.ORDER_NUMBER) = LOWER(P_ORDER_ID)
			AND LOWER(A.CLIENT_ID) = LOWER(P_CLIENT_ID)
			AND (A.FINAL_DESTINATION_TYPE != 'Sort Centre Warehouse' OR FINAL_DESTINATION_TYPE IS NULL);
--DBMS_OUTPUT.PUT_LINE ('1155');
		/*		without STORE_ID Search
					IF V_ORDER_CHECK <> P_STORE_ID THEN
					RAISE EXP_BUSINESS_LOGIC;

					ELSE */

						   V_OPERATION_NAME:='Auditing Action';
						   V_TAB_NAME:='CONNECT_USER_AUDIT';

					 -- Auditing Search Action
							INSERT INTO CONNECT_USER_AUDIT
										(
										  USER_ID,
										  PACKAGE_NUMBER,
										  STORE_NUMBER,
										  ACTION_TYPE,
										  MESSAGE,
										  AUDIT_CREATE_DATE,
										  PACKAGE_TYPE)
								 VALUES (
										  'N/A',
										  P_ORDER_ID,
										  'N/A',
										  'Search Single Order',
										  'Searched details for order number : '||P_ORDER_ID||'and client id : '||P_CLIENT_ID,
										  SYSDATE,
										  'Order');
					 -- Validating Signature Information
						   V_OPERATION_NAME:='Validating Signature';
						   V_TAB_NAME:='CONNECT_PARCEL_COLLECT';
	--DBMS_OUTPUT.PUT_LINE ('1156');
					--fetching all the parcel details for the order

											FOR K IN (SELECT DISTINCT PARCEL_NUMBER
														FROM CONNECT_PARCEL_STATE
													   WHERE lower(ORDER_NUMBER)=lower(P_ORDER_ID)
														 AND lower(CLIENT_ID)   =lower(P_CLIENT_ID)
														 --AND LOWER(FINAL_DESTINATION_ID) = LOWER(P_STORE_ID) 		--without STORE_ID Search
													  ) LOOP
--DBMS_OUTPUT.PUT_LINE ('1157');
											V_OPERATION_NAME:=V_DEBUG_MSG4;
											V_TAB_NAME:=V_DEBUG_MSG17;

														 --fetching the parcel service details for all the parcels in the order

														SELECT OBJ_PARCEL_VERIFY(SERVICES) BULK COLLECT
														INTO V_VERIFY_DETAILS
														FROM
														  (SELECT SERVICES
														  FROM
															(SELECT SERVICE_TYPE,
															  CASE
																WHEN SERVICE_NAME='Y'
																THEN SERVICE_TYPE
																ELSE SERVICE_NAME
															  END AS SERVICES
															FROM CONNECT_PARCEL_SERVICE_TRANS
															WHERE SERVICE_NAME <> 'N'
															AND PARCEL_NUMBER   =K.PARCEL_NUMBER
															)
														  );
																		   --Serv attributes count

--DBMS_OUTPUT.PUT_LINE ('1158');
																				BEGIN
																						V_OPERATION_NAME:=V_DEBUG_MSG5;
																						V_TAB_NAME:=V_DEBUG_MSG18;
																						V_SIGN:=NULL;

																						IF P_EPOD_FLAG = 'TRUE'  THEN
--DBMS_OUTPUT.PUT_LINE ('1159');
																							SELECT COUNT(1)
																							INTO V_SIGN_COUNT
																							FROM CONNECT_PARCEL_COLLECT
																							WHERE PARCEL_NUMBER =K.PARCEL_NUMBER;
--DBMS_OUTPUT.PUT_LINE ('1160');
																							IF V_SIGN_COUNT > 0 THEN
																								SELECT CUSTOMER_SIGN
																								INTO V_SIGN
																								FROM CONNECT_PARCEL_COLLECT
																								WHERE PARCEL_NUMBER =K.PARCEL_NUMBER;
																							END IF;
--DBMS_OUTPUT.PUT_LINE ('1161');
																						END IF;

--DBMS_OUTPUT.PUT_LINE ('1162');
																						SELECT TEMPA.PARCEL_NUMBER,
																								TEMPA.PARCEL_DESCRIPTION,
																								TEMPA.STATUS_ID,
																								TEMPA.USER_STATUS,
																								TEMPA.SLOT_ID,
																								TO_CHAR(TEMPA.PARCEL_COLLECT_DATE,'YYYY-MM-DD HH24:MI:SS')
																						INTO V_PARCEL_NUMBER,
																								V_PARCEL_DESCRIPTION,
																								V_STATUS_CODE,
																								V_STATUS_NAME,
																								V_SLOT,
																								COLLECT_DATE
																						FROM
																								( SELECT DISTINCT A.PARCEL_NUMBER,
																								  A.PARCEL_DESCRIPTION,
																								  C.STATUS_ID,
																								  D.USER_STATUS,
																								  CASE
																									WHEN B.SLOT_ID IS NULL  AND D.STATUS_NAME <> 'Collected'
																									THEN (
																									  CASE
																										WHEN A.DO_ASN_NUMBER IS NULL
																										THEN A.CONTAINER_NUMBER
																										ELSE E.MASTER_LABEL
																									  END)
																									ELSE B.SLOT_ID
																								  END AS SLOT_ID,
																								  A.CONTAINER_NUMBER,
																								  E.MASTER_LABEL,
																								  A.DO_ASN_NUMBER,
																								  F.PARCEL_COLLECT_DATE
																								FROM CONNECT_PARCEL_STATE A,
																								  CONNECT_LOC_PKG_TRANS B,
																								  CONNECT_PARCEL_LATEST_TRANS C,
																								  CONNECT_STATUS_MASTER D,
																								  CONNECT_CONTAINER_TRANS E,
																								  CONNECT_PARCEL_COLLECT F
																								WHERE A.PARCEL_NUMBER =B.PARCEL_NUMBER(+)
																								AND A.PARCEL_NUMBER   =C.PARCEL_NUMBER
																								AND C.STATUS_ID       =D.STATUS_ID
																								AND E.CONTAINER_NUMBER(+)=A.CONTAINER_NUMBER
																								AND F.PARCEL_NUMBER(+)=A.PARCEL_NUMBER
																								) TEMPA
																								WHERE TEMPA.PARCEL_NUMBER =K.PARCEL_NUMBER;
--DBMS_OUTPUT.PUT_LINE ('1162');
																							IF  V_STATUS_NAME IN ('In Transit')  THEN
																								V_SLOT:=null;
																							END IF;
--DBMS_OUTPUT.PUT_LINE ('1163');											--
																							V_FLAG:='S';
																				EXCEPTION
																						  WHEN OTHERS THEN
																						  V_MSG:=SQLCODE||' - '||SQLERRM|| '; Order number : '||P_ORDER_ID; -- Added order ID on 13-Aug-2015
																						  V_FLAG:='F';
																						  INSERT INTO CONNECT_LOG
																									  (
																										PROCEDURE_NAME,
																										TABLE_NAME,
																										OPERATION_NAME,
																										MESSAGE,
																										OPERATION_DATE,
																										RESPONSE_CODE
																									  )
																									  VALUES
																									  (
																										'PR_CONNECT_SINGLE_SEARCH',
																										V_DEBUG_MSG22,
																										V_OPERATION_NAME||' : '||K.PARCEL_NUMBER,
																										V_MSG,
																										SYSDATE,
																										'N/A'
																									  );
--DBMS_OUTPUT.PUT_LINE ('1164');
																				END;

															V_OPERATION_NAME:=V_DEBUG_MSG6;
															V_TAB_NAME:=V_DEBUG_MSG19;

															IF V_FLAG = 'S' THEN
--DBMS_OUTPUT.PUT_LINE ('1165');
																V_PARCEL_DETAILS.EXTEND;
																V_COUNT1:=V_COUNT1+1;
																V_PARCEL_DETAILS(V_COUNT1):=OBJ_PARCEL_SRCHDET(V_PARCEL_NUMBER,
																												  V_PARCEL_DESCRIPTION,
																												  V_SLOT,
																												  V_STATUS_CODE,
																												  V_STATUS_NAME,
																												  V_SIGN,
																												  COLLECT_DATE,
																												  V_VERIFY_DETAILS);
															END IF;
											END LOOP;
--DBMS_OUTPUT.PUT_LINE ('1166');
							--fetching the ORDER DETAILS
							V_TAB_NAME:=V_DEBUG_MSG14;
							V_OPERATION_NAME:='FETCHING ORDER DETAILS';
--DBMS_OUTPUT.PUT_LINE ('1167');
							SELECT DISTINCT
								  A.ORDER_NUMBER,
								  A.CUSTOMER_FIRST_NAME||' '||A.CUSTOMER_SURNAME AS CUSTOMER_NAME,
								  A.CUSTOMER_POSTCODE,
								  A.CUSTOMER_ADDRESS1||' '||A.CUSTOMER_ADDRESS2 AS CUSTOMER_ADDRESS,
								  A.ORDER_TYPE,
								  TO_CHAR(A.ORDER_CREATED_DATE,'YYYY-MM-DD HH24:MI:SS') AS EXPECTED_DATE,
								  B.FINAL_DESTINATION_ID AS DESTINATION,
								  A.CUSTOMER_EMAILID,
								  A.CUSTOMER_CARD,
								  C.FACILITY_NAME,
								  A.CLIENT_ID
							INTO  V_ORDER_NUMBER,
								  V_CUSTOMER_NAME,
								  V_POST_CODE,
								  V_ADDRESS,
								  V_ORDER_TYPE,
								  V_EXPECTED_DATETIME,
								  V_DESTINATION_ID,
								  V_EMAIL,
								  V_CARD,
								  V_FACILITY_NAME,
								  V_CLIENT_ID
							FROM  CONNECT_CUSTOMER_TRANS A,
								  CONNECT_PARCEL_STATE B,
								  CONNECT_FACILITY C
							WHERE A.ORDER_NUMBER=B.ORDER_NUMBER
							AND A.CLIENT_ID=B.CLIENT_ID
							AND B.FINAL_DESTINATION_ID = C.FACILITY_ID
							AND lower(A.ORDER_NUMBER)=lower(P_ORDER_ID)
							AND lower(A.CLIENT_ID)=lower(P_CLIENT_ID);
--DBMS_OUTPUT.PUT_LINE ('1168');
							V_OPERATION_NAME:=V_DEBUG_MSG8;
							V_TAB_NAME:=V_DEBUG_MSG20;
							V_COUNT3:=V_COUNT3+1;
							--P_SEARCH_DETAILS:=OBJ_ORDER_DET_TBL();
							P_SEARCH_DETAILS.extend;
							P_SEARCH_DETAILS(1):=OBJ_ORDER_DET(V_ORDER_NUMBER,V_CUSTOMER_NAME,V_POST_CODE,V_ADDRESS,V_EMAIL,V_CARD,V_ORDER_TYPE,V_EXPECTED_DATETIME,V_DESTINATION_ID,V_FACILITY_NAME,NULL,V_CLIENT_ID,V_PARCEL_DETAILS);
							 -- RESPONSE_DESC:='Records found.';
							 -- RESPONSE_CODE:='000';

							COMMIT;

	ELSIF P_CLIENT_ID  IS NULL THEN
--DBMS_OUTPUT.PUT_LINE ('1169');
		FOR M IN (
					SELECT DISTINCT A.CLIENT_ID
					  FROM CONNECT_CUSTOMER_TRANS A,
						   CONNECT_PARCEL_STATE B
				  WHERE A.ORDER_NUMBER=B.ORDER_NUMBER
				   AND A.CLIENT_ID=B.CLIENT_ID
				   AND LOWER(A.ORDER_NUMBER)=LOWER(P_ORDER_ID)
				) LOOP
		BEGIN
    --DBMS_OUTPUT.PUT_LINE ('1170');

		/*  Without STORE_ID Search
		IF P_STORE_ID IS NOT NULL THEN

				SELECT DISTINCT A.FINAL_DESTINATION_ID, B.FACILITY_NAME
				INTO V_ORDER_CHECK,V_FACILITY_NAME1
				FROM CONNECT_PARCEL_STATE A, CONNECT_FACILITY B
				WHERE A.FINAL_DESTINATION_ID = B.FACILITY_ID
				AND LOWER(A.ORDER_NUMBER) = LOWER(P_ORDER_ID)
				AND LOWER(A.CLIENT_ID) = LOWER(M.CLIENT_ID)
				AND (A.FINAL_DESTINATION_TYPE != 'Sort Centre Warehouse' OR FINAL_DESTINATION_TYPE IS NULL);

				IF V_ORDER_CHECK <> P_STORE_ID THEN
					RAISE EXP_BUSINESS_LOGIC;
				END IF;

			END IF;
		*/

			V_COUNT4:=V_COUNT4+1;
			V_COUNT1:=0;
			V_PARCEL_DETAILS     :=OBJ_PARCEL_SRCHDET_TBL() ;

			FOR K IN (SELECT DISTINCT PARCEL_NUMBER
						FROM CONNECT_PARCEL_STATE
						WHERE lower(ORDER_NUMBER)=lower(P_ORDER_ID)
						AND lower(CLIENT_ID)   =lower(M.CLIENT_ID)
						-- AND LOWER(FINAL_DESTINATION_ID) = LOWER(P_STORE_ID) -- without STORE_ID Search
					) LOOP --
 --DBMS_OUTPUT.PUT_LINE ('1171');
					V_OPERATION_NAME:=V_DEBUG_MSG4;
					V_TAB_NAME:=V_DEBUG_MSG17;

					SELECT OBJ_PARCEL_VERIFY(SERVICES) BULK COLLECT
					INTO V_VERIFY_DETAILS
					FROM
						(SELECT SERVICES
								FROM
									(SELECT SERVICE_TYPE,
										  CASE
											WHEN SERVICE_NAME='Y'
												THEN SERVICE_TYPE
											ELSE SERVICE_NAME
											END AS SERVICES
										FROM CONNECT_PARCEL_SERVICE_TRANS
										WHERE SERVICE_NAME <> 'N'
										AND PARCEL_NUMBER   =K.PARCEL_NUMBER
										)
									  );
 --DBMS_OUTPUT.PUT_LINE ('1172');
					--Serv attributes count

					BEGIN
						V_OPERATION_NAME:=V_DEBUG_MSG5;
						V_TAB_NAME:=V_DEBUG_MSG18;
 --DBMS_OUTPUT.PUT_LINE ('1173');
						 --fetching the details of all the parcels in the order
						V_SIGN:=NULL;
						IF P_EPOD_FLAG = 'TRUE'  THEN

							SELECT COUNT(1)
							INTO V_SIGN_COUNT
							FROM CONNECT_PARCEL_COLLECT
							WHERE PARCEL_NUMBER =K.PARCEL_NUMBER;
 --DBMS_OUTPUT.PUT_LINE ('1174');
							IF V_SIGN_COUNT > 0 THEN

								SELECT CUSTOMER_SIGN
								INTO V_SIGN
								FROM CONNECT_PARCEL_COLLECT
								WHERE PARCEL_NUMBER =K.PARCEL_NUMBER;
                 --DBMS_OUTPUT.PUT_LINE ('1175');
							END IF;

						END IF;

						SELECT TEMPA.PARCEL_NUMBER,
															TEMPA.PARCEL_DESCRIPTION,
															TEMPA.STATUS_ID,
															TEMPA.USER_STATUS,
															TEMPA.SLOT_ID,
															TO_CHAR(TEMPA.PARCEL_COLLECT_DATE,'YYYY-MM-DD HH24:MI:SS')
														  INTO V_PARCEL_NUMBER,
															V_PARCEL_DESCRIPTION,
															V_STATUS_CODE,
															V_STATUS_NAME,
															V_SLOT,
															COLLECT_DATE
														  FROM
															( SELECT DISTINCT A.PARCEL_NUMBER,
															  A.PARCEL_DESCRIPTION,
															  C.STATUS_ID,
															  D.USER_STATUS,
															  CASE
																WHEN B.SLOT_ID IS NULL  AND D.STATUS_NAME <> 'Collected'
																THEN (
																  CASE
																	WHEN A.DO_ASN_NUMBER IS NULL
																	THEN A.CONTAINER_NUMBER
																	ELSE E.MASTER_LABEL
																  END)
																ELSE B.SLOT_ID
															  END AS SLOT_ID,
															  A.CONTAINER_NUMBER,
															  E.MASTER_LABEL,
															  A.DO_ASN_NUMBER,
															  F.PARCEL_COLLECT_DATE
															FROM CONNECT_PARCEL_STATE A,
															  CONNECT_LOC_PKG_TRANS B,
															  CONNECT_PARCEL_LATEST_TRANS C,
															  CONNECT_STATUS_MASTER D,
															  CONNECT_CONTAINER_TRANS E,
															  CONNECT_PARCEL_COLLECT F
															WHERE A.PARCEL_NUMBER =B.PARCEL_NUMBER(+)
															AND A.PARCEL_NUMBER   =C.PARCEL_NUMBER
															AND C.STATUS_ID       =D.STATUS_ID
															AND E.CONTAINER_NUMBER(+)=A.CONTAINER_NUMBER
															AND F.PARCEL_NUMBER(+)=A.PARCEL_NUMBER
															) TEMPA
														  WHERE TEMPA.PARCEL_NUMBER =K.PARCEL_NUMBER;
 --DBMS_OUTPUT.PUT_LINE ('1176');
		IF  V_STATUS_NAME IN ('In Transit')  THEN
							V_SLOT:=null;
						END IF;

						V_FLAG:='S';
 --DBMS_OUTPUT.PUT_LINE ('1177');
					EXCEPTION

						WHEN OTHERS THEN
							V_MSG:=SQLCODE||' - '||SQLERRM|| '; Order number : '||P_ORDER_ID; -- Added order ID on 13-Aug-2015
							V_FLAG:='F';

							INSERT INTO CONNECT_LOG
								 (
																PROCEDURE_NAME,
																TABLE_NAME,
																OPERATION_NAME,
																MESSAGE,
																OPERATION_DATE,
																RESPONSE_CODE
															  )
															  VALUES
															  (
																'PR_CONNECT_SINGLE_SEARCH',
																V_DEBUG_MSG22,
																V_OPERATION_NAME||' : '||K.PARCEL_NUMBER,
																V_MSG,
																SYSDATE,
																'N/A'
															  );
 --DBMS_OUTPUT.PUT_LINE ('1178');
					END ;

					V_OPERATION_NAME:=V_DEBUG_MSG6;
					V_TAB_NAME:=V_DEBUG_MSG19;

					IF V_FLAG = 'S' THEN

						V_PARCEL_DETAILS.EXTEND;
						V_COUNT1:=V_COUNT1+1;

						V_PARCEL_DETAILS(V_COUNT1):=OBJ_PARCEL_SRCHDET(V_PARCEL_NUMBER,
																		  V_PARCEL_DESCRIPTION,
																		  V_SLOT,
																		  V_STATUS_CODE,
																		  V_STATUS_NAME,
																		  V_SIGN,
																		  COLLECT_DATE,
																		  V_VERIFY_DETAILS);
             --DBMS_OUTPUT.PUT_LINE ('1179');
					END IF;

			END LOOP;--

			V_OPERATION_NAME:=V_DEBUG_MSG7;
			V_TAB_NAME:=V_DEBUG_MSG14;
			V_OPERATION_NAME:='FETCHING ORDER DETAILS';
 --DBMS_OUTPUT.PUT_LINE ('1180');
			SELECT DISTINCT
							A.ORDER_NUMBER,
							A.CUSTOMER_FIRST_NAME||' '||A.CUSTOMER_SURNAME AS CUSTOMER_NAME,
							A.CUSTOMER_POSTCODE,
							A.CUSTOMER_ADDRESS1||' '||A.CUSTOMER_ADDRESS2 AS CUSTOMER_ADDRESS,
							A.ORDER_TYPE,
							TO_CHAR(A.ORDER_CREATED_DATE,'YYYY-MM-DD HH24:MI:SS') AS EXPECTED_DATE,
							B.FINAL_DESTINATION_ID AS DESTINATION,
							A.CUSTOMER_EMAILID,
							A.CUSTOMER_CARD,
							B.FACILITY_NAME,
							A.CLIENT_ID
			INTO  	V_ORDER_NUMBER,
							V_CUSTOMER_NAME,
							V_POST_CODE,
							V_ADDRESS,
							V_ORDER_TYPE,
							V_EXPECTED_DATETIME,
							V_DESTINATION_ID,
							V_EMAIL,
							V_CARD,
							V_FACILITY_NAME,
							V_CLIENT_ID
			FROM CONNECT_CUSTOMER_TRANS A,
						( SELECT ORDER_NUMBER, CLIENT_ID, FACILITY_NAME, FINAL_DESTINATION_ID FROM
							(
								SELECT ORDER_NUMBER, CLIENT_ID, FACILITY_NAME, FINAL_DESTINATION_ID,
								ROW_NUMBER () OVER ( PARTITION BY ORDER_NUMBER, CLIENT_ID ORDER BY FACILITY_NAME DESC NULLS LAST ) RN
								FROM CONNECT_PARCEL_STATE WHERE lower(ORDER_NUMBER)=lower(P_ORDER_ID) AND lower(CLIENT_ID) = lower(M.CLIENT_ID)
							)
					WHERE RN = 1 ) B
			WHERE 	A.ORDER_NUMBER=B.ORDER_NUMBER
					  AND A.CLIENT_ID=B.CLIENT_ID
					  AND lower(A.ORDER_NUMBER)=lower(P_ORDER_ID)
					  AND lower(A.CLIENT_ID)=lower(M.CLIENT_ID);
 --DBMS_OUTPUT.PUT_LINE ('1181');
			V_OPERATION_NAME:=V_DEBUG_MSG8;
			V_TAB_NAME:=V_DEBUG_MSG20;
			V_COUNT3:=V_COUNT3+1;
			P_SEARCH_DETAILS.extend;
			P_SEARCH_DETAILS(V_COUNT4):=OBJ_ORDER_DET(V_ORDER_NUMBER,V_CUSTOMER_NAME,V_POST_CODE,V_ADDRESS,V_EMAIL,V_CARD,V_ORDER_TYPE,V_EXPECTED_DATETIME,V_DESTINATION_ID,V_FACILITY_NAME,NULL,V_CLIENT_ID,V_PARCEL_DETAILS);

		EXCEPTION

		/*	without STORE_ID Search

			WHEN EXP_BUSINESS_LOGIC THEN

				RESPONSE_CODE:='204';
				V_MSG:='Different Store ID';
				ROLLBACK;

				INSERT INTO CONNECT_LOG
				(
					PROCEDURE_NAME,
					TABLE_NAME,
					OPERATION_NAME,
					MESSAGE,
					OPERATION_DATE,
					RESPONSE_CODE
				)
				VALUES
				(
					'PR_CONNECT_SINGLE_SEARCH',
					V_TAB_NAME,
					V_OPERATION_NAME,
					V_MSG,
					SYSDATE,
					RESPONSE_CODE
				); */

			WHEN NO_DATA_FOUND THEN
--DBMS_OUTPUT.PUT_LINE ('1182');
				RESPONSE_CODE:='204';
				V_MSG:=SQLCODE||' - '||SQLERRM|| '; Order number : '||P_ORDER_ID; -- Added order ID on 13-Aug-2015
				ROLLBACK;
 --DBMS_OUTPUT.PUT_LINE ('1183');
				INSERT INTO CONNECT_LOG
				(
					PROCEDURE_NAME,
					TABLE_NAME,
					OPERATION_NAME,
					MESSAGE,
					OPERATION_DATE,
					RESPONSE_CODE
				)
				VALUES
				(
					'PR_CONNECT_SINGLE_SEARCH',
					V_TAB_NAME,
					V_OPERATION_NAME,
					V_MSG,
					SYSDATE,
					RESPONSE_CODE
				);
		END   ;

		END LOOP;
	 --DBMS_OUTPUT.PUT_LINE ('1184');
	END IF;  --NO CLIENT ID

	IF P_SEARCH_DETAILS.COUNT = 0 THEN

		RESPONSE_CODE:='204';
		RESPONSE_DESC:='No data found';
 --DBMS_OUTPUT.PUT_LINE ('1185');
	ELSE
		RESPONSE_DESC:='Records found.';
		RESPONSE_CODE:='000';
 --DBMS_OUTPUT.PUT_LINE ('1186');
	END IF;



END IF; --To implement without STORE_ID Search 14/09/2015

EXCEPTION

WHEN no_data_found THEN
P_SEARCH_DETAILS:=OBJ_ORDER_DET_TBL();
RESPONSE_CODE:='204';
RESPONSE_DESC:='No Data Found';
 --DBMS_OUTPUT.PUT_LINE ('1187');
PR_CONNECT_SINGLE_SEARCH_HIST (P_ORDER_ID,P_CLIENT_ID,P_STORE_ID,P_EPOD_FLAG,P_SEARCH_DETAILS,RESPONSE_CODE,RESPONSE_DESC);

V_MSG:=SQLCODE||' - '||SQLERRM|| '; Order number : '||P_ORDER_ID; -- Added order ID on 13-Aug-2015

ROLLBACK;

INSERT INTO CONNECT_LOG
  (
    PROCEDURE_NAME,
    TABLE_NAME,
    OPERATION_NAME,
    MESSAGE,
    OPERATION_DATE,
    RESPONSE_CODE
  )
  VALUES
  (
    'PR_CONNECT_SINGLE_SEARCH',
    V_TAB_NAME,
    V_OPERATION_NAME,
    V_MSG,
    SYSDATE,
    RESPONSE_CODE
  );
 --DBMS_OUTPUT.PUT_LINE ('1188');
COMMIT;

WHEN EXP_BUSINESS_LOGIC THEN
 --DBMS_OUTPUT.PUT_LINE ('1189');
P_SEARCH_DETAILS:=OBJ_ORDER_DET_TBL();
RESPONSE_CODE:='608';
RESPONSE_DESC:='Order '||p_order_id||' not for the store '||P_STORE_ID||' ; Correct Store : '||V_FACILITY_NAME1||'('||V_ORDER_CHECK||')';

ROLLBACK;
 --DBMS_OUTPUT.PUT_LINE ('1190');
INSERT INTO CONNECT_LOG
  (
    PROCEDURE_NAME,
    TABLE_NAME,
    OPERATION_NAME,
    MESSAGE,
    OPERATION_DATE,
    RESPONSE_CODE
  )
  VALUES
  (
    'PR_CONNECT_SINGLE_SEARCH',
    V_TAB_NAME,
    V_OPERATION_NAME,
    RESPONSE_DESC,
    SYSDATE,
    RESPONSE_CODE
  );

COMMIT;
 --DBMS_OUTPUT.PUT_LINE ('1191');
WHEN OTHERS THEN

RESPONSE_CODE:='633';
RESPONSE_DESC:='Internal Error';

V_MSG:=SQLCODE||' - '||SQLERRM|| '; Order number : '||P_ORDER_ID; -- Added order ID on 13-Aug-2015

ROLLBACK;
 --DBMS_OUTPUT.PUT_LINE ('1192');
INSERT INTO CONNECT_LOG
  (
    PROCEDURE_NAME,
    TABLE_NAME,
    OPERATION_NAME,
    MESSAGE,
    OPERATION_DATE,
    RESPONSE_CODE
  )
  VALUES
  (
    'PR_CONNECT_SINGLE_SEARCH',
    V_TAB_NAME,
    V_OPERATION_NAME,
    V_MSG,
    SYSDATE,
    RESPONSE_CODE
  );

COMMIT;



END PR_CONNECT_SINGLE_SEARCH;

END PKG_CONNECT_SEARCH_ORDERS;